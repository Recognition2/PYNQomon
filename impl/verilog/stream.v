// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stream,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=10.973750,HLS_SYN_LAT=59,HLS_SYN_TPT=58,HLS_SYN_MEM=1,HLS_SYN_DSP=0,HLS_SYN_FF=699,HLS_SYN_LUT=1712,HLS_VERSION=2018_2}" *)

module stream (
        ap_clk,
        ap_rst_n,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        dst_TDATA,
        dst_TVALID,
        dst_TREADY,
        dst_TKEEP,
        dst_TSTRB,
        dst_TUSER,
        dst_TLAST,
        dst_TID,
        dst_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 58'd1;
parameter    ap_ST_fsm_pp0_stage1 = 58'd2;
parameter    ap_ST_fsm_pp0_stage2 = 58'd4;
parameter    ap_ST_fsm_pp0_stage3 = 58'd8;
parameter    ap_ST_fsm_pp0_stage4 = 58'd16;
parameter    ap_ST_fsm_pp0_stage5 = 58'd32;
parameter    ap_ST_fsm_pp0_stage6 = 58'd64;
parameter    ap_ST_fsm_pp0_stage7 = 58'd128;
parameter    ap_ST_fsm_pp0_stage8 = 58'd256;
parameter    ap_ST_fsm_pp0_stage9 = 58'd512;
parameter    ap_ST_fsm_pp0_stage10 = 58'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 58'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 58'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 58'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 58'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 58'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 58'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 58'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 58'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 58'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 58'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 58'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 58'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 58'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 58'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 58'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 58'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 58'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 58'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 58'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 58'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 58'd2147483648;
parameter    ap_ST_fsm_pp0_stage32 = 58'd4294967296;
parameter    ap_ST_fsm_pp0_stage33 = 58'd8589934592;
parameter    ap_ST_fsm_pp0_stage34 = 58'd17179869184;
parameter    ap_ST_fsm_pp0_stage35 = 58'd34359738368;
parameter    ap_ST_fsm_pp0_stage36 = 58'd68719476736;
parameter    ap_ST_fsm_pp0_stage37 = 58'd137438953472;
parameter    ap_ST_fsm_pp0_stage38 = 58'd274877906944;
parameter    ap_ST_fsm_pp0_stage39 = 58'd549755813888;
parameter    ap_ST_fsm_pp0_stage40 = 58'd1099511627776;
parameter    ap_ST_fsm_pp0_stage41 = 58'd2199023255552;
parameter    ap_ST_fsm_pp0_stage42 = 58'd4398046511104;
parameter    ap_ST_fsm_pp0_stage43 = 58'd8796093022208;
parameter    ap_ST_fsm_pp0_stage44 = 58'd17592186044416;
parameter    ap_ST_fsm_pp0_stage45 = 58'd35184372088832;
parameter    ap_ST_fsm_pp0_stage46 = 58'd70368744177664;
parameter    ap_ST_fsm_pp0_stage47 = 58'd140737488355328;
parameter    ap_ST_fsm_pp0_stage48 = 58'd281474976710656;
parameter    ap_ST_fsm_pp0_stage49 = 58'd562949953421312;
parameter    ap_ST_fsm_pp0_stage50 = 58'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage51 = 58'd2251799813685248;
parameter    ap_ST_fsm_pp0_stage52 = 58'd4503599627370496;
parameter    ap_ST_fsm_pp0_stage53 = 58'd9007199254740992;
parameter    ap_ST_fsm_pp0_stage54 = 58'd18014398509481984;
parameter    ap_ST_fsm_pp0_stage55 = 58'd36028797018963968;
parameter    ap_ST_fsm_pp0_stage56 = 58'd72057594037927936;
parameter    ap_ST_fsm_pp0_stage57 = 58'd144115188075855872;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
input  [3:0] src_TKEEP;
input  [3:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
output  [31:0] dst_TDATA;
output   dst_TVALID;
input   dst_TREADY;
output  [3:0] dst_TKEEP;
output  [3:0] dst_TSTRB;
output  [0:0] dst_TUSER;
output  [0:0] dst_TLAST;
output  [0:0] dst_TID;
output  [0:0] dst_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

 reg    ap_rst_n_inv;
reg   [31:0] src_V_data_V_0_data_out;
wire    src_V_data_V_0_vld_in;
wire    src_V_data_V_0_vld_out;
wire    src_V_data_V_0_ack_in;
reg    src_V_data_V_0_ack_out;
reg   [31:0] src_V_data_V_0_payload_A;
reg   [31:0] src_V_data_V_0_payload_B;
reg    src_V_data_V_0_sel_rd;
reg    src_V_data_V_0_sel_wr;
wire    src_V_data_V_0_sel;
wire    src_V_data_V_0_load_A;
wire    src_V_data_V_0_load_B;
reg   [1:0] src_V_data_V_0_state;
wire    src_V_data_V_0_state_cmp_full;
reg   [3:0] src_V_keep_V_0_data_out;
wire    src_V_keep_V_0_vld_in;
wire    src_V_keep_V_0_vld_out;
wire    src_V_keep_V_0_ack_in;
reg    src_V_keep_V_0_ack_out;
reg   [3:0] src_V_keep_V_0_payload_A;
reg   [3:0] src_V_keep_V_0_payload_B;
reg    src_V_keep_V_0_sel_rd;
reg    src_V_keep_V_0_sel_wr;
wire    src_V_keep_V_0_sel;
wire    src_V_keep_V_0_load_A;
wire    src_V_keep_V_0_load_B;
reg   [1:0] src_V_keep_V_0_state;
wire    src_V_keep_V_0_state_cmp_full;
reg   [3:0] src_V_strb_V_0_data_out;
wire    src_V_strb_V_0_vld_in;
wire    src_V_strb_V_0_vld_out;
wire    src_V_strb_V_0_ack_in;
reg    src_V_strb_V_0_ack_out;
reg   [3:0] src_V_strb_V_0_payload_A;
reg   [3:0] src_V_strb_V_0_payload_B;
reg    src_V_strb_V_0_sel_rd;
reg    src_V_strb_V_0_sel_wr;
wire    src_V_strb_V_0_sel;
wire    src_V_strb_V_0_load_A;
wire    src_V_strb_V_0_load_B;
reg   [1:0] src_V_strb_V_0_state;
wire    src_V_strb_V_0_state_cmp_full;
reg   [0:0] src_V_user_V_0_data_out;
wire    src_V_user_V_0_vld_in;
wire    src_V_user_V_0_vld_out;
wire    src_V_user_V_0_ack_in;
reg    src_V_user_V_0_ack_out;
reg   [0:0] src_V_user_V_0_payload_A;
reg   [0:0] src_V_user_V_0_payload_B;
reg    src_V_user_V_0_sel_rd;
reg    src_V_user_V_0_sel_wr;
wire    src_V_user_V_0_sel;
wire    src_V_user_V_0_load_A;
wire    src_V_user_V_0_load_B;
reg   [1:0] src_V_user_V_0_state;
wire    src_V_user_V_0_state_cmp_full;
reg   [0:0] src_V_last_V_0_data_out;
wire    src_V_last_V_0_vld_in;
wire    src_V_last_V_0_vld_out;
wire    src_V_last_V_0_ack_in;
reg    src_V_last_V_0_ack_out;
reg   [0:0] src_V_last_V_0_payload_A;
reg   [0:0] src_V_last_V_0_payload_B;
reg    src_V_last_V_0_sel_rd;
reg    src_V_last_V_0_sel_wr;
wire    src_V_last_V_0_sel;
wire    src_V_last_V_0_load_A;
wire    src_V_last_V_0_load_B;
reg   [1:0] src_V_last_V_0_state;
wire    src_V_last_V_0_state_cmp_full;
reg   [0:0] src_V_id_V_0_data_out;
wire    src_V_id_V_0_vld_in;
wire    src_V_id_V_0_vld_out;
wire    src_V_id_V_0_ack_in;
reg    src_V_id_V_0_ack_out;
reg   [0:0] src_V_id_V_0_payload_A;
reg   [0:0] src_V_id_V_0_payload_B;
reg    src_V_id_V_0_sel_rd;
reg    src_V_id_V_0_sel_wr;
wire    src_V_id_V_0_sel;
wire    src_V_id_V_0_load_A;
wire    src_V_id_V_0_load_B;
reg   [1:0] src_V_id_V_0_state;
wire    src_V_id_V_0_state_cmp_full;
reg   [0:0] src_V_dest_V_0_data_out;
wire    src_V_dest_V_0_vld_in;
wire    src_V_dest_V_0_vld_out;
wire    src_V_dest_V_0_ack_in;
reg    src_V_dest_V_0_ack_out;
reg   [0:0] src_V_dest_V_0_payload_A;
reg   [0:0] src_V_dest_V_0_payload_B;
reg    src_V_dest_V_0_sel_rd;
reg    src_V_dest_V_0_sel_wr;
wire    src_V_dest_V_0_sel;
wire    src_V_dest_V_0_load_A;
wire    src_V_dest_V_0_load_B;
reg   [1:0] src_V_dest_V_0_state;
wire    src_V_dest_V_0_state_cmp_full;
reg   [31:0] dst_V_data_V_1_data_out;
reg    dst_V_data_V_1_vld_in;
wire    dst_V_data_V_1_vld_out;
wire    dst_V_data_V_1_ack_in;
wire    dst_V_data_V_1_ack_out;
reg   [31:0] dst_V_data_V_1_payload_A;
reg   [31:0] dst_V_data_V_1_payload_B;
reg    dst_V_data_V_1_sel_rd;
reg    dst_V_data_V_1_sel_wr;
wire    dst_V_data_V_1_sel;
wire    dst_V_data_V_1_load_A;
wire    dst_V_data_V_1_load_B;
reg   [1:0] dst_V_data_V_1_state;
wire    dst_V_data_V_1_state_cmp_full;
reg   [3:0] dst_V_keep_V_1_data_out;
reg    dst_V_keep_V_1_vld_in;
wire    dst_V_keep_V_1_vld_out;
wire    dst_V_keep_V_1_ack_in;
wire    dst_V_keep_V_1_ack_out;
reg   [3:0] dst_V_keep_V_1_payload_A;
reg   [3:0] dst_V_keep_V_1_payload_B;
reg    dst_V_keep_V_1_sel_rd;
reg    dst_V_keep_V_1_sel_wr;
wire    dst_V_keep_V_1_sel;
wire    dst_V_keep_V_1_load_A;
wire    dst_V_keep_V_1_load_B;
reg   [1:0] dst_V_keep_V_1_state;
wire    dst_V_keep_V_1_state_cmp_full;
reg   [3:0] dst_V_strb_V_1_data_out;
reg    dst_V_strb_V_1_vld_in;
wire    dst_V_strb_V_1_vld_out;
wire    dst_V_strb_V_1_ack_in;
wire    dst_V_strb_V_1_ack_out;
reg   [3:0] dst_V_strb_V_1_payload_A;
reg   [3:0] dst_V_strb_V_1_payload_B;
reg    dst_V_strb_V_1_sel_rd;
reg    dst_V_strb_V_1_sel_wr;
wire    dst_V_strb_V_1_sel;
wire    dst_V_strb_V_1_load_A;
wire    dst_V_strb_V_1_load_B;
reg   [1:0] dst_V_strb_V_1_state;
wire    dst_V_strb_V_1_state_cmp_full;
reg   [0:0] dst_V_user_V_1_data_out;
reg    dst_V_user_V_1_vld_in;
wire    dst_V_user_V_1_vld_out;
wire    dst_V_user_V_1_ack_in;
wire    dst_V_user_V_1_ack_out;
reg   [0:0] dst_V_user_V_1_payload_A;
reg   [0:0] dst_V_user_V_1_payload_B;
reg    dst_V_user_V_1_sel_rd;
reg    dst_V_user_V_1_sel_wr;
wire    dst_V_user_V_1_sel;
wire    dst_V_user_V_1_load_A;
wire    dst_V_user_V_1_load_B;
reg   [1:0] dst_V_user_V_1_state;
wire    dst_V_user_V_1_state_cmp_full;
reg   [0:0] dst_V_last_V_1_data_out;
reg    dst_V_last_V_1_vld_in;
wire    dst_V_last_V_1_vld_out;
wire    dst_V_last_V_1_ack_in;
wire    dst_V_last_V_1_ack_out;
reg   [0:0] dst_V_last_V_1_payload_A;
reg   [0:0] dst_V_last_V_1_payload_B;
reg    dst_V_last_V_1_sel_rd;
reg    dst_V_last_V_1_sel_wr;
wire    dst_V_last_V_1_sel;
wire    dst_V_last_V_1_load_A;
wire    dst_V_last_V_1_load_B;
reg   [1:0] dst_V_last_V_1_state;
wire    dst_V_last_V_1_state_cmp_full;
reg   [0:0] dst_V_id_V_1_data_out;
reg    dst_V_id_V_1_vld_in;
wire    dst_V_id_V_1_vld_out;
wire    dst_V_id_V_1_ack_in;
wire    dst_V_id_V_1_ack_out;
reg   [0:0] dst_V_id_V_1_payload_A;
reg   [0:0] dst_V_id_V_1_payload_B;
reg    dst_V_id_V_1_sel_rd;
reg    dst_V_id_V_1_sel_wr;
wire    dst_V_id_V_1_sel;
wire    dst_V_id_V_1_load_A;
wire    dst_V_id_V_1_load_B;
reg   [1:0] dst_V_id_V_1_state;
wire    dst_V_id_V_1_state_cmp_full;
reg   [0:0] dst_V_dest_V_1_data_out;
reg    dst_V_dest_V_1_vld_in;
wire    dst_V_dest_V_1_vld_out;
wire    dst_V_dest_V_1_ack_in;
wire    dst_V_dest_V_1_ack_out;
reg   [0:0] dst_V_dest_V_1_payload_A;
reg   [0:0] dst_V_dest_V_1_payload_B;
reg    dst_V_dest_V_1_sel_rd;
reg    dst_V_dest_V_1_sel_wr;
wire    dst_V_dest_V_1_sel;
wire    dst_V_dest_V_1_load_A;
wire    dst_V_dest_V_1_load_B;
reg   [1:0] dst_V_dest_V_1_state;
wire    dst_V_dest_V_1_state_cmp_full;
wire   [31:0] mask;
reg   [0:0] guard_variable_for_s;
reg   [31:0] pOut_data_V;
reg   [3:0] pOut_keep_V;
reg   [3:0] pOut_strb_V;
reg   [0:0] pOut_user_V;
reg   [0:0] pOut_last_V;
reg   [0:0] pOut_id_V;
reg   [0:0] pOut_dest_V;
reg   [15:0] y;
reg   [15:0] x;
reg   [1:0] buf_which;
reg   [7:0] lastx;
reg   [13:0] buf_data_address0;
reg    buf_data_ce0;
reg    buf_data_we0;
wire   [0:0] buf_data_q0;
reg    buf_data_ce1;
wire   [0:0] buf_data_q1;
reg    src_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [57:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    dst_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
reg   [31:0] tmp_data_V_1_reg_754;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_state60_pp0_stage1_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [3:0] tmp_keep_V_1_reg_762;
reg   [3:0] tmp_strb_V_1_reg_768;
wire   [0:0] tmp_user_V_1_fu_351_p1;
reg   [0:0] tmp_user_V_1_reg_774;
reg   [0:0] tmp_last_V_1_reg_781;
reg   [0:0] tmp_id_V_1_reg_790;
reg   [0:0] tmp_dest_V_1_reg_796;
wire   [1:0] tmp_4_i_fu_431_p3;
reg   [1:0] tmp_4_i_reg_850;
wire   [0:0] tmp_9_i_i_fu_490_p2;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_pp0_stage2_11001;
wire   [0:0] y_flag_1_fu_671_p2;
wire   [13:0] tmp_8_fu_706_p3;
reg   [13:0] tmp_8_reg_864;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_pp0_stage3_11001;
wire   [13:0] tmp_5_fu_745_p3;
reg   [13:0] tmp_5_reg_869;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_state58_pp0_stage57_iter0;
wire    ap_block_pp0_stage57_subdone;
wire    ap_CS_fsm_pp0_stage57;
wire    grp_correlatiebeun_fu_318_ap_start;
wire    grp_correlatiebeun_fu_318_ap_done;
wire    grp_correlatiebeun_fu_318_ap_idle;
wire    grp_correlatiebeun_fu_318_ap_ready;
reg    grp_correlatiebeun_fu_318_ap_ce;
reg   [13:0] grp_correlatiebeun_fu_318_a_offset;
reg   [13:0] grp_correlatiebeun_fu_318_b_offset;
wire    grp_correlatiebeun_fu_318_start;
wire   [13:0] grp_correlatiebeun_fu_318_buf_data_address0;
wire    grp_correlatiebeun_fu_318_buf_data_ce0;
wire   [13:0] grp_correlatiebeun_fu_318_buf_data_address1;
wire    grp_correlatiebeun_fu_318_buf_data_ce1;
wire    ap_block_state5_pp0_stage4_iter0_ignore_call12;
wire    ap_block_pp0_stage4_11001;
wire    ap_block_state6_pp0_stage5_iter0_ignore_call12;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_state7_pp0_stage6_iter0_ignore_call13;
wire    ap_block_pp0_stage6_11001;
wire    ap_block_state8_pp0_stage7_iter0_ignore_call13;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_state9_pp0_stage8_iter0_ignore_call13;
wire    ap_block_pp0_stage8_11001;
wire    ap_block_state10_pp0_stage9_iter0_ignore_call14;
wire    ap_block_pp0_stage9_11001;
wire    ap_block_state11_pp0_stage10_iter0_ignore_call14;
wire    ap_block_pp0_stage10_11001;
wire    ap_block_state12_pp0_stage11_iter0_ignore_call14;
wire    ap_block_pp0_stage11_11001;
wire    ap_block_state13_pp0_stage12_iter0_ignore_call15;
wire    ap_block_pp0_stage12_11001;
wire    ap_block_state14_pp0_stage13_iter0_ignore_call15;
wire    ap_block_pp0_stage13_11001;
wire    ap_block_state15_pp0_stage14_iter0_ignore_call15;
wire    ap_block_pp0_stage14_11001;
wire    ap_block_state16_pp0_stage15_iter0_ignore_call16;
wire    ap_block_pp0_stage15_11001;
wire    ap_block_state17_pp0_stage16_iter0_ignore_call16;
wire    ap_block_pp0_stage16_11001;
wire    ap_block_state18_pp0_stage17_iter0_ignore_call16;
wire    ap_block_pp0_stage17_11001;
wire    ap_block_state19_pp0_stage18_iter0_ignore_call17;
wire    ap_block_pp0_stage18_11001;
wire    ap_block_state20_pp0_stage19_iter0_ignore_call17;
wire    ap_block_pp0_stage19_11001;
wire    ap_block_state21_pp0_stage20_iter0_ignore_call17;
wire    ap_block_pp0_stage20_11001;
wire    ap_block_state22_pp0_stage21_iter0_ignore_call18;
wire    ap_block_pp0_stage21_11001;
wire    ap_block_state23_pp0_stage22_iter0_ignore_call18;
wire    ap_block_pp0_stage22_11001;
wire    ap_block_state24_pp0_stage23_iter0_ignore_call18;
wire    ap_block_pp0_stage23_11001;
wire    ap_block_state25_pp0_stage24_iter0_ignore_call19;
wire    ap_block_pp0_stage24_11001;
wire    ap_block_state26_pp0_stage25_iter0_ignore_call19;
wire    ap_block_pp0_stage25_11001;
wire    ap_block_state27_pp0_stage26_iter0_ignore_call19;
wire    ap_block_pp0_stage26_11001;
wire    ap_block_state28_pp0_stage27_iter0_ignore_call20;
wire    ap_block_pp0_stage27_11001;
wire    ap_block_state29_pp0_stage28_iter0_ignore_call20;
wire    ap_block_pp0_stage28_11001;
wire    ap_block_state30_pp0_stage29_iter0_ignore_call20;
wire    ap_block_pp0_stage29_11001;
wire    ap_block_state31_pp0_stage30_iter0_ignore_call21;
wire    ap_block_pp0_stage30_11001;
wire    ap_block_state32_pp0_stage31_iter0_ignore_call21;
wire    ap_block_pp0_stage31_11001;
wire    ap_block_state33_pp0_stage32_iter0_ignore_call21;
wire    ap_block_pp0_stage32_11001;
wire    ap_block_state34_pp0_stage33_iter0_ignore_call22;
wire    ap_block_pp0_stage33_11001;
wire    ap_block_state35_pp0_stage34_iter0_ignore_call22;
wire    ap_block_pp0_stage34_11001;
wire    ap_block_state36_pp0_stage35_iter0_ignore_call22;
wire    ap_block_pp0_stage35_11001;
wire    ap_block_state37_pp0_stage36_iter0_ignore_call23;
wire    ap_block_pp0_stage36_11001;
wire    ap_block_state38_pp0_stage37_iter0_ignore_call23;
wire    ap_block_pp0_stage37_11001;
wire    ap_block_state39_pp0_stage38_iter0_ignore_call23;
wire    ap_block_pp0_stage38_11001;
wire    ap_block_state40_pp0_stage39_iter0_ignore_call24;
wire    ap_block_pp0_stage39_11001;
wire    ap_block_state41_pp0_stage40_iter0_ignore_call24;
wire    ap_block_pp0_stage40_11001;
wire    ap_block_state42_pp0_stage41_iter0_ignore_call24;
wire    ap_block_pp0_stage41_11001;
wire    ap_block_state43_pp0_stage42_iter0_ignore_call25;
wire    ap_block_pp0_stage42_11001;
wire    ap_block_state44_pp0_stage43_iter0_ignore_call25;
wire    ap_block_pp0_stage43_11001;
wire    ap_block_state45_pp0_stage44_iter0_ignore_call25;
wire    ap_block_pp0_stage44_11001;
wire    ap_block_state46_pp0_stage45_iter0_ignore_call26;
wire    ap_block_pp0_stage45_11001;
wire    ap_block_state47_pp0_stage46_iter0_ignore_call26;
wire    ap_block_pp0_stage46_11001;
wire    ap_block_state48_pp0_stage47_iter0_ignore_call26;
wire    ap_block_pp0_stage47_11001;
wire    ap_block_state49_pp0_stage48_iter0_ignore_call27;
wire    ap_block_pp0_stage48_11001;
wire    ap_block_state50_pp0_stage49_iter0_ignore_call27;
wire    ap_block_pp0_stage49_11001;
wire    ap_block_state51_pp0_stage50_iter0_ignore_call27;
wire    ap_block_pp0_stage50_11001;
wire    ap_block_state52_pp0_stage51_iter0_ignore_call28;
wire    ap_block_pp0_stage51_11001;
wire    ap_block_state53_pp0_stage52_iter0_ignore_call28;
wire    ap_block_pp0_stage52_11001;
wire    ap_block_state54_pp0_stage53_iter0_ignore_call28;
wire    ap_block_pp0_stage53_11001;
wire    ap_block_state55_pp0_stage54_iter0_ignore_call29;
wire    ap_block_pp0_stage54_11001;
wire    ap_block_state56_pp0_stage55_iter0_ignore_call29;
wire    ap_block_pp0_stage55_11001;
wire    ap_block_state57_pp0_stage56_iter0_ignore_call29;
wire    ap_block_pp0_stage56_11001;
wire    ap_block_state58_pp0_stage57_iter0_ignore_call30;
wire    ap_block_pp0_stage57_11001;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call30;
wire    ap_block_state59_pp0_stage0_iter1_ignore_call30;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_CS_fsm_pp0_stage28;
wire    ap_CS_fsm_pp0_stage29;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_CS_fsm_pp0_stage32;
wire    ap_CS_fsm_pp0_stage33;
wire    ap_CS_fsm_pp0_stage34;
wire    ap_CS_fsm_pp0_stage35;
wire    ap_CS_fsm_pp0_stage36;
wire    ap_CS_fsm_pp0_stage37;
wire    ap_CS_fsm_pp0_stage38;
wire    ap_CS_fsm_pp0_stage39;
wire    ap_CS_fsm_pp0_stage40;
wire    ap_CS_fsm_pp0_stage41;
wire    ap_CS_fsm_pp0_stage42;
wire    ap_CS_fsm_pp0_stage43;
wire    ap_CS_fsm_pp0_stage44;
wire    ap_CS_fsm_pp0_stage45;
wire    ap_CS_fsm_pp0_stage46;
wire    ap_CS_fsm_pp0_stage47;
wire    ap_CS_fsm_pp0_stage48;
wire    ap_CS_fsm_pp0_stage49;
wire    ap_CS_fsm_pp0_stage50;
wire    ap_CS_fsm_pp0_stage51;
wire    ap_CS_fsm_pp0_stage52;
wire    ap_CS_fsm_pp0_stage53;
wire    ap_CS_fsm_pp0_stage54;
wire    ap_CS_fsm_pp0_stage55;
wire    ap_CS_fsm_pp0_stage56;
wire    ap_CS_fsm_pp0_stage0;
reg   [31:0] ap_phi_reg_pp0_iter0_tmp_data_V_reg_199;
wire   [0:0] guard_variable_for_s_1_load_fu_367_p1;
reg   [3:0] ap_phi_reg_pp0_iter0_tmp_keep_V_reg_211;
reg   [3:0] ap_phi_reg_pp0_iter0_tmp_strb_V_reg_223;
reg   [0:0] ap_phi_reg_pp0_iter0_tmp_user_V_reg_235;
reg   [0:0] ap_phi_reg_pp0_iter0_tmp_last_V_reg_247;
reg   [0:0] ap_phi_reg_pp0_iter0_tmp_id_V_reg_259;
reg   [0:0] ap_phi_reg_pp0_iter0_tmp_dest_V_reg_271;
reg   [0:0] ap_phi_reg_pp0_iter0_y_flag_reg_283;
reg   [15:0] ap_phi_reg_pp0_iter0_y_assign_reg_296;
reg   [15:0] ap_phi_reg_pp0_iter0_x_assign_reg_307;
reg    grp_correlatiebeun_fu_318_ap_start_reg;
wire    ap_block_pp0_stage6;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage12;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage18;
wire    ap_block_pp0_stage21;
wire    ap_block_pp0_stage24;
wire    ap_block_pp0_stage27;
wire    ap_block_pp0_stage30;
wire    ap_block_pp0_stage33;
wire    ap_block_pp0_stage36;
wire    ap_block_pp0_stage39;
wire    ap_block_pp0_stage42;
wire    ap_block_pp0_stage45;
wire    ap_block_pp0_stage48;
wire    ap_block_pp0_stage51;
wire    ap_block_pp0_stage54;
wire    ap_block_pp0_stage57;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage10;
wire    ap_block_pp0_stage13;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage19;
wire    ap_block_pp0_stage22;
wire    ap_block_pp0_stage25;
wire    ap_block_pp0_stage28;
wire    ap_block_pp0_stage31;
wire    ap_block_pp0_stage34;
wire    ap_block_pp0_stage37;
wire    ap_block_pp0_stage40;
wire    ap_block_pp0_stage43;
wire    ap_block_pp0_stage46;
wire    ap_block_pp0_stage49;
wire    ap_block_pp0_stage52;
wire    ap_block_pp0_stage55;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage17;
wire    ap_block_pp0_stage20;
wire    ap_block_pp0_stage23;
wire    ap_block_pp0_stage26;
wire    ap_block_pp0_stage29;
wire    ap_block_pp0_stage32;
wire    ap_block_pp0_stage35;
wire    ap_block_pp0_stage38;
wire    ap_block_pp0_stage41;
wire    ap_block_pp0_stage44;
wire    ap_block_pp0_stage47;
wire    ap_block_pp0_stage50;
wire    ap_block_pp0_stage53;
wire    ap_block_pp0_stage56;
wire   [63:0] tmp_21_i_fu_477_p1;
wire   [31:0] pIn_data_V_1_fu_616_p3;
wire   [15:0] y_new_1_fu_676_p3;
wire   [15:0] x_new_fu_683_p3;
wire    ap_block_pp0_stage2_01001;
wire    ap_block_pp0_stage3_01001;
wire   [1:0] tmp_i_fu_413_p2;
wire   [0:0] tmp_1_fu_419_p2;
wire   [1:0] tmp_4_fu_425_p2;
wire   [1:0] tmp_i1_fu_445_p2;
wire   [0:0] tmp_6_fu_450_p2;
wire   [1:0] tmp_7_fu_456_p2;
wire   [1:0] tmp_9_fu_461_p3;
wire   [13:0] tmp_20_i_fu_469_p3;
wire   [1:0] tmp_10_fu_486_p1;
wire   [7:0] tmp_15_fu_543_p4;
wire   [0:0] tmp_14_i_fu_502_p2;
wire   [0:0] tmp_23_i_fu_520_p2;
wire   [0:0] sel_tmp2_i_fu_560_p2;
wire   [0:0] tmp8_fu_566_p2;
wire   [0:0] tmp_19_i4_fu_508_p2;
wire   [0:0] tmp_27_i_fu_532_p2;
wire   [0:0] tmp_25_i_fu_526_p2;
wire   [0:0] tmp_fu_578_p2;
wire   [0:0] tmp_21_i6_fu_514_p2;
wire   [0:0] tmp9_fu_584_p2;
wire   [0:0] tmp7_fu_572_p2;
wire   [0:0] sel_tmp5_i_fu_590_p2;
wire   [31:0] tmp_29_i_fu_552_p3;
wire   [31:0] tmp_28_i_fu_538_p2;
wire   [0:0] sel_tmp8_i_fu_604_p2;
wire   [0:0] sel_tmp9_i_fu_610_p2;
wire   [31:0] sel_tmp6_i_fu_596_p3;
wire   [15:0] tmp_2_fu_659_p2;
wire   [15:0] tmp_3_fu_665_p2;
wire   [2:0] tmp_7_cast_fu_702_p1;
wire   [2:0] tmp_s_fu_715_p2;
wire   [0:0] tmp_11_fu_721_p2;
wire   [1:0] tmp_13_fu_733_p1;
wire   [1:0] tmp_12_fu_727_p2;
wire   [1:0] tmp_14_fu_737_p3;
reg   [57:0] ap_NS_fsm;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state59_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire    ap_reset_idle_pp0;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_state29_pp0_stage28_iter0;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_state30_pp0_stage29_iter0;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_state31_pp0_stage30_iter0;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_state32_pp0_stage31_iter0;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_state33_pp0_stage32_iter0;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_state34_pp0_stage33_iter0;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_state35_pp0_stage34_iter0;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_state36_pp0_stage35_iter0;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_state37_pp0_stage36_iter0;
wire    ap_block_pp0_stage36_subdone;
wire    ap_block_state38_pp0_stage37_iter0;
wire    ap_block_pp0_stage37_subdone;
wire    ap_block_state39_pp0_stage38_iter0;
wire    ap_block_pp0_stage38_subdone;
wire    ap_block_state40_pp0_stage39_iter0;
wire    ap_block_pp0_stage39_subdone;
wire    ap_block_state41_pp0_stage40_iter0;
wire    ap_block_pp0_stage40_subdone;
wire    ap_block_state42_pp0_stage41_iter0;
wire    ap_block_pp0_stage41_subdone;
wire    ap_block_state43_pp0_stage42_iter0;
wire    ap_block_pp0_stage42_subdone;
wire    ap_block_state44_pp0_stage43_iter0;
wire    ap_block_pp0_stage43_subdone;
wire    ap_block_state45_pp0_stage44_iter0;
wire    ap_block_pp0_stage44_subdone;
wire    ap_block_state46_pp0_stage45_iter0;
wire    ap_block_pp0_stage45_subdone;
wire    ap_block_state47_pp0_stage46_iter0;
wire    ap_block_pp0_stage46_subdone;
wire    ap_block_state48_pp0_stage47_iter0;
wire    ap_block_pp0_stage47_subdone;
wire    ap_block_state49_pp0_stage48_iter0;
wire    ap_block_pp0_stage48_subdone;
wire    ap_block_state50_pp0_stage49_iter0;
wire    ap_block_pp0_stage49_subdone;
wire    ap_block_state51_pp0_stage50_iter0;
wire    ap_block_pp0_stage50_subdone;
wire    ap_block_state52_pp0_stage51_iter0;
wire    ap_block_pp0_stage51_subdone;
wire    ap_block_state53_pp0_stage52_iter0;
wire    ap_block_pp0_stage52_subdone;
wire    ap_block_state54_pp0_stage53_iter0;
wire    ap_block_pp0_stage53_subdone;
wire    ap_block_state55_pp0_stage54_iter0;
wire    ap_block_pp0_stage54_subdone;
wire    ap_block_state56_pp0_stage55_iter0;
wire    ap_block_pp0_stage55_subdone;
wire    ap_block_state57_pp0_stage56_iter0;
wire    ap_block_pp0_stage56_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_1715;

// power-on initialization
initial begin
#0 src_V_data_V_0_sel_rd = 1'b0;
#0 src_V_data_V_0_sel_wr = 1'b0;
#0 src_V_data_V_0_state = 2'd0;
#0 src_V_keep_V_0_sel_rd = 1'b0;
#0 src_V_keep_V_0_sel_wr = 1'b0;
#0 src_V_keep_V_0_state = 2'd0;
#0 src_V_strb_V_0_sel_rd = 1'b0;
#0 src_V_strb_V_0_sel_wr = 1'b0;
#0 src_V_strb_V_0_state = 2'd0;
#0 src_V_user_V_0_sel_rd = 1'b0;
#0 src_V_user_V_0_sel_wr = 1'b0;
#0 src_V_user_V_0_state = 2'd0;
#0 src_V_last_V_0_sel_rd = 1'b0;
#0 src_V_last_V_0_sel_wr = 1'b0;
#0 src_V_last_V_0_state = 2'd0;
#0 src_V_id_V_0_sel_rd = 1'b0;
#0 src_V_id_V_0_sel_wr = 1'b0;
#0 src_V_id_V_0_state = 2'd0;
#0 src_V_dest_V_0_sel_rd = 1'b0;
#0 src_V_dest_V_0_sel_wr = 1'b0;
#0 src_V_dest_V_0_state = 2'd0;
#0 dst_V_data_V_1_sel_rd = 1'b0;
#0 dst_V_data_V_1_sel_wr = 1'b0;
#0 dst_V_data_V_1_state = 2'd0;
#0 dst_V_keep_V_1_sel_rd = 1'b0;
#0 dst_V_keep_V_1_sel_wr = 1'b0;
#0 dst_V_keep_V_1_state = 2'd0;
#0 dst_V_strb_V_1_sel_rd = 1'b0;
#0 dst_V_strb_V_1_sel_wr = 1'b0;
#0 dst_V_strb_V_1_state = 2'd0;
#0 dst_V_user_V_1_sel_rd = 1'b0;
#0 dst_V_user_V_1_sel_wr = 1'b0;
#0 dst_V_user_V_1_state = 2'd0;
#0 dst_V_last_V_1_sel_rd = 1'b0;
#0 dst_V_last_V_1_sel_wr = 1'b0;
#0 dst_V_last_V_1_state = 2'd0;
#0 dst_V_id_V_1_sel_rd = 1'b0;
#0 dst_V_id_V_1_sel_wr = 1'b0;
#0 dst_V_id_V_1_state = 2'd0;
#0 dst_V_dest_V_1_sel_rd = 1'b0;
#0 dst_V_dest_V_1_sel_wr = 1'b0;
#0 dst_V_dest_V_1_state = 2'd0;
#0 guard_variable_for_s = 1'd0;
#0 pOut_data_V = 32'd0;
#0 pOut_keep_V = 4'd0;
#0 pOut_strb_V = 4'd0;
#0 pOut_user_V = 1'd0;
#0 pOut_last_V = 1'd0;
#0 pOut_id_V = 1'd0;
#0 pOut_dest_V = 1'd0;
#0 y = 16'd0;
#0 x = 16'd0;
#0 buf_which = 2'd0;
#0 lastx = 8'd1;
#0 ap_CS_fsm = 58'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_correlatiebeun_fu_318_ap_start_reg = 1'b0;
end

stream_buf_data #(
    .DataWidth( 1 ),
    .AddressRange( 12288 ),
    .AddressWidth( 14 ))
buf_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_data_address0),
    .ce0(buf_data_ce0),
    .we0(buf_data_we0),
    .d0(1'd0),
    .q0(buf_data_q0),
    .address1(grp_correlatiebeun_fu_318_buf_data_address1),
    .ce1(buf_data_ce1),
    .q1(buf_data_q1)
);

stream_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
stream_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mask(mask)
);

correlatiebeun grp_correlatiebeun_fu_318(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_correlatiebeun_fu_318_ap_start),
    .ap_done(grp_correlatiebeun_fu_318_ap_done),
    .ap_idle(grp_correlatiebeun_fu_318_ap_idle),
    .ap_ready(grp_correlatiebeun_fu_318_ap_ready),
    .ap_ce(grp_correlatiebeun_fu_318_ap_ce),
    .a_offset(grp_correlatiebeun_fu_318_a_offset),
    .b_offset(grp_correlatiebeun_fu_318_b_offset),
    .start(grp_correlatiebeun_fu_318_start),
    .buf_data_address0(grp_correlatiebeun_fu_318_buf_data_address0),
    .buf_data_ce0(grp_correlatiebeun_fu_318_buf_data_ce0),
    .buf_data_q0(buf_data_q0),
    .buf_data_address1(grp_correlatiebeun_fu_318_buf_data_address1),
    .buf_data_ce1(grp_correlatiebeun_fu_318_buf_data_ce1),
    .buf_data_q1(buf_data_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage57) & (1'b0 == ap_block_pp0_stage57_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_data_V_1_ack_out == 1'b1) & (dst_V_data_V_1_vld_out == 1'b1))) begin
            dst_V_data_V_1_sel_rd <= ~dst_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_data_V_1_ack_in == 1'b1) & (dst_V_data_V_1_vld_in == 1'b1))) begin
            dst_V_data_V_1_sel_wr <= ~dst_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_data_V_1_state == 2'd2) & (dst_V_data_V_1_vld_in == 1'b0)) | ((dst_V_data_V_1_state == 2'd3) & (dst_V_data_V_1_vld_in == 1'b0) & (dst_V_data_V_1_ack_out == 1'b1)))) begin
            dst_V_data_V_1_state <= 2'd2;
        end else if ((((dst_V_data_V_1_state == 2'd1) & (dst_V_data_V_1_ack_out == 1'b0)) | ((dst_V_data_V_1_state == 2'd3) & (dst_V_data_V_1_ack_out == 1'b0) & (dst_V_data_V_1_vld_in == 1'b1)))) begin
            dst_V_data_V_1_state <= 2'd1;
        end else if (((~((dst_V_data_V_1_vld_in == 1'b0) & (dst_V_data_V_1_ack_out == 1'b1)) & ~((dst_V_data_V_1_ack_out == 1'b0) & (dst_V_data_V_1_vld_in == 1'b1)) & (dst_V_data_V_1_state == 2'd3)) | ((dst_V_data_V_1_state == 2'd1) & (dst_V_data_V_1_ack_out == 1'b1)) | ((dst_V_data_V_1_state == 2'd2) & (dst_V_data_V_1_vld_in == 1'b1)))) begin
            dst_V_data_V_1_state <= 2'd3;
        end else begin
            dst_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_dest_V_1_ack_out == 1'b1) & (dst_V_dest_V_1_vld_out == 1'b1))) begin
            dst_V_dest_V_1_sel_rd <= ~dst_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_dest_V_1_ack_in == 1'b1) & (dst_V_dest_V_1_vld_in == 1'b1))) begin
            dst_V_dest_V_1_sel_wr <= ~dst_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_dest_V_1_state == 2'd2) & (dst_V_dest_V_1_vld_in == 1'b0)) | ((dst_V_dest_V_1_state == 2'd3) & (dst_V_dest_V_1_vld_in == 1'b0) & (dst_V_dest_V_1_ack_out == 1'b1)))) begin
            dst_V_dest_V_1_state <= 2'd2;
        end else if ((((dst_V_dest_V_1_state == 2'd1) & (dst_V_dest_V_1_ack_out == 1'b0)) | ((dst_V_dest_V_1_state == 2'd3) & (dst_V_dest_V_1_ack_out == 1'b0) & (dst_V_dest_V_1_vld_in == 1'b1)))) begin
            dst_V_dest_V_1_state <= 2'd1;
        end else if (((~((dst_V_dest_V_1_vld_in == 1'b0) & (dst_V_dest_V_1_ack_out == 1'b1)) & ~((dst_V_dest_V_1_ack_out == 1'b0) & (dst_V_dest_V_1_vld_in == 1'b1)) & (dst_V_dest_V_1_state == 2'd3)) | ((dst_V_dest_V_1_state == 2'd1) & (dst_V_dest_V_1_ack_out == 1'b1)) | ((dst_V_dest_V_1_state == 2'd2) & (dst_V_dest_V_1_vld_in == 1'b1)))) begin
            dst_V_dest_V_1_state <= 2'd3;
        end else begin
            dst_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_id_V_1_ack_out == 1'b1) & (dst_V_id_V_1_vld_out == 1'b1))) begin
            dst_V_id_V_1_sel_rd <= ~dst_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_id_V_1_ack_in == 1'b1) & (dst_V_id_V_1_vld_in == 1'b1))) begin
            dst_V_id_V_1_sel_wr <= ~dst_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_id_V_1_state == 2'd2) & (dst_V_id_V_1_vld_in == 1'b0)) | ((dst_V_id_V_1_state == 2'd3) & (dst_V_id_V_1_vld_in == 1'b0) & (dst_V_id_V_1_ack_out == 1'b1)))) begin
            dst_V_id_V_1_state <= 2'd2;
        end else if ((((dst_V_id_V_1_state == 2'd1) & (dst_V_id_V_1_ack_out == 1'b0)) | ((dst_V_id_V_1_state == 2'd3) & (dst_V_id_V_1_ack_out == 1'b0) & (dst_V_id_V_1_vld_in == 1'b1)))) begin
            dst_V_id_V_1_state <= 2'd1;
        end else if (((~((dst_V_id_V_1_vld_in == 1'b0) & (dst_V_id_V_1_ack_out == 1'b1)) & ~((dst_V_id_V_1_ack_out == 1'b0) & (dst_V_id_V_1_vld_in == 1'b1)) & (dst_V_id_V_1_state == 2'd3)) | ((dst_V_id_V_1_state == 2'd1) & (dst_V_id_V_1_ack_out == 1'b1)) | ((dst_V_id_V_1_state == 2'd2) & (dst_V_id_V_1_vld_in == 1'b1)))) begin
            dst_V_id_V_1_state <= 2'd3;
        end else begin
            dst_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_keep_V_1_ack_out == 1'b1) & (dst_V_keep_V_1_vld_out == 1'b1))) begin
            dst_V_keep_V_1_sel_rd <= ~dst_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_keep_V_1_ack_in == 1'b1) & (dst_V_keep_V_1_vld_in == 1'b1))) begin
            dst_V_keep_V_1_sel_wr <= ~dst_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_keep_V_1_state == 2'd2) & (dst_V_keep_V_1_vld_in == 1'b0)) | ((dst_V_keep_V_1_state == 2'd3) & (dst_V_keep_V_1_vld_in == 1'b0) & (dst_V_keep_V_1_ack_out == 1'b1)))) begin
            dst_V_keep_V_1_state <= 2'd2;
        end else if ((((dst_V_keep_V_1_state == 2'd1) & (dst_V_keep_V_1_ack_out == 1'b0)) | ((dst_V_keep_V_1_state == 2'd3) & (dst_V_keep_V_1_ack_out == 1'b0) & (dst_V_keep_V_1_vld_in == 1'b1)))) begin
            dst_V_keep_V_1_state <= 2'd1;
        end else if (((~((dst_V_keep_V_1_vld_in == 1'b0) & (dst_V_keep_V_1_ack_out == 1'b1)) & ~((dst_V_keep_V_1_ack_out == 1'b0) & (dst_V_keep_V_1_vld_in == 1'b1)) & (dst_V_keep_V_1_state == 2'd3)) | ((dst_V_keep_V_1_state == 2'd1) & (dst_V_keep_V_1_ack_out == 1'b1)) | ((dst_V_keep_V_1_state == 2'd2) & (dst_V_keep_V_1_vld_in == 1'b1)))) begin
            dst_V_keep_V_1_state <= 2'd3;
        end else begin
            dst_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_last_V_1_ack_out == 1'b1) & (dst_V_last_V_1_vld_out == 1'b1))) begin
            dst_V_last_V_1_sel_rd <= ~dst_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_last_V_1_ack_in == 1'b1) & (dst_V_last_V_1_vld_in == 1'b1))) begin
            dst_V_last_V_1_sel_wr <= ~dst_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_last_V_1_state == 2'd2) & (dst_V_last_V_1_vld_in == 1'b0)) | ((dst_V_last_V_1_state == 2'd3) & (dst_V_last_V_1_vld_in == 1'b0) & (dst_V_last_V_1_ack_out == 1'b1)))) begin
            dst_V_last_V_1_state <= 2'd2;
        end else if ((((dst_V_last_V_1_state == 2'd1) & (dst_V_last_V_1_ack_out == 1'b0)) | ((dst_V_last_V_1_state == 2'd3) & (dst_V_last_V_1_ack_out == 1'b0) & (dst_V_last_V_1_vld_in == 1'b1)))) begin
            dst_V_last_V_1_state <= 2'd1;
        end else if (((~((dst_V_last_V_1_vld_in == 1'b0) & (dst_V_last_V_1_ack_out == 1'b1)) & ~((dst_V_last_V_1_ack_out == 1'b0) & (dst_V_last_V_1_vld_in == 1'b1)) & (dst_V_last_V_1_state == 2'd3)) | ((dst_V_last_V_1_state == 2'd1) & (dst_V_last_V_1_ack_out == 1'b1)) | ((dst_V_last_V_1_state == 2'd2) & (dst_V_last_V_1_vld_in == 1'b1)))) begin
            dst_V_last_V_1_state <= 2'd3;
        end else begin
            dst_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_strb_V_1_ack_out == 1'b1) & (dst_V_strb_V_1_vld_out == 1'b1))) begin
            dst_V_strb_V_1_sel_rd <= ~dst_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_strb_V_1_ack_in == 1'b1) & (dst_V_strb_V_1_vld_in == 1'b1))) begin
            dst_V_strb_V_1_sel_wr <= ~dst_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_strb_V_1_state == 2'd2) & (dst_V_strb_V_1_vld_in == 1'b0)) | ((dst_V_strb_V_1_state == 2'd3) & (dst_V_strb_V_1_vld_in == 1'b0) & (dst_V_strb_V_1_ack_out == 1'b1)))) begin
            dst_V_strb_V_1_state <= 2'd2;
        end else if ((((dst_V_strb_V_1_state == 2'd1) & (dst_V_strb_V_1_ack_out == 1'b0)) | ((dst_V_strb_V_1_state == 2'd3) & (dst_V_strb_V_1_ack_out == 1'b0) & (dst_V_strb_V_1_vld_in == 1'b1)))) begin
            dst_V_strb_V_1_state <= 2'd1;
        end else if (((~((dst_V_strb_V_1_vld_in == 1'b0) & (dst_V_strb_V_1_ack_out == 1'b1)) & ~((dst_V_strb_V_1_ack_out == 1'b0) & (dst_V_strb_V_1_vld_in == 1'b1)) & (dst_V_strb_V_1_state == 2'd3)) | ((dst_V_strb_V_1_state == 2'd1) & (dst_V_strb_V_1_ack_out == 1'b1)) | ((dst_V_strb_V_1_state == 2'd2) & (dst_V_strb_V_1_vld_in == 1'b1)))) begin
            dst_V_strb_V_1_state <= 2'd3;
        end else begin
            dst_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_user_V_1_ack_out == 1'b1) & (dst_V_user_V_1_vld_out == 1'b1))) begin
            dst_V_user_V_1_sel_rd <= ~dst_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_user_V_1_ack_in == 1'b1) & (dst_V_user_V_1_vld_in == 1'b1))) begin
            dst_V_user_V_1_sel_wr <= ~dst_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_user_V_1_state == 2'd2) & (dst_V_user_V_1_vld_in == 1'b0)) | ((dst_V_user_V_1_state == 2'd3) & (dst_V_user_V_1_vld_in == 1'b0) & (dst_V_user_V_1_ack_out == 1'b1)))) begin
            dst_V_user_V_1_state <= 2'd2;
        end else if ((((dst_V_user_V_1_state == 2'd1) & (dst_V_user_V_1_ack_out == 1'b0)) | ((dst_V_user_V_1_state == 2'd3) & (dst_V_user_V_1_ack_out == 1'b0) & (dst_V_user_V_1_vld_in == 1'b1)))) begin
            dst_V_user_V_1_state <= 2'd1;
        end else if (((~((dst_V_user_V_1_vld_in == 1'b0) & (dst_V_user_V_1_ack_out == 1'b1)) & ~((dst_V_user_V_1_ack_out == 1'b0) & (dst_V_user_V_1_vld_in == 1'b1)) & (dst_V_user_V_1_state == 2'd3)) | ((dst_V_user_V_1_state == 2'd1) & (dst_V_user_V_1_ack_out == 1'b1)) | ((dst_V_user_V_1_state == 2'd2) & (dst_V_user_V_1_vld_in == 1'b1)))) begin
            dst_V_user_V_1_state <= 2'd3;
        end else begin
            dst_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_correlatiebeun_fu_318_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage56) & (1'b0 == ap_block_pp0_stage56_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage53) & (1'b0 == ap_block_pp0_stage53_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage50) & (1'b0 == ap_block_pp0_stage50_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage47) & (1'b0 == ap_block_pp0_stage47_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage44) & (1'b0 == ap_block_pp0_stage44_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage41) & (1'b0 == ap_block_pp0_stage41_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage38) & (1'b0 == ap_block_pp0_stage38_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32) & (1'b0 == ap_block_pp0_stage32_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage29) & (1'b0 == ap_block_pp0_stage29_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)))) begin
            grp_correlatiebeun_fu_318_ap_start_reg <= 1'b1;
        end else if ((grp_correlatiebeun_fu_318_ap_ready == 1'b1)) begin
            grp_correlatiebeun_fu_318_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_data_V_0_ack_out == 1'b1) & (src_V_data_V_0_vld_out == 1'b1))) begin
            src_V_data_V_0_sel_rd <= ~src_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_data_V_0_ack_in == 1'b1) & (src_V_data_V_0_vld_in == 1'b1))) begin
            src_V_data_V_0_sel_wr <= ~src_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_data_V_0_state == 2'd3) & (src_V_data_V_0_vld_in == 1'b0) & (src_V_data_V_0_ack_out == 1'b1)) | ((src_V_data_V_0_state == 2'd2) & (src_V_data_V_0_vld_in == 1'b0)))) begin
            src_V_data_V_0_state <= 2'd2;
        end else if ((((src_V_data_V_0_state == 2'd1) & (src_V_data_V_0_ack_out == 1'b0)) | ((src_V_data_V_0_state == 2'd3) & (src_V_data_V_0_ack_out == 1'b0) & (src_V_data_V_0_vld_in == 1'b1)))) begin
            src_V_data_V_0_state <= 2'd1;
        end else if ((((src_V_data_V_0_state == 2'd1) & (src_V_data_V_0_ack_out == 1'b1)) | ((src_V_data_V_0_state == 2'd2) & (src_V_data_V_0_vld_in == 1'b1)) | (~((src_V_data_V_0_vld_in == 1'b0) & (src_V_data_V_0_ack_out == 1'b1)) & ~((src_V_data_V_0_ack_out == 1'b0) & (src_V_data_V_0_vld_in == 1'b1)) & (src_V_data_V_0_state == 2'd3)))) begin
            src_V_data_V_0_state <= 2'd3;
        end else begin
            src_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_dest_V_0_ack_out == 1'b1) & (src_V_dest_V_0_vld_out == 1'b1))) begin
            src_V_dest_V_0_sel_rd <= ~src_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_dest_V_0_ack_in == 1'b1) & (src_V_dest_V_0_vld_in == 1'b1))) begin
            src_V_dest_V_0_sel_wr <= ~src_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_dest_V_0_state == 2'd2) & (src_V_dest_V_0_vld_in == 1'b0)) | ((src_V_dest_V_0_state == 2'd3) & (src_V_dest_V_0_vld_in == 1'b0) & (src_V_dest_V_0_ack_out == 1'b1)))) begin
            src_V_dest_V_0_state <= 2'd2;
        end else if ((((src_V_dest_V_0_state == 2'd1) & (src_V_dest_V_0_ack_out == 1'b0)) | ((src_V_dest_V_0_state == 2'd3) & (src_V_dest_V_0_ack_out == 1'b0) & (src_V_dest_V_0_vld_in == 1'b1)))) begin
            src_V_dest_V_0_state <= 2'd1;
        end else if (((~((src_V_dest_V_0_vld_in == 1'b0) & (src_V_dest_V_0_ack_out == 1'b1)) & ~((src_V_dest_V_0_ack_out == 1'b0) & (src_V_dest_V_0_vld_in == 1'b1)) & (src_V_dest_V_0_state == 2'd3)) | ((src_V_dest_V_0_state == 2'd1) & (src_V_dest_V_0_ack_out == 1'b1)) | ((src_V_dest_V_0_state == 2'd2) & (src_V_dest_V_0_vld_in == 1'b1)))) begin
            src_V_dest_V_0_state <= 2'd3;
        end else begin
            src_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_id_V_0_ack_out == 1'b1) & (src_V_id_V_0_vld_out == 1'b1))) begin
            src_V_id_V_0_sel_rd <= ~src_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_id_V_0_ack_in == 1'b1) & (src_V_id_V_0_vld_in == 1'b1))) begin
            src_V_id_V_0_sel_wr <= ~src_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_id_V_0_state == 2'd2) & (src_V_id_V_0_vld_in == 1'b0)) | ((src_V_id_V_0_state == 2'd3) & (src_V_id_V_0_vld_in == 1'b0) & (src_V_id_V_0_ack_out == 1'b1)))) begin
            src_V_id_V_0_state <= 2'd2;
        end else if ((((src_V_id_V_0_state == 2'd1) & (src_V_id_V_0_ack_out == 1'b0)) | ((src_V_id_V_0_state == 2'd3) & (src_V_id_V_0_ack_out == 1'b0) & (src_V_id_V_0_vld_in == 1'b1)))) begin
            src_V_id_V_0_state <= 2'd1;
        end else if (((~((src_V_id_V_0_vld_in == 1'b0) & (src_V_id_V_0_ack_out == 1'b1)) & ~((src_V_id_V_0_ack_out == 1'b0) & (src_V_id_V_0_vld_in == 1'b1)) & (src_V_id_V_0_state == 2'd3)) | ((src_V_id_V_0_state == 2'd1) & (src_V_id_V_0_ack_out == 1'b1)) | ((src_V_id_V_0_state == 2'd2) & (src_V_id_V_0_vld_in == 1'b1)))) begin
            src_V_id_V_0_state <= 2'd3;
        end else begin
            src_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_keep_V_0_ack_out == 1'b1) & (src_V_keep_V_0_vld_out == 1'b1))) begin
            src_V_keep_V_0_sel_rd <= ~src_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_keep_V_0_ack_in == 1'b1) & (src_V_keep_V_0_vld_in == 1'b1))) begin
            src_V_keep_V_0_sel_wr <= ~src_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_keep_V_0_state == 2'd2) & (src_V_keep_V_0_vld_in == 1'b0)) | ((src_V_keep_V_0_state == 2'd3) & (src_V_keep_V_0_vld_in == 1'b0) & (src_V_keep_V_0_ack_out == 1'b1)))) begin
            src_V_keep_V_0_state <= 2'd2;
        end else if ((((src_V_keep_V_0_state == 2'd1) & (src_V_keep_V_0_ack_out == 1'b0)) | ((src_V_keep_V_0_state == 2'd3) & (src_V_keep_V_0_ack_out == 1'b0) & (src_V_keep_V_0_vld_in == 1'b1)))) begin
            src_V_keep_V_0_state <= 2'd1;
        end else if (((~((src_V_keep_V_0_vld_in == 1'b0) & (src_V_keep_V_0_ack_out == 1'b1)) & ~((src_V_keep_V_0_ack_out == 1'b0) & (src_V_keep_V_0_vld_in == 1'b1)) & (src_V_keep_V_0_state == 2'd3)) | ((src_V_keep_V_0_state == 2'd1) & (src_V_keep_V_0_ack_out == 1'b1)) | ((src_V_keep_V_0_state == 2'd2) & (src_V_keep_V_0_vld_in == 1'b1)))) begin
            src_V_keep_V_0_state <= 2'd3;
        end else begin
            src_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_last_V_0_ack_out == 1'b1) & (src_V_last_V_0_vld_out == 1'b1))) begin
            src_V_last_V_0_sel_rd <= ~src_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_last_V_0_ack_in == 1'b1) & (src_V_last_V_0_vld_in == 1'b1))) begin
            src_V_last_V_0_sel_wr <= ~src_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_last_V_0_state == 2'd2) & (src_V_last_V_0_vld_in == 1'b0)) | ((src_V_last_V_0_state == 2'd3) & (src_V_last_V_0_vld_in == 1'b0) & (src_V_last_V_0_ack_out == 1'b1)))) begin
            src_V_last_V_0_state <= 2'd2;
        end else if ((((src_V_last_V_0_state == 2'd1) & (src_V_last_V_0_ack_out == 1'b0)) | ((src_V_last_V_0_state == 2'd3) & (src_V_last_V_0_ack_out == 1'b0) & (src_V_last_V_0_vld_in == 1'b1)))) begin
            src_V_last_V_0_state <= 2'd1;
        end else if (((~((src_V_last_V_0_vld_in == 1'b0) & (src_V_last_V_0_ack_out == 1'b1)) & ~((src_V_last_V_0_ack_out == 1'b0) & (src_V_last_V_0_vld_in == 1'b1)) & (src_V_last_V_0_state == 2'd3)) | ((src_V_last_V_0_state == 2'd1) & (src_V_last_V_0_ack_out == 1'b1)) | ((src_V_last_V_0_state == 2'd2) & (src_V_last_V_0_vld_in == 1'b1)))) begin
            src_V_last_V_0_state <= 2'd3;
        end else begin
            src_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_strb_V_0_ack_out == 1'b1) & (src_V_strb_V_0_vld_out == 1'b1))) begin
            src_V_strb_V_0_sel_rd <= ~src_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_strb_V_0_ack_in == 1'b1) & (src_V_strb_V_0_vld_in == 1'b1))) begin
            src_V_strb_V_0_sel_wr <= ~src_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_strb_V_0_state == 2'd2) & (src_V_strb_V_0_vld_in == 1'b0)) | ((src_V_strb_V_0_state == 2'd3) & (src_V_strb_V_0_vld_in == 1'b0) & (src_V_strb_V_0_ack_out == 1'b1)))) begin
            src_V_strb_V_0_state <= 2'd2;
        end else if ((((src_V_strb_V_0_state == 2'd1) & (src_V_strb_V_0_ack_out == 1'b0)) | ((src_V_strb_V_0_state == 2'd3) & (src_V_strb_V_0_ack_out == 1'b0) & (src_V_strb_V_0_vld_in == 1'b1)))) begin
            src_V_strb_V_0_state <= 2'd1;
        end else if (((~((src_V_strb_V_0_vld_in == 1'b0) & (src_V_strb_V_0_ack_out == 1'b1)) & ~((src_V_strb_V_0_ack_out == 1'b0) & (src_V_strb_V_0_vld_in == 1'b1)) & (src_V_strb_V_0_state == 2'd3)) | ((src_V_strb_V_0_state == 2'd1) & (src_V_strb_V_0_ack_out == 1'b1)) | ((src_V_strb_V_0_state == 2'd2) & (src_V_strb_V_0_vld_in == 1'b1)))) begin
            src_V_strb_V_0_state <= 2'd3;
        end else begin
            src_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_user_V_0_ack_out == 1'b1) & (src_V_user_V_0_vld_out == 1'b1))) begin
            src_V_user_V_0_sel_rd <= ~src_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_user_V_0_ack_in == 1'b1) & (src_V_user_V_0_vld_in == 1'b1))) begin
            src_V_user_V_0_sel_wr <= ~src_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_user_V_0_state == 2'd2) & (src_V_user_V_0_vld_in == 1'b0)) | ((src_V_user_V_0_state == 2'd3) & (src_V_user_V_0_vld_in == 1'b0) & (src_V_user_V_0_ack_out == 1'b1)))) begin
            src_V_user_V_0_state <= 2'd2;
        end else if ((((src_V_user_V_0_state == 2'd1) & (src_V_user_V_0_ack_out == 1'b0)) | ((src_V_user_V_0_state == 2'd3) & (src_V_user_V_0_ack_out == 1'b0) & (src_V_user_V_0_vld_in == 1'b1)))) begin
            src_V_user_V_0_state <= 2'd1;
        end else if (((~((src_V_user_V_0_vld_in == 1'b0) & (src_V_user_V_0_ack_out == 1'b1)) & ~((src_V_user_V_0_ack_out == 1'b0) & (src_V_user_V_0_vld_in == 1'b1)) & (src_V_user_V_0_state == 2'd3)) | ((src_V_user_V_0_state == 2'd1) & (src_V_user_V_0_ack_out == 1'b1)) | ((src_V_user_V_0_state == 2'd2) & (src_V_user_V_0_vld_in == 1'b1)))) begin
            src_V_user_V_0_state <= 2'd3;
        end else begin
            src_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_data_V_reg_199 <= pOut_data_V;
        end else if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_data_V_reg_199 <= src_V_data_V_0_data_out;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_dest_V_reg_271 <= pOut_dest_V;
        end else if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_dest_V_reg_271 <= src_V_dest_V_0_data_out;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_id_V_reg_259 <= pOut_id_V;
        end else if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_id_V_reg_259 <= src_V_id_V_0_data_out;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_keep_V_reg_211 <= pOut_keep_V;
        end else if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_keep_V_reg_211 <= src_V_keep_V_0_data_out;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_last_V_reg_247 <= pOut_last_V;
        end else if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_last_V_reg_247 <= src_V_last_V_0_data_out;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_strb_V_reg_223 <= pOut_strb_V;
        end else if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_strb_V_reg_223 <= src_V_strb_V_0_data_out;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_user_V_reg_235 <= pOut_user_V;
        end else if ((guard_variable_for_s_1_load_fu_367_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_user_V_reg_235 <= src_V_user_V_0_data_out;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((tmp_user_V_1_fu_351_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_x_assign_reg_307 <= x;
        end else if ((tmp_user_V_1_fu_351_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_x_assign_reg_307 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((tmp_user_V_1_fu_351_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_y_assign_reg_296 <= y;
        end else if ((tmp_user_V_1_fu_351_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_y_assign_reg_296 <= 16'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1715)) begin
        if ((tmp_user_V_1_fu_351_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_y_flag_reg_283 <= 1'd0;
        end else if ((tmp_user_V_1_fu_351_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_y_flag_reg_283 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_user_V_1_fu_351_p1 == 1'd1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        buf_which <= tmp_4_i_fu_431_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_data_V_1_load_A == 1'b1)) begin
        dst_V_data_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_data_V_1_load_B == 1'b1)) begin
        dst_V_data_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_199;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_dest_V_1_load_A == 1'b1)) begin
        dst_V_dest_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_dest_V_reg_271;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_dest_V_1_load_B == 1'b1)) begin
        dst_V_dest_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_dest_V_reg_271;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_id_V_1_load_A == 1'b1)) begin
        dst_V_id_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_id_V_reg_259;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_id_V_1_load_B == 1'b1)) begin
        dst_V_id_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_id_V_reg_259;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_keep_V_1_load_A == 1'b1)) begin
        dst_V_keep_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_keep_V_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_keep_V_1_load_B == 1'b1)) begin
        dst_V_keep_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_keep_V_reg_211;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_last_V_1_load_A == 1'b1)) begin
        dst_V_last_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_last_V_reg_247;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_last_V_1_load_B == 1'b1)) begin
        dst_V_last_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_last_V_reg_247;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_strb_V_1_load_A == 1'b1)) begin
        dst_V_strb_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_strb_V_reg_223;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_strb_V_1_load_B == 1'b1)) begin
        dst_V_strb_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_strb_V_reg_223;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_user_V_1_load_A == 1'b1)) begin
        dst_V_user_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_user_V_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_user_V_1_load_B == 1'b1)) begin
        dst_V_user_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_user_V_reg_235;
    end
end

always @ (posedge ap_clk) begin
    if (((guard_variable_for_s_1_load_fu_367_p1 == 1'd0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        guard_variable_for_s <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_user_V_1_reg_774 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        lastx[0] <= 1'b0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        pOut_data_V <= pIn_data_V_1_fu_616_p3;
        pOut_dest_V <= tmp_dest_V_1_reg_796;
        pOut_id_V <= tmp_id_V_1_reg_790;
        pOut_keep_V <= tmp_keep_V_1_reg_762;
        pOut_last_V <= tmp_last_V_1_reg_781;
        pOut_strb_V <= tmp_strb_V_1_reg_768;
        pOut_user_V <= tmp_user_V_1_reg_774;
        x <= x_new_fu_683_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_data_V_0_load_A == 1'b1)) begin
        src_V_data_V_0_payload_A <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_data_V_0_load_B == 1'b1)) begin
        src_V_data_V_0_payload_B <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_dest_V_0_load_A == 1'b1)) begin
        src_V_dest_V_0_payload_A <= src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_dest_V_0_load_B == 1'b1)) begin
        src_V_dest_V_0_payload_B <= src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_id_V_0_load_A == 1'b1)) begin
        src_V_id_V_0_payload_A <= src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_id_V_0_load_B == 1'b1)) begin
        src_V_id_V_0_payload_B <= src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_keep_V_0_load_A == 1'b1)) begin
        src_V_keep_V_0_payload_A <= src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_keep_V_0_load_B == 1'b1)) begin
        src_V_keep_V_0_payload_B <= src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_last_V_0_load_A == 1'b1)) begin
        src_V_last_V_0_payload_A <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_last_V_0_load_B == 1'b1)) begin
        src_V_last_V_0_payload_B <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_strb_V_0_load_A == 1'b1)) begin
        src_V_strb_V_0_payload_A <= src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_strb_V_0_load_B == 1'b1)) begin
        src_V_strb_V_0_payload_B <= src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_user_V_0_load_A == 1'b1)) begin
        src_V_user_V_0_payload_A <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_user_V_0_load_B == 1'b1)) begin
        src_V_user_V_0_payload_B <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_user_V_1_fu_351_p1 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_4_i_reg_850 <= tmp_4_i_fu_431_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_5_reg_869[13 : 12] <= tmp_5_fu_745_p3[13 : 12];
        tmp_8_reg_864[13 : 12] <= tmp_8_fu_706_p3[13 : 12];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_data_V_1_reg_754 <= src_V_data_V_0_data_out;
        tmp_dest_V_1_reg_796 <= src_V_dest_V_0_data_out;
        tmp_id_V_1_reg_790 <= src_V_id_V_0_data_out;
        tmp_keep_V_1_reg_762 <= src_V_keep_V_0_data_out;
        tmp_last_V_1_reg_781 <= src_V_last_V_0_data_out;
        tmp_strb_V_1_reg_768 <= src_V_strb_V_0_data_out;
        tmp_user_V_1_reg_774 <= src_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((y_flag_1_fu_671_p2 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        y <= y_new_1_fu_676_p3;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1))) begin
        buf_data_address0 = tmp_21_i_fu_477_p1;
    end else if ((((1'b0 == ap_block_pp0_stage56) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage56)) | ((1'b0 == ap_block_pp0_stage55) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage55)) | ((1'b0 == ap_block_pp0_stage53) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage53)) | ((1'b0 == ap_block_pp0_stage52) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage52)) | ((1'b0 == ap_block_pp0_stage50) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage50)) | ((1'b0 == ap_block_pp0_stage49) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage49)) | ((1'b0 == ap_block_pp0_stage47) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage47)) | ((1'b0 == ap_block_pp0_stage46) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage46)) | ((1'b0 == ap_block_pp0_stage44) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage44)) | ((1'b0 == ap_block_pp0_stage43) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage43)) | ((1'b0 == ap_block_pp0_stage41) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage41)) | ((1'b0 == ap_block_pp0_stage40) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage40)) | ((1'b0 == ap_block_pp0_stage38) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage38)) | ((1'b0 == ap_block_pp0_stage37) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37)) | ((1'b0 == ap_block_pp0_stage35) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage35)) | ((1'b0 == ap_block_pp0_stage34) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage34)) | ((1'b0 == ap_block_pp0_stage32) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage29) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage26) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage23) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage20) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage17) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage14) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage11) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage8) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        buf_data_address0 = grp_correlatiebeun_fu_318_buf_data_address0;
    end else begin
        buf_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        buf_data_ce0 = 1'b1;
    end else if ((((1'b0 == ap_block_pp0_stage56) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage56)) | ((1'b0 == ap_block_pp0_stage55) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage55)) | ((1'b0 == ap_block_pp0_stage53) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage53)) | ((1'b0 == ap_block_pp0_stage52) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage52)) | ((1'b0 == ap_block_pp0_stage50) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage50)) | ((1'b0 == ap_block_pp0_stage49) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage49)) | ((1'b0 == ap_block_pp0_stage47) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage47)) | ((1'b0 == ap_block_pp0_stage46) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage46)) | ((1'b0 == ap_block_pp0_stage44) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage44)) | ((1'b0 == ap_block_pp0_stage43) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage43)) | ((1'b0 == ap_block_pp0_stage41) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage41)) | ((1'b0 == ap_block_pp0_stage40) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage40)) | ((1'b0 == ap_block_pp0_stage38) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage38)) | ((1'b0 == ap_block_pp0_stage37) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37)) | ((1'b0 == ap_block_pp0_stage35) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage35)) | ((1'b0 == ap_block_pp0_stage34) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage34)) | ((1'b0 == ap_block_pp0_stage32) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage29) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage26) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage23) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage20) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage17) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage14) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage11) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage8) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        buf_data_ce0 = grp_correlatiebeun_fu_318_buf_data_ce0;
    end else begin
        buf_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage56) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage56)) | ((1'b0 == ap_block_pp0_stage55) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage55)) | ((1'b0 == ap_block_pp0_stage53) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage53)) | ((1'b0 == ap_block_pp0_stage52) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage52)) | ((1'b0 == ap_block_pp0_stage50) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage50)) | ((1'b0 == ap_block_pp0_stage49) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage49)) | ((1'b0 == ap_block_pp0_stage47) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage47)) | ((1'b0 == ap_block_pp0_stage46) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage46)) | ((1'b0 == ap_block_pp0_stage44) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage44)) | ((1'b0 == ap_block_pp0_stage43) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage43)) | ((1'b0 == ap_block_pp0_stage41) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage41)) | ((1'b0 == ap_block_pp0_stage40) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage40)) | ((1'b0 == ap_block_pp0_stage38) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage38)) | ((1'b0 == ap_block_pp0_stage37) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37)) | ((1'b0 == ap_block_pp0_stage35) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage35)) | ((1'b0 == ap_block_pp0_stage34) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage34)) | ((1'b0 == ap_block_pp0_stage32) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage29) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage26) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage23) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22)) | ((1'b0 == ap_block_pp0_stage20) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage17) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage14) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage11) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10)) | ((1'b0 == ap_block_pp0_stage8) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        buf_data_ce1 = grp_correlatiebeun_fu_318_buf_data_ce1;
    end else begin
        buf_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_user_V_1_reg_774 == 1'd1) & (tmp_9_i_i_fu_490_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        buf_data_we0 = 1'b1;
    end else begin
        buf_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1)))) begin
        dst_TDATA_blk_n = dst_V_data_V_1_state[1'd1];
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((dst_V_data_V_1_sel == 1'b1)) begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_B;
    end else begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dst_V_data_V_1_vld_in = 1'b1;
    end else begin
        dst_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_dest_V_1_sel == 1'b1)) begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_B;
    end else begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dst_V_dest_V_1_vld_in = 1'b1;
    end else begin
        dst_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_id_V_1_sel == 1'b1)) begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_B;
    end else begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dst_V_id_V_1_vld_in = 1'b1;
    end else begin
        dst_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_keep_V_1_sel == 1'b1)) begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_B;
    end else begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dst_V_keep_V_1_vld_in = 1'b1;
    end else begin
        dst_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_last_V_1_sel == 1'b1)) begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_B;
    end else begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dst_V_last_V_1_vld_in = 1'b1;
    end else begin
        dst_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_strb_V_1_sel == 1'b1)) begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_B;
    end else begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dst_V_strb_V_1_vld_in = 1'b1;
    end else begin
        dst_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_user_V_1_sel == 1'b1)) begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_B;
    end else begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dst_V_user_V_1_vld_in = 1'b1;
    end else begin
        dst_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage54) & (1'b0 == ap_block_pp0_stage54)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage51) & (1'b0 == ap_block_pp0_stage51)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage48) & (1'b0 == ap_block_pp0_stage48)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage45) & (1'b0 == ap_block_pp0_stage45)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage42) & (1'b0 == ap_block_pp0_stage42)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39) & (1'b0 == ap_block_pp0_stage39)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage33) & (1'b0 == ap_block_pp0_stage33)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage30) & (1'b0 == ap_block_pp0_stage30)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage57) & (1'b0 == ap_block_pp0_stage57)))) begin
        grp_correlatiebeun_fu_318_a_offset = tmp_8_reg_864;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1))) begin
        grp_correlatiebeun_fu_318_a_offset = tmp_8_fu_706_p3;
    end else begin
        grp_correlatiebeun_fu_318_a_offset = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage56) & (1'b0 == ap_block_pp0_stage56_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage55) & (1'b0 == ap_block_pp0_stage55_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage54) & (1'b0 == ap_block_pp0_stage54_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage53) & (1'b0 == ap_block_pp0_stage53_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage52) & (1'b0 == ap_block_pp0_stage52_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage51) & (1'b0 == ap_block_pp0_stage51_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage50) & (1'b0 == ap_block_pp0_stage50_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage49) & (1'b0 == ap_block_pp0_stage49_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage48) & (1'b0 == ap_block_pp0_stage48_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage47) & (1'b0 == ap_block_pp0_stage47_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage46) & (1'b0 == ap_block_pp0_stage46_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage45) & (1'b0 == ap_block_pp0_stage45_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage44) & (1'b0 == ap_block_pp0_stage44_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage43) & (1'b0 == ap_block_pp0_stage43_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage42) & (1'b0 == ap_block_pp0_stage42_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage41) & (1'b0 == ap_block_pp0_stage41_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage40) & (1'b0 == ap_block_pp0_stage40_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage39) & (1'b0 == ap_block_pp0_stage39_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage38) & (1'b0 == ap_block_pp0_stage38_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage37) & (1'b0 == ap_block_pp0_stage37_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage34) & (1'b0 == ap_block_pp0_stage34_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage33) & (1'b0 == ap_block_pp0_stage33_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage32) & (1'b0 == ap_block_pp0_stage32_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage30) & (1'b0 == ap_block_pp0_stage30_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage29) & (1'b0 == ap_block_pp0_stage29_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage57) & (1'b0 == ap_block_pp0_stage57_11001)))) begin
        grp_correlatiebeun_fu_318_ap_ce = 1'b1;
    end else begin
        grp_correlatiebeun_fu_318_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage54) & (1'b0 == ap_block_pp0_stage54)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage51) & (1'b0 == ap_block_pp0_stage51)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage48) & (1'b0 == ap_block_pp0_stage48)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage45) & (1'b0 == ap_block_pp0_stage45)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage42) & (1'b0 == ap_block_pp0_stage42)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39) & (1'b0 == ap_block_pp0_stage39)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage33) & (1'b0 == ap_block_pp0_stage33)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage30) & (1'b0 == ap_block_pp0_stage30)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage57) & (1'b0 == ap_block_pp0_stage57)))) begin
        grp_correlatiebeun_fu_318_b_offset = tmp_5_reg_869;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b1 == 1'b1))) begin
        grp_correlatiebeun_fu_318_b_offset = tmp_5_fu_745_p3;
    end else begin
        grp_correlatiebeun_fu_318_b_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_TDATA_blk_n = src_V_data_V_0_state[1'd0];
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_data_V_0_ack_out = 1'b1;
    end else begin
        src_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_data_V_0_sel == 1'b1)) begin
        src_V_data_V_0_data_out = src_V_data_V_0_payload_B;
    end else begin
        src_V_data_V_0_data_out = src_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_dest_V_0_ack_out = 1'b1;
    end else begin
        src_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_dest_V_0_sel == 1'b1)) begin
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_B;
    end else begin
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_id_V_0_ack_out = 1'b1;
    end else begin
        src_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_id_V_0_sel == 1'b1)) begin
        src_V_id_V_0_data_out = src_V_id_V_0_payload_B;
    end else begin
        src_V_id_V_0_data_out = src_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_keep_V_0_ack_out = 1'b1;
    end else begin
        src_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_keep_V_0_sel == 1'b1)) begin
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_B;
    end else begin
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_last_V_0_ack_out = 1'b1;
    end else begin
        src_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_last_V_0_sel == 1'b1)) begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_B;
    end else begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_strb_V_0_ack_out = 1'b1;
    end else begin
        src_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_strb_V_0_sel == 1'b1)) begin
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_B;
    end else begin
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_user_V_0_ack_out = 1'b1;
    end else begin
        src_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_user_V_0_sel == 1'b1)) begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_B;
    end else begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((1'b0 == ap_block_pp0_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((1'b0 == ap_block_pp0_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_pp0_stage40 : begin
            if ((1'b0 == ap_block_pp0_stage40_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end
        end
        ap_ST_fsm_pp0_stage41 : begin
            if ((1'b0 == ap_block_pp0_stage41_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end
        end
        ap_ST_fsm_pp0_stage42 : begin
            if ((1'b0 == ap_block_pp0_stage42_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end
        end
        ap_ST_fsm_pp0_stage43 : begin
            if ((1'b0 == ap_block_pp0_stage43_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end
        end
        ap_ST_fsm_pp0_stage44 : begin
            if ((1'b0 == ap_block_pp0_stage44_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end
        end
        ap_ST_fsm_pp0_stage45 : begin
            if ((1'b0 == ap_block_pp0_stage45_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end
        end
        ap_ST_fsm_pp0_stage46 : begin
            if ((1'b0 == ap_block_pp0_stage46_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end
        end
        ap_ST_fsm_pp0_stage47 : begin
            if ((1'b0 == ap_block_pp0_stage47_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end
        end
        ap_ST_fsm_pp0_stage48 : begin
            if ((1'b0 == ap_block_pp0_stage48_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end
        end
        ap_ST_fsm_pp0_stage49 : begin
            if ((1'b0 == ap_block_pp0_stage49_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end
        end
        ap_ST_fsm_pp0_stage50 : begin
            if ((1'b0 == ap_block_pp0_stage50_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end
        end
        ap_ST_fsm_pp0_stage51 : begin
            if ((1'b0 == ap_block_pp0_stage51_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end
        end
        ap_ST_fsm_pp0_stage52 : begin
            if ((1'b0 == ap_block_pp0_stage52_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end
        end
        ap_ST_fsm_pp0_stage53 : begin
            if ((1'b0 == ap_block_pp0_stage53_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end
        end
        ap_ST_fsm_pp0_stage54 : begin
            if ((1'b0 == ap_block_pp0_stage54_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end
        end
        ap_ST_fsm_pp0_stage55 : begin
            if ((1'b0 == ap_block_pp0_stage55_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end
        end
        ap_ST_fsm_pp0_stage56 : begin
            if ((1'b0 == ap_block_pp0_stage56_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end
        end
        ap_ST_fsm_pp0_stage57 : begin
            if ((1'b0 == ap_block_pp0_stage57_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage28 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage29 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage32 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage33 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage34 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage35 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp0_stage36 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage37 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage38 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp0_stage39 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage40 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp0_stage41 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp0_stage42 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp0_stage43 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_pp0_stage44 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp0_stage45 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp0_stage46 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp0_stage47 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp0_stage48 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp0_stage49 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage50 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp0_stage51 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp0_stage52 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp0_stage53 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp0_stage54 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_pp0_stage55 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_pp0_stage56 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_pp0_stage57 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((src_V_data_V_0_vld_out == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dst_V_dest_V_1_ack_in == 1'b0) | (dst_V_id_V_1_ack_in == 1'b0) | (dst_V_last_V_1_ack_in == 1'b0) | (dst_V_user_V_1_ack_in == 1'b0) | (dst_V_strb_V_1_ack_in == 1'b0) | (dst_V_keep_V_1_ack_in == 1'b0) | (dst_V_data_V_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((src_V_data_V_0_vld_out == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dst_V_dest_V_1_ack_in == 1'b0) | (dst_V_id_V_1_ack_in == 1'b0) | (dst_V_last_V_1_ack_in == 1'b0) | (dst_V_user_V_1_ack_in == 1'b0) | (dst_V_strb_V_1_ack_in == 1'b0) | (dst_V_keep_V_1_ack_in == 1'b0) | (dst_V_data_V_1_ack_in == 1'b0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((dst_V_data_V_1_ack_in == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((dst_V_data_V_1_ack_in == 1'b0) & (1'b1 == 1'b1));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((dst_V_data_V_1_ack_in == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((dst_V_data_V_1_ack_in == 1'b0) & (1'b1 == 1'b1));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0_ignore_call14 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0_ignore_call14 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0_ignore_call14 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0_ignore_call15 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0_ignore_call16 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0_ignore_call17 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call30 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage19_iter0_ignore_call17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0_ignore_call17 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0_ignore_call18 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0_ignore_call19 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0_ignore_call19 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0_ignore_call19 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0_ignore_call20 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (src_V_data_V_0_vld_out == 1'b0);
end

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage29_iter0_ignore_call20 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0_ignore_call21 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0_ignore_call21 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage32_iter0_ignore_call21 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage33_iter0_ignore_call22 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage34_iter0_ignore_call22 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage35_iter0_ignore_call22 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage36_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage37_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage38_iter0_ignore_call23 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage39_iter0_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage40_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage40_iter0_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage41_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage41_iter0_ignore_call24 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage42_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage42_iter0_ignore_call25 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage43_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage43_iter0_ignore_call25 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage44_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage44_iter0_ignore_call25 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage45_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage45_iter0_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage46_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage46_iter0_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage47_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage47_iter0_ignore_call26 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage48_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage48_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage49_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage49_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage50_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage50_iter0_ignore_call27 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage51_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage51_iter0_ignore_call28 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage52_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage52_iter0_ignore_call28 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage53_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage53_iter0_ignore_call28 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage54_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage54_iter0_ignore_call29 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage55_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage55_iter0_ignore_call29 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage56_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage56_iter0_ignore_call29 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage57_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage57_iter0_ignore_call30 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage0_iter1_ignore_call30 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0_ignore_call12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state60_pp0_stage1_iter1 = ((dst_V_dest_V_1_ack_in == 1'b0) | (dst_V_id_V_1_ack_in == 1'b0) | (dst_V_last_V_1_ack_in == 1'b0) | (dst_V_user_V_1_ack_in == 1'b0) | (dst_V_strb_V_1_ack_in == 1'b0) | (dst_V_keep_V_1_ack_in == 1'b0) | (dst_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0_ignore_call12 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0_ignore_call13 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0_ignore_call13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1715 = ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dst_TDATA = dst_V_data_V_1_data_out;

assign dst_TDEST = dst_V_dest_V_1_data_out;

assign dst_TID = dst_V_id_V_1_data_out;

assign dst_TKEEP = dst_V_keep_V_1_data_out;

assign dst_TLAST = dst_V_last_V_1_data_out;

assign dst_TSTRB = dst_V_strb_V_1_data_out;

assign dst_TUSER = dst_V_user_V_1_data_out;

assign dst_TVALID = dst_V_dest_V_1_state[1'd0];

assign dst_V_data_V_1_ack_in = dst_V_data_V_1_state[1'd1];

assign dst_V_data_V_1_ack_out = dst_TREADY;

assign dst_V_data_V_1_load_A = (~dst_V_data_V_1_sel_wr & dst_V_data_V_1_state_cmp_full);

assign dst_V_data_V_1_load_B = (dst_V_data_V_1_state_cmp_full & dst_V_data_V_1_sel_wr);

assign dst_V_data_V_1_sel = dst_V_data_V_1_sel_rd;

assign dst_V_data_V_1_state_cmp_full = ((dst_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_data_V_1_vld_out = dst_V_data_V_1_state[1'd0];

assign dst_V_dest_V_1_ack_in = dst_V_dest_V_1_state[1'd1];

assign dst_V_dest_V_1_ack_out = dst_TREADY;

assign dst_V_dest_V_1_load_A = (~dst_V_dest_V_1_sel_wr & dst_V_dest_V_1_state_cmp_full);

assign dst_V_dest_V_1_load_B = (dst_V_dest_V_1_state_cmp_full & dst_V_dest_V_1_sel_wr);

assign dst_V_dest_V_1_sel = dst_V_dest_V_1_sel_rd;

assign dst_V_dest_V_1_state_cmp_full = ((dst_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_dest_V_1_vld_out = dst_V_dest_V_1_state[1'd0];

assign dst_V_id_V_1_ack_in = dst_V_id_V_1_state[1'd1];

assign dst_V_id_V_1_ack_out = dst_TREADY;

assign dst_V_id_V_1_load_A = (~dst_V_id_V_1_sel_wr & dst_V_id_V_1_state_cmp_full);

assign dst_V_id_V_1_load_B = (dst_V_id_V_1_state_cmp_full & dst_V_id_V_1_sel_wr);

assign dst_V_id_V_1_sel = dst_V_id_V_1_sel_rd;

assign dst_V_id_V_1_state_cmp_full = ((dst_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_id_V_1_vld_out = dst_V_id_V_1_state[1'd0];

assign dst_V_keep_V_1_ack_in = dst_V_keep_V_1_state[1'd1];

assign dst_V_keep_V_1_ack_out = dst_TREADY;

assign dst_V_keep_V_1_load_A = (~dst_V_keep_V_1_sel_wr & dst_V_keep_V_1_state_cmp_full);

assign dst_V_keep_V_1_load_B = (dst_V_keep_V_1_state_cmp_full & dst_V_keep_V_1_sel_wr);

assign dst_V_keep_V_1_sel = dst_V_keep_V_1_sel_rd;

assign dst_V_keep_V_1_state_cmp_full = ((dst_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_keep_V_1_vld_out = dst_V_keep_V_1_state[1'd0];

assign dst_V_last_V_1_ack_in = dst_V_last_V_1_state[1'd1];

assign dst_V_last_V_1_ack_out = dst_TREADY;

assign dst_V_last_V_1_load_A = (~dst_V_last_V_1_sel_wr & dst_V_last_V_1_state_cmp_full);

assign dst_V_last_V_1_load_B = (dst_V_last_V_1_state_cmp_full & dst_V_last_V_1_sel_wr);

assign dst_V_last_V_1_sel = dst_V_last_V_1_sel_rd;

assign dst_V_last_V_1_state_cmp_full = ((dst_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_last_V_1_vld_out = dst_V_last_V_1_state[1'd0];

assign dst_V_strb_V_1_ack_in = dst_V_strb_V_1_state[1'd1];

assign dst_V_strb_V_1_ack_out = dst_TREADY;

assign dst_V_strb_V_1_load_A = (~dst_V_strb_V_1_sel_wr & dst_V_strb_V_1_state_cmp_full);

assign dst_V_strb_V_1_load_B = (dst_V_strb_V_1_state_cmp_full & dst_V_strb_V_1_sel_wr);

assign dst_V_strb_V_1_sel = dst_V_strb_V_1_sel_rd;

assign dst_V_strb_V_1_state_cmp_full = ((dst_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_strb_V_1_vld_out = dst_V_strb_V_1_state[1'd0];

assign dst_V_user_V_1_ack_in = dst_V_user_V_1_state[1'd1];

assign dst_V_user_V_1_ack_out = dst_TREADY;

assign dst_V_user_V_1_load_A = (~dst_V_user_V_1_sel_wr & dst_V_user_V_1_state_cmp_full);

assign dst_V_user_V_1_load_B = (dst_V_user_V_1_state_cmp_full & dst_V_user_V_1_sel_wr);

assign dst_V_user_V_1_sel = dst_V_user_V_1_sel_rd;

assign dst_V_user_V_1_state_cmp_full = ((dst_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_user_V_1_vld_out = dst_V_user_V_1_state[1'd0];

assign grp_correlatiebeun_fu_318_ap_start = grp_correlatiebeun_fu_318_ap_start_reg;

assign grp_correlatiebeun_fu_318_start = tmp_user_V_1_reg_774;

assign guard_variable_for_s_1_load_fu_367_p1 = guard_variable_for_s;

assign pIn_data_V_1_fu_616_p3 = ((sel_tmp9_i_fu_610_p2[0:0] === 1'b1) ? tmp_data_V_1_reg_754 : sel_tmp6_i_fu_596_p3);

assign sel_tmp2_i_fu_560_p2 = (tmp_14_i_fu_502_p2 ^ 1'd1);

assign sel_tmp5_i_fu_590_p2 = (tmp9_fu_584_p2 & tmp7_fu_572_p2);

assign sel_tmp6_i_fu_596_p3 = ((sel_tmp5_i_fu_590_p2[0:0] === 1'b1) ? tmp_29_i_fu_552_p3 : tmp_28_i_fu_538_p2);

assign sel_tmp8_i_fu_604_p2 = (tmp_19_i4_fu_508_p2 ^ 1'd1);

assign sel_tmp9_i_fu_610_p2 = (tmp_14_i_fu_502_p2 | sel_tmp8_i_fu_604_p2);

assign src_TREADY = src_V_dest_V_0_state[1'd1];

assign src_V_data_V_0_ack_in = src_V_data_V_0_state[1'd1];

assign src_V_data_V_0_load_A = (src_V_data_V_0_state_cmp_full & ~src_V_data_V_0_sel_wr);

assign src_V_data_V_0_load_B = (src_V_data_V_0_state_cmp_full & src_V_data_V_0_sel_wr);

assign src_V_data_V_0_sel = src_V_data_V_0_sel_rd;

assign src_V_data_V_0_state_cmp_full = ((src_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_data_V_0_vld_in = src_TVALID;

assign src_V_data_V_0_vld_out = src_V_data_V_0_state[1'd0];

assign src_V_dest_V_0_ack_in = src_V_dest_V_0_state[1'd1];

assign src_V_dest_V_0_load_A = (src_V_dest_V_0_state_cmp_full & ~src_V_dest_V_0_sel_wr);

assign src_V_dest_V_0_load_B = (src_V_dest_V_0_state_cmp_full & src_V_dest_V_0_sel_wr);

assign src_V_dest_V_0_sel = src_V_dest_V_0_sel_rd;

assign src_V_dest_V_0_state_cmp_full = ((src_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_dest_V_0_vld_in = src_TVALID;

assign src_V_dest_V_0_vld_out = src_V_dest_V_0_state[1'd0];

assign src_V_id_V_0_ack_in = src_V_id_V_0_state[1'd1];

assign src_V_id_V_0_load_A = (src_V_id_V_0_state_cmp_full & ~src_V_id_V_0_sel_wr);

assign src_V_id_V_0_load_B = (src_V_id_V_0_state_cmp_full & src_V_id_V_0_sel_wr);

assign src_V_id_V_0_sel = src_V_id_V_0_sel_rd;

assign src_V_id_V_0_state_cmp_full = ((src_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_id_V_0_vld_in = src_TVALID;

assign src_V_id_V_0_vld_out = src_V_id_V_0_state[1'd0];

assign src_V_keep_V_0_ack_in = src_V_keep_V_0_state[1'd1];

assign src_V_keep_V_0_load_A = (src_V_keep_V_0_state_cmp_full & ~src_V_keep_V_0_sel_wr);

assign src_V_keep_V_0_load_B = (src_V_keep_V_0_state_cmp_full & src_V_keep_V_0_sel_wr);

assign src_V_keep_V_0_sel = src_V_keep_V_0_sel_rd;

assign src_V_keep_V_0_state_cmp_full = ((src_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_keep_V_0_vld_in = src_TVALID;

assign src_V_keep_V_0_vld_out = src_V_keep_V_0_state[1'd0];

assign src_V_last_V_0_ack_in = src_V_last_V_0_state[1'd1];

assign src_V_last_V_0_load_A = (src_V_last_V_0_state_cmp_full & ~src_V_last_V_0_sel_wr);

assign src_V_last_V_0_load_B = (src_V_last_V_0_state_cmp_full & src_V_last_V_0_sel_wr);

assign src_V_last_V_0_sel = src_V_last_V_0_sel_rd;

assign src_V_last_V_0_state_cmp_full = ((src_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_last_V_0_vld_in = src_TVALID;

assign src_V_last_V_0_vld_out = src_V_last_V_0_state[1'd0];

assign src_V_strb_V_0_ack_in = src_V_strb_V_0_state[1'd1];

assign src_V_strb_V_0_load_A = (src_V_strb_V_0_state_cmp_full & ~src_V_strb_V_0_sel_wr);

assign src_V_strb_V_0_load_B = (src_V_strb_V_0_state_cmp_full & src_V_strb_V_0_sel_wr);

assign src_V_strb_V_0_sel = src_V_strb_V_0_sel_rd;

assign src_V_strb_V_0_state_cmp_full = ((src_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_strb_V_0_vld_in = src_TVALID;

assign src_V_strb_V_0_vld_out = src_V_strb_V_0_state[1'd0];

assign src_V_user_V_0_ack_in = src_V_user_V_0_state[1'd1];

assign src_V_user_V_0_load_A = (src_V_user_V_0_state_cmp_full & ~src_V_user_V_0_sel_wr);

assign src_V_user_V_0_load_B = (src_V_user_V_0_state_cmp_full & src_V_user_V_0_sel_wr);

assign src_V_user_V_0_sel = src_V_user_V_0_sel_rd;

assign src_V_user_V_0_state_cmp_full = ((src_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_user_V_0_vld_in = src_TVALID;

assign src_V_user_V_0_vld_out = src_V_user_V_0_state[1'd0];

assign tmp7_fu_572_p2 = (tmp_19_i4_fu_508_p2 & tmp8_fu_566_p2);

assign tmp8_fu_566_p2 = (tmp_23_i_fu_520_p2 & sel_tmp2_i_fu_560_p2);

assign tmp9_fu_584_p2 = (tmp_fu_578_p2 & tmp_21_i6_fu_514_p2);

assign tmp_10_fu_486_p1 = lastx[1:0];

assign tmp_11_fu_721_p2 = ((tmp_s_fu_715_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_12_fu_727_p2 = (2'd3 + buf_which);

assign tmp_13_fu_733_p1 = tmp_s_fu_715_p2[1:0];

assign tmp_14_fu_737_p3 = ((tmp_11_fu_721_p2[0:0] === 1'b1) ? tmp_13_fu_733_p1 : tmp_12_fu_727_p2);

assign tmp_14_i_fu_502_p2 = ((ap_phi_reg_pp0_iter0_x_assign_reg_307 > 16'd49) ? 1'b1 : 1'b0);

assign tmp_15_fu_543_p4 = {{tmp_data_V_1_reg_754[31:24]}};

assign tmp_19_i4_fu_508_p2 = ((ap_phi_reg_pp0_iter0_y_assign_reg_296 < 16'd50) ? 1'b1 : 1'b0);

assign tmp_1_fu_419_p2 = ((tmp_i_fu_413_p2 != 2'd3) ? 1'b1 : 1'b0);

assign tmp_20_i_fu_469_p3 = {{tmp_9_fu_461_p3}, {12'd0}};

assign tmp_21_i6_fu_514_p2 = ((ap_phi_reg_pp0_iter0_x_assign_reg_307 > 16'd9) ? 1'b1 : 1'b0);

assign tmp_21_i_fu_477_p1 = tmp_20_i_fu_469_p3;

assign tmp_23_i_fu_520_p2 = ((ap_phi_reg_pp0_iter0_x_assign_reg_307 < 16'd40) ? 1'b1 : 1'b0);

assign tmp_25_i_fu_526_p2 = ((ap_phi_reg_pp0_iter0_y_assign_reg_296 > 16'd9) ? 1'b1 : 1'b0);

assign tmp_27_i_fu_532_p2 = ((ap_phi_reg_pp0_iter0_y_assign_reg_296 < 16'd40) ? 1'b1 : 1'b0);

assign tmp_28_i_fu_538_p2 = (tmp_data_V_1_reg_754 | 32'd16777215);

assign tmp_29_i_fu_552_p3 = {{tmp_15_fu_543_p4}, {24'd0}};

assign tmp_2_fu_659_p2 = (16'd1 + ap_phi_reg_pp0_iter0_y_assign_reg_296);

assign tmp_3_fu_665_p2 = (16'd1 + ap_phi_reg_pp0_iter0_x_assign_reg_307);

assign tmp_4_fu_425_p2 = (buf_which ^ 2'd2);

assign tmp_4_i_fu_431_p3 = ((tmp_1_fu_419_p2[0:0] === 1'b1) ? tmp_i_fu_413_p2 : tmp_4_fu_425_p2);

assign tmp_5_fu_745_p3 = {{tmp_14_fu_737_p3}, {12'd0}};

assign tmp_6_fu_450_p2 = ((tmp_i1_fu_445_p2 != 2'd3) ? 1'b1 : 1'b0);

assign tmp_7_cast_fu_702_p1 = buf_which;

assign tmp_7_fu_456_p2 = (tmp_4_i_reg_850 ^ 2'd2);

assign tmp_8_fu_706_p3 = {{buf_which}, {12'd0}};

assign tmp_9_fu_461_p3 = ((tmp_6_fu_450_p2[0:0] === 1'b1) ? tmp_i1_fu_445_p2 : tmp_7_fu_456_p2);

assign tmp_9_i_i_fu_490_p2 = ((tmp_10_fu_486_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_fu_578_p2 = (tmp_27_i_fu_532_p2 & tmp_25_i_fu_526_p2);

assign tmp_i1_fu_445_p2 = (2'd1 + tmp_4_i_reg_850);

assign tmp_i_fu_413_p2 = (2'd1 + buf_which);

assign tmp_s_fu_715_p2 = (3'd2 + tmp_7_cast_fu_702_p1);

assign tmp_user_V_1_fu_351_p1 = src_V_user_V_0_data_out;

assign x_new_fu_683_p3 = ((tmp_last_V_1_reg_781[0:0] === 1'b1) ? 16'd0 : tmp_3_fu_665_p2);

assign y_flag_1_fu_671_p2 = (tmp_last_V_1_reg_781 | ap_phi_reg_pp0_iter0_y_flag_reg_283);

assign y_new_1_fu_676_p3 = ((tmp_last_V_1_reg_781[0:0] === 1'b1) ? tmp_2_fu_659_p2 : 16'd0);

always @ (posedge ap_clk) begin
    lastx[7:1] <= 7'b0000000;
    tmp_8_reg_864[11:0] <= 12'b000000000000;
    tmp_5_reg_869[11:0] <= 12'b000000000000;
end

endmodule //stream
