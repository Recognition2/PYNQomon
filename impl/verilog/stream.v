// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="stream,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=12.918250,HLS_SYN_LAT=82,HLS_SYN_TPT=77,HLS_SYN_MEM=1,HLS_SYN_DSP=42,HLS_SYN_FF=1668,HLS_SYN_LUT=3715,HLS_VERSION=2018_2}" *)

module stream (
        ap_clk,
        ap_rst_n,
        src_TDATA,
        src_TVALID,
        src_TREADY,
        src_TKEEP,
        src_TSTRB,
        src_TUSER,
        src_TLAST,
        src_TID,
        src_TDEST,
        dst_TDATA,
        dst_TVALID,
        dst_TREADY,
        dst_TKEEP,
        dst_TSTRB,
        dst_TUSER,
        dst_TLAST,
        dst_TID,
        dst_TDEST,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 77'd1;
parameter    ap_ST_fsm_pp0_stage1 = 77'd2;
parameter    ap_ST_fsm_pp0_stage2 = 77'd4;
parameter    ap_ST_fsm_pp0_stage3 = 77'd8;
parameter    ap_ST_fsm_pp0_stage4 = 77'd16;
parameter    ap_ST_fsm_pp0_stage5 = 77'd32;
parameter    ap_ST_fsm_pp0_stage6 = 77'd64;
parameter    ap_ST_fsm_pp0_stage7 = 77'd128;
parameter    ap_ST_fsm_pp0_stage8 = 77'd256;
parameter    ap_ST_fsm_pp0_stage9 = 77'd512;
parameter    ap_ST_fsm_pp0_stage10 = 77'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 77'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 77'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 77'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 77'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 77'd32768;
parameter    ap_ST_fsm_pp0_stage16 = 77'd65536;
parameter    ap_ST_fsm_pp0_stage17 = 77'd131072;
parameter    ap_ST_fsm_pp0_stage18 = 77'd262144;
parameter    ap_ST_fsm_pp0_stage19 = 77'd524288;
parameter    ap_ST_fsm_pp0_stage20 = 77'd1048576;
parameter    ap_ST_fsm_pp0_stage21 = 77'd2097152;
parameter    ap_ST_fsm_pp0_stage22 = 77'd4194304;
parameter    ap_ST_fsm_pp0_stage23 = 77'd8388608;
parameter    ap_ST_fsm_pp0_stage24 = 77'd16777216;
parameter    ap_ST_fsm_pp0_stage25 = 77'd33554432;
parameter    ap_ST_fsm_pp0_stage26 = 77'd67108864;
parameter    ap_ST_fsm_pp0_stage27 = 77'd134217728;
parameter    ap_ST_fsm_pp0_stage28 = 77'd268435456;
parameter    ap_ST_fsm_pp0_stage29 = 77'd536870912;
parameter    ap_ST_fsm_pp0_stage30 = 77'd1073741824;
parameter    ap_ST_fsm_pp0_stage31 = 77'd2147483648;
parameter    ap_ST_fsm_pp0_stage32 = 77'd4294967296;
parameter    ap_ST_fsm_pp0_stage33 = 77'd8589934592;
parameter    ap_ST_fsm_pp0_stage34 = 77'd17179869184;
parameter    ap_ST_fsm_pp0_stage35 = 77'd34359738368;
parameter    ap_ST_fsm_pp0_stage36 = 77'd68719476736;
parameter    ap_ST_fsm_pp0_stage37 = 77'd137438953472;
parameter    ap_ST_fsm_pp0_stage38 = 77'd274877906944;
parameter    ap_ST_fsm_pp0_stage39 = 77'd549755813888;
parameter    ap_ST_fsm_pp0_stage40 = 77'd1099511627776;
parameter    ap_ST_fsm_pp0_stage41 = 77'd2199023255552;
parameter    ap_ST_fsm_pp0_stage42 = 77'd4398046511104;
parameter    ap_ST_fsm_pp0_stage43 = 77'd8796093022208;
parameter    ap_ST_fsm_pp0_stage44 = 77'd17592186044416;
parameter    ap_ST_fsm_pp0_stage45 = 77'd35184372088832;
parameter    ap_ST_fsm_pp0_stage46 = 77'd70368744177664;
parameter    ap_ST_fsm_pp0_stage47 = 77'd140737488355328;
parameter    ap_ST_fsm_pp0_stage48 = 77'd281474976710656;
parameter    ap_ST_fsm_pp0_stage49 = 77'd562949953421312;
parameter    ap_ST_fsm_pp0_stage50 = 77'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage51 = 77'd2251799813685248;
parameter    ap_ST_fsm_pp0_stage52 = 77'd4503599627370496;
parameter    ap_ST_fsm_pp0_stage53 = 77'd9007199254740992;
parameter    ap_ST_fsm_pp0_stage54 = 77'd18014398509481984;
parameter    ap_ST_fsm_pp0_stage55 = 77'd36028797018963968;
parameter    ap_ST_fsm_pp0_stage56 = 77'd72057594037927936;
parameter    ap_ST_fsm_pp0_stage57 = 77'd144115188075855872;
parameter    ap_ST_fsm_pp0_stage58 = 77'd288230376151711744;
parameter    ap_ST_fsm_pp0_stage59 = 77'd576460752303423488;
parameter    ap_ST_fsm_pp0_stage60 = 77'd1152921504606846976;
parameter    ap_ST_fsm_pp0_stage61 = 77'd2305843009213693952;
parameter    ap_ST_fsm_pp0_stage62 = 77'd4611686018427387904;
parameter    ap_ST_fsm_pp0_stage63 = 77'd9223372036854775808;
parameter    ap_ST_fsm_pp0_stage64 = 77'd18446744073709551616;
parameter    ap_ST_fsm_pp0_stage65 = 77'd36893488147419103232;
parameter    ap_ST_fsm_pp0_stage66 = 77'd73786976294838206464;
parameter    ap_ST_fsm_pp0_stage67 = 77'd147573952589676412928;
parameter    ap_ST_fsm_pp0_stage68 = 77'd295147905179352825856;
parameter    ap_ST_fsm_pp0_stage69 = 77'd590295810358705651712;
parameter    ap_ST_fsm_pp0_stage70 = 77'd1180591620717411303424;
parameter    ap_ST_fsm_pp0_stage71 = 77'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage72 = 77'd4722366482869645213696;
parameter    ap_ST_fsm_pp0_stage73 = 77'd9444732965739290427392;
parameter    ap_ST_fsm_pp0_stage74 = 77'd18889465931478580854784;
parameter    ap_ST_fsm_pp0_stage75 = 77'd37778931862957161709568;
parameter    ap_ST_fsm_pp0_stage76 = 77'd75557863725914323419136;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] src_TDATA;
input   src_TVALID;
output   src_TREADY;
input  [3:0] src_TKEEP;
input  [3:0] src_TSTRB;
input  [0:0] src_TUSER;
input  [0:0] src_TLAST;
input  [0:0] src_TID;
input  [0:0] src_TDEST;
output  [31:0] dst_TDATA;
output   dst_TVALID;
input   dst_TREADY;
output  [3:0] dst_TKEEP;
output  [3:0] dst_TSTRB;
output  [0:0] dst_TUSER;
output  [0:0] dst_TLAST;
output  [0:0] dst_TID;
output  [0:0] dst_TDEST;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;

 reg    ap_rst_n_inv;
reg   [31:0] src_V_data_V_0_data_out;
wire    src_V_data_V_0_vld_in;
wire    src_V_data_V_0_vld_out;
wire    src_V_data_V_0_ack_in;
reg    src_V_data_V_0_ack_out;
reg   [31:0] src_V_data_V_0_payload_A;
reg   [31:0] src_V_data_V_0_payload_B;
reg    src_V_data_V_0_sel_rd;
reg    src_V_data_V_0_sel_wr;
wire    src_V_data_V_0_sel;
wire    src_V_data_V_0_load_A;
wire    src_V_data_V_0_load_B;
reg   [1:0] src_V_data_V_0_state;
wire    src_V_data_V_0_state_cmp_full;
reg   [3:0] src_V_keep_V_0_data_out;
wire    src_V_keep_V_0_vld_in;
wire    src_V_keep_V_0_vld_out;
wire    src_V_keep_V_0_ack_in;
reg    src_V_keep_V_0_ack_out;
reg   [3:0] src_V_keep_V_0_payload_A;
reg   [3:0] src_V_keep_V_0_payload_B;
reg    src_V_keep_V_0_sel_rd;
reg    src_V_keep_V_0_sel_wr;
wire    src_V_keep_V_0_sel;
wire    src_V_keep_V_0_load_A;
wire    src_V_keep_V_0_load_B;
reg   [1:0] src_V_keep_V_0_state;
wire    src_V_keep_V_0_state_cmp_full;
reg   [3:0] src_V_strb_V_0_data_out;
wire    src_V_strb_V_0_vld_in;
wire    src_V_strb_V_0_vld_out;
wire    src_V_strb_V_0_ack_in;
reg    src_V_strb_V_0_ack_out;
reg   [3:0] src_V_strb_V_0_payload_A;
reg   [3:0] src_V_strb_V_0_payload_B;
reg    src_V_strb_V_0_sel_rd;
reg    src_V_strb_V_0_sel_wr;
wire    src_V_strb_V_0_sel;
wire    src_V_strb_V_0_load_A;
wire    src_V_strb_V_0_load_B;
reg   [1:0] src_V_strb_V_0_state;
wire    src_V_strb_V_0_state_cmp_full;
reg   [0:0] src_V_user_V_0_data_out;
wire    src_V_user_V_0_vld_in;
wire    src_V_user_V_0_vld_out;
wire    src_V_user_V_0_ack_in;
reg    src_V_user_V_0_ack_out;
reg   [0:0] src_V_user_V_0_payload_A;
reg   [0:0] src_V_user_V_0_payload_B;
reg    src_V_user_V_0_sel_rd;
reg    src_V_user_V_0_sel_wr;
wire    src_V_user_V_0_sel;
wire    src_V_user_V_0_load_A;
wire    src_V_user_V_0_load_B;
reg   [1:0] src_V_user_V_0_state;
wire    src_V_user_V_0_state_cmp_full;
reg   [0:0] src_V_last_V_0_data_out;
wire    src_V_last_V_0_vld_in;
wire    src_V_last_V_0_vld_out;
wire    src_V_last_V_0_ack_in;
reg    src_V_last_V_0_ack_out;
reg   [0:0] src_V_last_V_0_payload_A;
reg   [0:0] src_V_last_V_0_payload_B;
reg    src_V_last_V_0_sel_rd;
reg    src_V_last_V_0_sel_wr;
wire    src_V_last_V_0_sel;
wire    src_V_last_V_0_load_A;
wire    src_V_last_V_0_load_B;
reg   [1:0] src_V_last_V_0_state;
wire    src_V_last_V_0_state_cmp_full;
reg   [0:0] src_V_id_V_0_data_out;
wire    src_V_id_V_0_vld_in;
wire    src_V_id_V_0_vld_out;
wire    src_V_id_V_0_ack_in;
reg    src_V_id_V_0_ack_out;
reg   [0:0] src_V_id_V_0_payload_A;
reg   [0:0] src_V_id_V_0_payload_B;
reg    src_V_id_V_0_sel_rd;
reg    src_V_id_V_0_sel_wr;
wire    src_V_id_V_0_sel;
wire    src_V_id_V_0_load_A;
wire    src_V_id_V_0_load_B;
reg   [1:0] src_V_id_V_0_state;
wire    src_V_id_V_0_state_cmp_full;
reg   [0:0] src_V_dest_V_0_data_out;
wire    src_V_dest_V_0_vld_in;
wire    src_V_dest_V_0_vld_out;
wire    src_V_dest_V_0_ack_in;
reg    src_V_dest_V_0_ack_out;
reg   [0:0] src_V_dest_V_0_payload_A;
reg   [0:0] src_V_dest_V_0_payload_B;
reg    src_V_dest_V_0_sel_rd;
reg    src_V_dest_V_0_sel_wr;
wire    src_V_dest_V_0_sel;
wire    src_V_dest_V_0_load_A;
wire    src_V_dest_V_0_load_B;
reg   [1:0] src_V_dest_V_0_state;
wire    src_V_dest_V_0_state_cmp_full;
reg   [31:0] dst_V_data_V_1_data_out;
reg    dst_V_data_V_1_vld_in;
wire    dst_V_data_V_1_vld_out;
wire    dst_V_data_V_1_ack_in;
wire    dst_V_data_V_1_ack_out;
reg   [31:0] dst_V_data_V_1_payload_A;
reg   [31:0] dst_V_data_V_1_payload_B;
reg    dst_V_data_V_1_sel_rd;
reg    dst_V_data_V_1_sel_wr;
wire    dst_V_data_V_1_sel;
wire    dst_V_data_V_1_load_A;
wire    dst_V_data_V_1_load_B;
reg   [1:0] dst_V_data_V_1_state;
wire    dst_V_data_V_1_state_cmp_full;
reg   [3:0] dst_V_keep_V_1_data_out;
reg    dst_V_keep_V_1_vld_in;
wire    dst_V_keep_V_1_vld_out;
wire    dst_V_keep_V_1_ack_in;
wire    dst_V_keep_V_1_ack_out;
reg   [3:0] dst_V_keep_V_1_payload_A;
reg   [3:0] dst_V_keep_V_1_payload_B;
reg    dst_V_keep_V_1_sel_rd;
reg    dst_V_keep_V_1_sel_wr;
wire    dst_V_keep_V_1_sel;
wire    dst_V_keep_V_1_load_A;
wire    dst_V_keep_V_1_load_B;
reg   [1:0] dst_V_keep_V_1_state;
wire    dst_V_keep_V_1_state_cmp_full;
reg   [3:0] dst_V_strb_V_1_data_out;
reg    dst_V_strb_V_1_vld_in;
wire    dst_V_strb_V_1_vld_out;
wire    dst_V_strb_V_1_ack_in;
wire    dst_V_strb_V_1_ack_out;
reg   [3:0] dst_V_strb_V_1_payload_A;
reg   [3:0] dst_V_strb_V_1_payload_B;
reg    dst_V_strb_V_1_sel_rd;
reg    dst_V_strb_V_1_sel_wr;
wire    dst_V_strb_V_1_sel;
wire    dst_V_strb_V_1_load_A;
wire    dst_V_strb_V_1_load_B;
reg   [1:0] dst_V_strb_V_1_state;
wire    dst_V_strb_V_1_state_cmp_full;
reg   [0:0] dst_V_user_V_1_data_out;
reg    dst_V_user_V_1_vld_in;
wire    dst_V_user_V_1_vld_out;
wire    dst_V_user_V_1_ack_in;
wire    dst_V_user_V_1_ack_out;
reg   [0:0] dst_V_user_V_1_payload_A;
reg   [0:0] dst_V_user_V_1_payload_B;
reg    dst_V_user_V_1_sel_rd;
reg    dst_V_user_V_1_sel_wr;
wire    dst_V_user_V_1_sel;
wire    dst_V_user_V_1_load_A;
wire    dst_V_user_V_1_load_B;
reg   [1:0] dst_V_user_V_1_state;
wire    dst_V_user_V_1_state_cmp_full;
reg   [0:0] dst_V_last_V_1_data_out;
reg    dst_V_last_V_1_vld_in;
wire    dst_V_last_V_1_vld_out;
wire    dst_V_last_V_1_ack_in;
wire    dst_V_last_V_1_ack_out;
reg   [0:0] dst_V_last_V_1_payload_A;
reg   [0:0] dst_V_last_V_1_payload_B;
reg    dst_V_last_V_1_sel_rd;
reg    dst_V_last_V_1_sel_wr;
wire    dst_V_last_V_1_sel;
wire    dst_V_last_V_1_load_A;
wire    dst_V_last_V_1_load_B;
reg   [1:0] dst_V_last_V_1_state;
wire    dst_V_last_V_1_state_cmp_full;
reg   [0:0] dst_V_id_V_1_data_out;
reg    dst_V_id_V_1_vld_in;
wire    dst_V_id_V_1_vld_out;
wire    dst_V_id_V_1_ack_in;
wire    dst_V_id_V_1_ack_out;
reg   [0:0] dst_V_id_V_1_payload_A;
reg   [0:0] dst_V_id_V_1_payload_B;
reg    dst_V_id_V_1_sel_rd;
reg    dst_V_id_V_1_sel_wr;
wire    dst_V_id_V_1_sel;
wire    dst_V_id_V_1_load_A;
wire    dst_V_id_V_1_load_B;
reg   [1:0] dst_V_id_V_1_state;
wire    dst_V_id_V_1_state_cmp_full;
reg   [0:0] dst_V_dest_V_1_data_out;
reg    dst_V_dest_V_1_vld_in;
wire    dst_V_dest_V_1_vld_out;
wire    dst_V_dest_V_1_ack_in;
wire    dst_V_dest_V_1_ack_out;
reg   [0:0] dst_V_dest_V_1_payload_A;
reg   [0:0] dst_V_dest_V_1_payload_B;
reg    dst_V_dest_V_1_sel_rd;
reg    dst_V_dest_V_1_sel_wr;
wire    dst_V_dest_V_1_sel;
wire    dst_V_dest_V_1_load_A;
wire    dst_V_dest_V_1_load_B;
reg   [1:0] dst_V_dest_V_1_state;
wire    dst_V_dest_V_1_state_cmp_full;
wire   [31:0] mask;
reg   [0:0] guard_variable_for_s;
reg   [31:0] pOut_data_V;
reg   [3:0] pOut_keep_V;
reg   [3:0] pOut_strb_V;
reg   [0:0] pOut_user_V;
reg   [0:0] pOut_last_V;
reg   [0:0] pOut_id_V;
reg   [0:0] pOut_dest_V;
reg   [15:0] y;
reg   [15:0] x;
reg   [15:0] moved_x;
reg   [15:0] moved_y;
reg   [1:0] buf_which;
reg   [13:0] buf_data_address0;
reg    buf_data_ce0;
reg    buf_data_we0;
wire   [0:0] buf_data_q0;
reg    buf_data_ce1;
wire   [0:0] buf_data_q1;
reg    src_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [76:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    dst_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
reg   [15:0] y_assign_reg_247;
reg   [15:0] x_assign_reg_258;
reg   [31:0] tmp_data_V_1_reg_2071;
reg    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state79_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [3:0] tmp_keep_V_1_reg_2079;
reg   [3:0] tmp_strb_V_1_reg_2085;
wire   [0:0] tmp_user_V_1_fu_429_p1;
reg   [0:0] tmp_user_V_1_reg_2091;
reg   [0:0] tmp_user_V_1_reg_2091_pp0_iter1_reg;
reg   [0:0] tmp_last_V_1_reg_2098;
reg   [0:0] tmp_id_V_1_reg_2107;
reg   [0:0] tmp_dest_V_1_reg_2113;
wire   [22:0] tmp_i2_i_fu_543_p2;
reg   [22:0] tmp_i2_i_reg_2119;
wire   [0:0] tmp_15_fu_555_p2;
reg   [0:0] tmp_15_reg_2124;
wire   [21:0] tmp_11_i_i_fu_2065_p2;
reg   [21:0] tmp_11_i_i_reg_2128;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state80_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [13:0] tmp_58_reg_2133;
reg   [1:0] buf_which_load_1_reg_2138;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state81_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [1:0] tmp_i1_fu_584_p2;
reg   [1:0] tmp_i1_reg_2145;
reg   [8:0] tmp_16_reg_2151;
wire   [14:0] tmp_fu_630_p2;
reg   [14:0] tmp_reg_2156;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_block_state82_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [14:0] tmp_30_i_fu_695_p2;
reg   [14:0] tmp_30_i_reg_2199;
wire   [14:0] sum_i_i_fu_763_p2;
reg   [14:0] sum_i_i_reg_2220;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_state83_pp0_stage5_iter1;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_pp0_stage5_11001;
wire   [16:0] tmp_4_fu_768_p2;
reg   [16:0] tmp_4_reg_2225;
wire   [2:0] tmp_8_fu_792_p3;
reg   [2:0] tmp_8_reg_2230;
wire   [0:0] y_flag_1_fu_1063_p2;
wire   [15:0] tmp_1_fu_1101_p2;
reg   [15:0] tmp_1_reg_2239;
wire    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_pp0_stage6_11001;
wire   [63:0] tmp_5_fu_1107_p1;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [16:0] tmp_16_1_fu_1119_p2;
reg   [16:0] tmp_16_1_reg_2249;
wire   [2:0] tmp_19_1_fu_1143_p3;
reg   [2:0] tmp_19_1_reg_2254;
wire   [15:0] tmp_21_1_fu_1154_p2;
reg   [15:0] tmp_21_1_reg_2259;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire   [16:0] tmp_16_2_fu_1168_p2;
reg   [16:0] tmp_16_2_reg_2264;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire   [2:0] tmp_19_2_fu_1192_p3;
reg   [2:0] tmp_19_2_reg_2269;
wire   [15:0] tmp_21_2_fu_1203_p2;
reg   [15:0] tmp_21_2_reg_2274;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire   [63:0] tmp_17_1_fu_1209_p1;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire   [16:0] tmp_16_3_fu_1221_p2;
reg   [16:0] tmp_16_3_reg_2284;
wire   [2:0] tmp_19_3_fu_1245_p3;
reg   [2:0] tmp_19_3_reg_2289;
wire   [15:0] tmp_21_3_fu_1256_p2;
reg   [15:0] tmp_21_3_reg_2294;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
wire   [16:0] tmp_16_4_fu_1270_p2;
reg   [16:0] tmp_16_4_reg_2299;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
wire   [2:0] tmp_19_4_fu_1294_p3;
reg   [2:0] tmp_19_4_reg_2304;
wire   [15:0] tmp_21_4_fu_1305_p2;
reg   [15:0] tmp_21_4_reg_2309;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire   [63:0] tmp_17_2_fu_1311_p1;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_11001;
wire   [16:0] tmp_16_5_fu_1323_p2;
reg   [16:0] tmp_16_5_reg_2319;
wire   [2:0] tmp_19_5_fu_1347_p3;
reg   [2:0] tmp_19_5_reg_2324;
wire   [15:0] tmp_21_5_fu_1358_p2;
reg   [15:0] tmp_21_5_reg_2329;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_11001;
wire   [16:0] tmp_16_6_fu_1372_p2;
reg   [16:0] tmp_16_6_reg_2334;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_11001;
wire   [2:0] tmp_19_6_fu_1396_p3;
reg   [2:0] tmp_19_6_reg_2339;
wire   [15:0] tmp_21_6_fu_1407_p2;
reg   [15:0] tmp_21_6_reg_2344;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_11001;
wire   [63:0] tmp_17_3_fu_1413_p1;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_11001;
wire   [16:0] tmp_16_7_fu_1425_p2;
reg   [16:0] tmp_16_7_reg_2354;
wire   [2:0] tmp_19_7_fu_1449_p3;
reg   [2:0] tmp_19_7_reg_2359;
wire   [15:0] tmp_21_7_fu_1460_p2;
reg   [15:0] tmp_21_7_reg_2364;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_11001;
wire   [16:0] tmp_16_8_fu_1474_p2;
reg   [16:0] tmp_16_8_reg_2369;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_11001;
wire   [2:0] tmp_19_8_fu_1498_p3;
reg   [2:0] tmp_19_8_reg_2374;
wire   [15:0] tmp_21_8_fu_1509_p2;
reg   [15:0] tmp_21_8_reg_2379;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_11001;
wire   [63:0] tmp_17_4_fu_1515_p1;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_11001;
wire   [16:0] tmp_16_9_fu_1527_p2;
reg   [16:0] tmp_16_9_reg_2389;
wire   [2:0] tmp_19_9_fu_1551_p3;
reg   [2:0] tmp_19_9_reg_2394;
wire   [15:0] tmp_21_9_fu_1562_p2;
reg   [15:0] tmp_21_9_reg_2399;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_11001;
wire   [16:0] tmp_16_s_fu_1576_p2;
reg   [16:0] tmp_16_s_reg_2404;
wire    ap_CS_fsm_pp0_stage25;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_block_pp0_stage25_11001;
wire   [2:0] tmp_19_s_fu_1600_p3;
reg   [2:0] tmp_19_s_reg_2409;
wire   [15:0] tmp_21_s_fu_1611_p2;
reg   [15:0] tmp_21_s_reg_2414;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_block_pp0_stage26_11001;
wire   [63:0] tmp_17_5_fu_1617_p1;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_block_pp0_stage27_11001;
wire   [16:0] tmp_16_10_fu_1629_p2;
reg   [16:0] tmp_16_10_reg_2424;
wire   [2:0] tmp_19_10_fu_1653_p3;
reg   [2:0] tmp_19_10_reg_2429;
wire   [15:0] tmp_21_10_fu_1664_p2;
reg   [15:0] tmp_21_10_reg_2434;
wire    ap_CS_fsm_pp0_stage28;
wire    ap_block_state29_pp0_stage28_iter0;
wire    ap_block_pp0_stage28_11001;
wire   [16:0] tmp_16_11_fu_1678_p2;
reg   [16:0] tmp_16_11_reg_2439;
wire    ap_CS_fsm_pp0_stage29;
wire    ap_block_state30_pp0_stage29_iter0;
wire    ap_block_pp0_stage29_11001;
wire   [2:0] tmp_19_11_fu_1702_p3;
reg   [2:0] tmp_19_11_reg_2444;
wire   [15:0] tmp_21_11_fu_1713_p2;
reg   [15:0] tmp_21_11_reg_2449;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_block_state31_pp0_stage30_iter0;
wire    ap_block_pp0_stage30_11001;
wire   [63:0] tmp_17_6_fu_1719_p1;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_state32_pp0_stage31_iter0;
wire    ap_block_pp0_stage31_11001;
wire   [16:0] tmp_16_12_fu_1731_p2;
reg   [16:0] tmp_16_12_reg_2459;
wire   [2:0] tmp_19_12_fu_1755_p3;
reg   [2:0] tmp_19_12_reg_2464;
wire   [15:0] tmp_21_12_fu_1766_p2;
reg   [15:0] tmp_21_12_reg_2469;
wire    ap_CS_fsm_pp0_stage32;
wire    ap_block_state33_pp0_stage32_iter0;
wire    ap_block_pp0_stage32_11001;
wire   [16:0] tmp_16_13_fu_1780_p2;
reg   [16:0] tmp_16_13_reg_2474;
wire    ap_CS_fsm_pp0_stage33;
wire    ap_block_state34_pp0_stage33_iter0;
wire    ap_block_pp0_stage33_11001;
wire   [2:0] tmp_19_13_fu_1804_p3;
reg   [2:0] tmp_19_13_reg_2479;
wire   [15:0] tmp_21_13_fu_1815_p2;
reg   [15:0] tmp_21_13_reg_2484;
wire    ap_CS_fsm_pp0_stage34;
wire    ap_block_state35_pp0_stage34_iter0;
wire    ap_block_pp0_stage34_11001;
wire   [63:0] tmp_17_7_fu_1821_p1;
wire    ap_CS_fsm_pp0_stage35;
wire    ap_block_state36_pp0_stage35_iter0;
wire    ap_block_pp0_stage35_11001;
wire   [16:0] tmp_16_14_fu_1833_p2;
reg   [16:0] tmp_16_14_reg_2494;
wire   [2:0] tmp_19_14_fu_1857_p3;
reg   [2:0] tmp_19_14_reg_2499;
wire   [15:0] tmp_21_14_fu_1868_p2;
reg   [15:0] tmp_21_14_reg_2504;
wire    ap_CS_fsm_pp0_stage36;
wire    ap_block_state37_pp0_stage36_iter0;
wire    ap_block_pp0_stage36_11001;
wire   [16:0] tmp_16_15_fu_1882_p2;
reg   [16:0] tmp_16_15_reg_2509;
wire    ap_CS_fsm_pp0_stage37;
wire    ap_block_state38_pp0_stage37_iter0;
wire    ap_block_pp0_stage37_11001;
wire   [2:0] tmp_19_15_fu_1906_p3;
reg   [2:0] tmp_19_15_reg_2514;
wire   [15:0] tmp_21_15_fu_1917_p2;
reg   [15:0] tmp_21_15_reg_2519;
wire    ap_CS_fsm_pp0_stage38;
wire    ap_block_state39_pp0_stage38_iter0;
wire    ap_block_pp0_stage38_11001;
wire   [63:0] tmp_17_8_fu_1923_p1;
wire    ap_CS_fsm_pp0_stage39;
wire    ap_block_state40_pp0_stage39_iter0;
wire    ap_block_pp0_stage39_11001;
wire   [16:0] tmp_16_16_fu_1935_p2;
reg   [16:0] tmp_16_16_reg_2529;
wire   [2:0] tmp_19_16_fu_1959_p3;
reg   [2:0] tmp_19_16_reg_2534;
wire   [15:0] tmp_21_16_fu_1970_p2;
reg   [15:0] tmp_21_16_reg_2539;
wire    ap_CS_fsm_pp0_stage40;
wire    ap_block_state41_pp0_stage40_iter0;
wire    ap_block_pp0_stage40_11001;
wire   [16:0] tmp_16_17_fu_1984_p2;
reg   [16:0] tmp_16_17_reg_2544;
wire    ap_CS_fsm_pp0_stage41;
wire    ap_block_state42_pp0_stage41_iter0;
wire    ap_block_pp0_stage41_11001;
wire   [2:0] tmp_19_17_fu_2008_p3;
reg   [2:0] tmp_19_17_reg_2549;
wire   [15:0] tmp_21_17_fu_2019_p2;
reg   [15:0] tmp_21_17_reg_2554;
wire    ap_CS_fsm_pp0_stage42;
wire    ap_block_state43_pp0_stage42_iter0;
wire    ap_block_pp0_stage42_11001;
wire   [63:0] tmp_17_9_fu_2025_p1;
wire    ap_CS_fsm_pp0_stage43;
wire    ap_block_state44_pp0_stage43_iter0;
wire    ap_block_pp0_stage43_11001;
wire   [63:0] tmp_17_s_fu_2029_p1;
wire    ap_CS_fsm_pp0_stage47;
wire    ap_block_state48_pp0_stage47_iter0;
wire    ap_block_pp0_stage47_11001;
wire   [63:0] tmp_17_10_fu_2033_p1;
wire    ap_CS_fsm_pp0_stage51;
wire    ap_block_state52_pp0_stage51_iter0;
wire    ap_block_pp0_stage51_11001;
wire   [63:0] tmp_17_11_fu_2037_p1;
wire    ap_CS_fsm_pp0_stage55;
wire    ap_block_state56_pp0_stage55_iter0;
wire    ap_block_pp0_stage55_11001;
wire   [63:0] tmp_17_12_fu_2041_p1;
wire    ap_CS_fsm_pp0_stage59;
wire    ap_block_state60_pp0_stage59_iter0;
wire    ap_block_pp0_stage59_11001;
wire   [63:0] tmp_17_13_fu_2045_p1;
wire    ap_CS_fsm_pp0_stage63;
wire    ap_block_state64_pp0_stage63_iter0;
wire    ap_block_pp0_stage63_11001;
wire   [63:0] tmp_17_14_fu_2049_p1;
wire    ap_CS_fsm_pp0_stage67;
wire    ap_block_state68_pp0_stage67_iter0;
wire    ap_block_pp0_stage67_11001;
wire   [63:0] tmp_17_15_fu_2053_p1;
wire    ap_CS_fsm_pp0_stage71;
wire    ap_block_state72_pp0_stage71_iter0;
wire    ap_block_pp0_stage71_11001;
wire   [63:0] tmp_17_16_fu_2057_p1;
wire    ap_CS_fsm_pp0_stage75;
wire    ap_block_state76_pp0_stage75_iter0;
wire    ap_block_pp0_stage75_11001;
wire   [63:0] tmp_17_17_fu_2061_p1;
reg    ap_block_pp0_stage5_subdone;
wire    ap_block_state77_pp0_stage76_iter0;
wire    ap_block_pp0_stage76_subdone;
wire    ap_CS_fsm_pp0_stage76;
wire    grp_correlatiebeun_fu_388_ap_start;
wire    grp_correlatiebeun_fu_388_ap_done;
wire    grp_correlatiebeun_fu_388_ap_idle;
wire    grp_correlatiebeun_fu_388_ap_ready;
reg    grp_correlatiebeun_fu_388_ap_ce;
reg   [63:0] grp_correlatiebeun_fu_388_a_offset;
reg   [15:0] grp_correlatiebeun_fu_388_b_offset;
reg    grp_correlatiebeun_fu_388_start;
wire   [13:0] grp_correlatiebeun_fu_388_buf_data_address0;
wire    grp_correlatiebeun_fu_388_buf_data_ce0;
wire   [13:0] grp_correlatiebeun_fu_388_buf_data_address1;
wire    grp_correlatiebeun_fu_388_buf_data_ce1;
wire    ap_block_state45_pp0_stage44_iter0_ignore_call116;
wire    ap_block_pp0_stage44_11001;
wire    ap_block_state46_pp0_stage45_iter0_ignore_call116;
wire    ap_block_pp0_stage45_11001;
wire    ap_block_state47_pp0_stage46_iter0_ignore_call116;
wire    ap_block_pp0_stage46_11001;
wire    ap_block_state49_pp0_stage48_iter0_ignore_call128;
wire    ap_block_pp0_stage48_11001;
wire    ap_block_state50_pp0_stage49_iter0_ignore_call128;
wire    ap_block_pp0_stage49_11001;
wire    ap_block_state51_pp0_stage50_iter0_ignore_call128;
wire    ap_block_pp0_stage50_11001;
wire    ap_block_state53_pp0_stage52_iter0_ignore_call140;
wire    ap_block_pp0_stage52_11001;
wire    ap_block_state54_pp0_stage53_iter0_ignore_call140;
wire    ap_block_pp0_stage53_11001;
wire    ap_block_state55_pp0_stage54_iter0_ignore_call140;
wire    ap_block_pp0_stage54_11001;
wire    ap_block_state57_pp0_stage56_iter0_ignore_call152;
wire    ap_block_pp0_stage56_11001;
wire    ap_block_state58_pp0_stage57_iter0_ignore_call152;
wire    ap_block_pp0_stage57_11001;
wire    ap_block_state59_pp0_stage58_iter0_ignore_call152;
wire    ap_block_pp0_stage58_11001;
wire    ap_block_state61_pp0_stage60_iter0_ignore_call164;
wire    ap_block_pp0_stage60_11001;
wire    ap_block_state62_pp0_stage61_iter0_ignore_call164;
wire    ap_block_pp0_stage61_11001;
wire    ap_block_state63_pp0_stage62_iter0_ignore_call164;
wire    ap_block_pp0_stage62_11001;
wire    ap_block_state65_pp0_stage64_iter0_ignore_call176;
wire    ap_block_pp0_stage64_11001;
wire    ap_block_state66_pp0_stage65_iter0_ignore_call176;
wire    ap_block_pp0_stage65_11001;
wire    ap_block_state67_pp0_stage66_iter0_ignore_call176;
wire    ap_block_pp0_stage66_11001;
wire    ap_block_state69_pp0_stage68_iter0_ignore_call188;
wire    ap_block_pp0_stage68_11001;
wire    ap_block_state70_pp0_stage69_iter0_ignore_call188;
wire    ap_block_pp0_stage69_11001;
wire    ap_block_state71_pp0_stage70_iter0_ignore_call188;
wire    ap_block_pp0_stage70_11001;
wire    ap_block_state73_pp0_stage72_iter0_ignore_call200;
wire    ap_block_pp0_stage72_11001;
wire    ap_block_state74_pp0_stage73_iter0_ignore_call200;
wire    ap_block_pp0_stage73_11001;
wire    ap_block_state75_pp0_stage74_iter0_ignore_call200;
wire    ap_block_pp0_stage74_11001;
wire    ap_block_state77_pp0_stage76_iter0_ignore_call212;
wire    ap_block_pp0_stage76_11001;
wire    ap_block_state1_pp0_stage0_iter0_ignore_call212;
wire    ap_block_state78_pp0_stage0_iter1_ignore_call212;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp0_stage44;
wire    ap_CS_fsm_pp0_stage45;
wire    ap_CS_fsm_pp0_stage46;
wire    ap_CS_fsm_pp0_stage48;
wire    ap_CS_fsm_pp0_stage49;
wire    ap_CS_fsm_pp0_stage50;
wire    ap_CS_fsm_pp0_stage52;
wire    ap_CS_fsm_pp0_stage53;
wire    ap_CS_fsm_pp0_stage54;
wire    ap_CS_fsm_pp0_stage56;
wire    ap_CS_fsm_pp0_stage57;
wire    ap_CS_fsm_pp0_stage58;
wire    ap_CS_fsm_pp0_stage60;
wire    ap_CS_fsm_pp0_stage61;
wire    ap_CS_fsm_pp0_stage62;
wire    ap_CS_fsm_pp0_stage64;
wire    ap_CS_fsm_pp0_stage65;
wire    ap_CS_fsm_pp0_stage66;
wire    ap_CS_fsm_pp0_stage68;
wire    ap_CS_fsm_pp0_stage69;
wire    ap_CS_fsm_pp0_stage70;
wire    ap_CS_fsm_pp0_stage72;
wire    ap_CS_fsm_pp0_stage73;
wire    ap_CS_fsm_pp0_stage74;
wire    ap_CS_fsm_pp0_stage0;
reg   [15:0] ap_phi_mux_y_assign_phi_fu_250_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_y_assign_reg_247;
reg   [15:0] ap_phi_mux_x_assign_phi_fu_261_p4;
wire   [15:0] ap_phi_reg_pp0_iter0_x_assign_reg_258;
reg   [31:0] ap_phi_reg_pp0_iter0_tmp_data_V_reg_269;
wire   [0:0] guard_variable_for_s_1_load_fu_636_p1;
reg   [3:0] ap_phi_reg_pp0_iter0_tmp_keep_V_reg_281;
reg   [3:0] ap_phi_reg_pp0_iter0_tmp_strb_V_reg_293;
reg   [0:0] ap_phi_reg_pp0_iter0_tmp_user_V_reg_305;
reg   [0:0] ap_phi_reg_pp0_iter0_tmp_last_V_reg_317;
reg   [0:0] ap_phi_reg_pp0_iter0_tmp_id_V_reg_329;
reg   [0:0] ap_phi_reg_pp0_iter0_tmp_dest_V_reg_341;
reg   [0:0] ap_phi_reg_pp0_iter0_y_flag_reg_353;
reg   [15:0] ap_phi_reg_pp0_iter0_tmp_13_i_reg_366;
wire   [0:0] tmp_12_i_fu_711_p2;
reg   [15:0] ap_phi_reg_pp0_iter0_tmp_17_i_reg_377;
wire   [0:0] tmp_16_i_fu_733_p2;
reg    grp_correlatiebeun_fu_388_ap_start_reg;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage19;
wire    ap_block_pp0_stage23;
wire    ap_block_pp0_stage27;
wire    ap_block_pp0_stage31;
wire    ap_block_pp0_stage35;
wire    ap_block_pp0_stage39;
wire    ap_block_pp0_stage43;
wire    ap_block_pp0_stage47;
wire    ap_block_pp0_stage51;
wire    ap_block_pp0_stage55;
wire    ap_block_pp0_stage59;
wire    ap_block_pp0_stage63;
wire    ap_block_pp0_stage67;
wire    ap_block_pp0_stage71;
wire    ap_block_pp0_stage75;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage8;
wire    ap_block_pp0_stage12;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage20;
wire    ap_block_pp0_stage24;
wire    ap_block_pp0_stage28;
wire    ap_block_pp0_stage32;
wire    ap_block_pp0_stage36;
wire    ap_block_pp0_stage40;
wire    ap_block_pp0_stage44;
wire    ap_block_pp0_stage48;
wire    ap_block_pp0_stage52;
wire    ap_block_pp0_stage56;
wire    ap_block_pp0_stage60;
wire    ap_block_pp0_stage64;
wire    ap_block_pp0_stage68;
wire    ap_block_pp0_stage72;
wire    ap_block_pp0_stage76;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage13;
wire    ap_block_pp0_stage17;
wire    ap_block_pp0_stage21;
wire    ap_block_pp0_stage25;
wire    ap_block_pp0_stage29;
wire    ap_block_pp0_stage33;
wire    ap_block_pp0_stage37;
wire    ap_block_pp0_stage41;
wire    ap_block_pp0_stage45;
wire    ap_block_pp0_stage49;
wire    ap_block_pp0_stage53;
wire    ap_block_pp0_stage57;
wire    ap_block_pp0_stage61;
wire    ap_block_pp0_stage65;
wire    ap_block_pp0_stage69;
wire    ap_block_pp0_stage73;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage4;
wire   [63:0] sum_i_i_cast_fu_1094_p1;
wire   [31:0] pIn_data_V_1_fu_1008_p3;
wire   [15:0] y_new_1_fu_1068_p3;
wire   [15:0] x_new_fu_1075_p3;
wire   [15:0] tmp_7_fu_455_p2;
wire   [15:0] tmp_s_fu_467_p2;
wire   [1:0] tmp_4_i_fu_497_p3;
reg    ap_block_pp0_stage5_01001;
wire    ap_block_pp0_stage6_01001;
wire   [1:0] tmp_i_fu_479_p2;
wire   [0:0] tmp_9_fu_485_p2;
wire   [1:0] tmp_10_fu_491_p2;
wire   [21:0] p_shl_i_i_fu_519_p3;
wire   [19:0] p_shl4_i_i_fu_531_p3;
wire   [22:0] p_shl4_i_i_cast_fu_539_p1;
wire   [22:0] p_shl_i_i_cast_fu_527_p1;
wire   [3:0] tmp_57_fu_515_p1;
wire   [3:0] tmp_11_fu_511_p1;
wire   [3:0] tmp_14_fu_549_p2;
wire   [22:0] mul2_fu_564_p1;
wire   [47:0] mul2_fu_564_p2;
wire   [21:0] mul_fu_593_p1;
wire   [45:0] mul_fu_593_p2;
wire   [10:0] tmp_17_fu_612_p4;
wire   [14:0] tmp_23_i_i_cast_fu_599_p1;
wire   [14:0] p_shl6_i_i_fu_622_p3;
wire   [0:0] tmp_12_fu_674_p2;
wire   [1:0] tmp_13_fu_679_p2;
wire   [1:0] tmp_28_i_fu_684_p3;
wire   [1:0] tmp_30_i_fu_695_p1;
wire   [16:0] tmp_i2_cast_fu_701_p1;
wire   [16:0] tmp_i3_fu_705_p2;
wire   [16:0] tmp_14_i_cast_fu_723_p1;
wire   [16:0] tmp_15_i_fu_727_p2;
wire   [14:0] p_shl5_i_i_fu_751_p3;
wire   [14:0] tmp_26_i_i_fu_758_p2;
wire   [1:0] tmp_4_fu_768_p0;
wire   [2:0] tmp_i1_cast1_fu_745_p1;
wire   [2:0] tmp_6_fu_774_p2;
wire   [0:0] tmp_18_fu_780_p2;
wire   [2:0] tmp_19_fu_786_p2;
wire   [16:0] tmp_20_i_cast_fu_810_p1;
wire   [16:0] tmp_19_i_cast_fu_806_p1;
wire   [16:0] tmp_21_i_fu_814_p2;
wire   [0:0] ult_fu_820_p2;
wire   [16:0] tmp_25_i_cast_fu_842_p1;
wire   [16:0] tmp_24_i_cast_fu_838_p1;
wire   [16:0] tmp_26_i_fu_846_p2;
wire   [16:0] tmp_28_i4_fu_858_p2;
wire   [0:0] ult1_fu_864_p2;
wire   [16:0] tmp_30_i6_fu_876_p2;
wire   [16:0] tmp_32_i_fu_888_p2;
wire   [0:0] ult2_fu_894_p2;
wire   [16:0] tmp_34_i_fu_906_p2;
wire   [7:0] tmp_56_fu_923_p4;
wire   [0:0] tmp_23_i_fu_832_p2;
wire   [0:0] tmp_18_i_fu_800_p2;
wire   [0:0] tmp9_fu_940_p2;
wire   [0:0] rev_fu_826_p2;
wire   [0:0] sel_tmp2_demorgan_i_fu_946_p2;
wire   [0:0] tmp_31_i7_fu_882_p2;
wire   [0:0] sel_tmp2_i_fu_952_p2;
wire   [0:0] tmp1_fu_958_p2;
wire   [0:0] tmp_27_i_fu_852_p2;
wire   [0:0] tmp_35_i_fu_912_p2;
wire   [0:0] rev2_fu_900_p2;
wire   [0:0] tmp3_fu_970_p2;
wire   [0:0] rev1_fu_870_p2;
wire   [0:0] tmp4_fu_976_p2;
wire   [0:0] tmp2_fu_964_p2;
wire   [0:0] sel_tmp5_i_fu_982_p2;
wire   [31:0] tmp_37_i_fu_932_p3;
wire   [31:0] tmp_36_i_fu_918_p2;
wire   [0:0] sel_tmp8_i_fu_996_p2;
wire   [0:0] sel_tmp9_i_fu_1002_p2;
wire   [31:0] sel_tmp6_i_fu_988_p3;
wire   [15:0] tmp_2_fu_1051_p2;
wire   [15:0] tmp_3_fu_1057_p2;
wire   [2:0] tmp_1_fu_1101_p0;
wire   [1:0] tmp_16_1_fu_1119_p0;
wire   [2:0] tmp_15_1_cast1_fu_1111_p1;
wire   [2:0] tmp_18_1_fu_1125_p2;
wire   [0:0] tmp_20_fu_1131_p2;
wire   [2:0] tmp_21_fu_1137_p2;
wire   [2:0] tmp_21_1_fu_1154_p0;
wire   [1:0] tmp_16_2_fu_1168_p0;
wire   [2:0] tmp_15_2_cast1_fu_1160_p1;
wire   [2:0] tmp_18_2_fu_1174_p2;
wire   [0:0] tmp_22_fu_1180_p2;
wire   [2:0] tmp_23_fu_1186_p2;
wire    ap_block_pp0_stage10;
wire   [2:0] tmp_21_2_fu_1203_p0;
wire   [1:0] tmp_16_3_fu_1221_p0;
wire   [2:0] tmp_15_3_cast1_fu_1213_p1;
wire   [2:0] tmp_18_3_fu_1227_p2;
wire   [0:0] tmp_24_fu_1233_p2;
wire   [2:0] tmp_25_fu_1239_p2;
wire   [2:0] tmp_21_3_fu_1256_p0;
wire   [1:0] tmp_16_4_fu_1270_p0;
wire   [2:0] tmp_15_4_cast1_fu_1262_p1;
wire   [2:0] tmp_18_4_fu_1276_p2;
wire   [0:0] tmp_26_fu_1282_p2;
wire   [2:0] tmp_27_fu_1288_p2;
wire    ap_block_pp0_stage14;
wire   [2:0] tmp_21_4_fu_1305_p0;
wire   [1:0] tmp_16_5_fu_1323_p0;
wire   [2:0] tmp_15_5_cast1_fu_1315_p1;
wire   [2:0] tmp_18_5_fu_1329_p2;
wire   [0:0] tmp_28_fu_1335_p2;
wire   [2:0] tmp_29_fu_1341_p2;
wire   [2:0] tmp_21_5_fu_1358_p0;
wire   [1:0] tmp_16_6_fu_1372_p0;
wire   [2:0] tmp_15_6_cast1_fu_1364_p1;
wire   [2:0] tmp_18_6_fu_1378_p2;
wire   [0:0] tmp_30_fu_1384_p2;
wire   [2:0] tmp_31_fu_1390_p2;
wire    ap_block_pp0_stage18;
wire   [2:0] tmp_21_6_fu_1407_p0;
wire   [1:0] tmp_16_7_fu_1425_p0;
wire   [2:0] tmp_15_7_cast1_fu_1417_p1;
wire   [2:0] tmp_18_7_fu_1431_p2;
wire   [0:0] tmp_32_fu_1437_p2;
wire   [2:0] tmp_33_fu_1443_p2;
wire   [2:0] tmp_21_7_fu_1460_p0;
wire   [1:0] tmp_16_8_fu_1474_p0;
wire   [2:0] tmp_15_8_cast1_fu_1466_p1;
wire   [2:0] tmp_18_8_fu_1480_p2;
wire   [0:0] tmp_34_fu_1486_p2;
wire   [2:0] tmp_35_fu_1492_p2;
wire    ap_block_pp0_stage22;
wire   [2:0] tmp_21_8_fu_1509_p0;
wire   [1:0] tmp_16_9_fu_1527_p0;
wire   [2:0] tmp_15_9_cast1_fu_1519_p1;
wire   [2:0] tmp_18_9_fu_1533_p2;
wire   [0:0] tmp_36_fu_1539_p2;
wire   [2:0] tmp_37_fu_1545_p2;
wire   [2:0] tmp_21_9_fu_1562_p0;
wire   [1:0] tmp_16_s_fu_1576_p0;
wire   [2:0] tmp_15_cast1_fu_1568_p1;
wire   [2:0] tmp_18_s_fu_1582_p2;
wire   [0:0] tmp_38_fu_1588_p2;
wire   [2:0] tmp_39_fu_1594_p2;
wire    ap_block_pp0_stage26;
wire   [2:0] tmp_21_s_fu_1611_p0;
wire   [1:0] tmp_16_10_fu_1629_p0;
wire   [2:0] tmp_15_10_cast1_fu_1621_p1;
wire   [2:0] tmp_18_10_fu_1635_p2;
wire   [0:0] tmp_40_fu_1641_p2;
wire   [2:0] tmp_41_fu_1647_p2;
wire   [2:0] tmp_21_10_fu_1664_p0;
wire   [1:0] tmp_16_11_fu_1678_p0;
wire   [2:0] tmp_15_11_cast1_fu_1670_p1;
wire   [2:0] tmp_18_11_fu_1684_p2;
wire   [0:0] tmp_42_fu_1690_p2;
wire   [2:0] tmp_43_fu_1696_p2;
wire    ap_block_pp0_stage30;
wire   [2:0] tmp_21_11_fu_1713_p0;
wire   [1:0] tmp_16_12_fu_1731_p0;
wire   [2:0] tmp_15_12_cast1_fu_1723_p1;
wire   [2:0] tmp_18_12_fu_1737_p2;
wire   [0:0] tmp_44_fu_1743_p2;
wire   [2:0] tmp_45_fu_1749_p2;
wire   [2:0] tmp_21_12_fu_1766_p0;
wire   [1:0] tmp_16_13_fu_1780_p0;
wire   [2:0] tmp_15_13_cast1_fu_1772_p1;
wire   [2:0] tmp_18_13_fu_1786_p2;
wire   [0:0] tmp_46_fu_1792_p2;
wire   [2:0] tmp_47_fu_1798_p2;
wire    ap_block_pp0_stage34;
wire   [2:0] tmp_21_13_fu_1815_p0;
wire   [1:0] tmp_16_14_fu_1833_p0;
wire   [2:0] tmp_15_14_cast1_fu_1825_p1;
wire   [2:0] tmp_18_14_fu_1839_p2;
wire   [0:0] tmp_48_fu_1845_p2;
wire   [2:0] tmp_49_fu_1851_p2;
wire   [2:0] tmp_21_14_fu_1868_p0;
wire   [1:0] tmp_16_15_fu_1882_p0;
wire   [2:0] tmp_15_15_cast1_fu_1874_p1;
wire   [2:0] tmp_18_15_fu_1888_p2;
wire   [0:0] tmp_50_fu_1894_p2;
wire   [2:0] tmp_51_fu_1900_p2;
wire    ap_block_pp0_stage38;
wire   [2:0] tmp_21_15_fu_1917_p0;
wire   [1:0] tmp_16_16_fu_1935_p0;
wire   [2:0] tmp_15_16_cast1_fu_1927_p1;
wire   [2:0] tmp_18_16_fu_1941_p2;
wire   [0:0] tmp_52_fu_1947_p2;
wire   [2:0] tmp_53_fu_1953_p2;
wire   [2:0] tmp_21_16_fu_1970_p0;
wire   [1:0] tmp_16_17_fu_1984_p0;
wire   [2:0] tmp_15_17_cast1_fu_1976_p1;
wire   [2:0] tmp_18_17_fu_1990_p2;
wire   [0:0] tmp_54_fu_1996_p2;
wire   [2:0] tmp_55_fu_2002_p2;
wire    ap_block_pp0_stage42;
wire   [2:0] tmp_21_17_fu_2019_p0;
wire   [6:0] tmp_11_i_i_fu_2065_p0;
wire   [15:0] tmp_11_i_i_fu_2065_p1;
reg   [76:0] ap_NS_fsm;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state78_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_reset_idle_pp0;
reg    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_pp0_stage36_subdone;
wire    ap_block_pp0_stage37_subdone;
wire    ap_block_pp0_stage38_subdone;
wire    ap_block_pp0_stage39_subdone;
wire    ap_block_pp0_stage40_subdone;
wire    ap_block_pp0_stage41_subdone;
wire    ap_block_pp0_stage42_subdone;
wire    ap_block_pp0_stage43_subdone;
wire    ap_block_state45_pp0_stage44_iter0;
wire    ap_block_pp0_stage44_subdone;
wire    ap_block_state46_pp0_stage45_iter0;
wire    ap_block_pp0_stage45_subdone;
wire    ap_block_state47_pp0_stage46_iter0;
wire    ap_block_pp0_stage46_subdone;
wire    ap_block_pp0_stage47_subdone;
wire    ap_block_state49_pp0_stage48_iter0;
wire    ap_block_pp0_stage48_subdone;
wire    ap_block_state50_pp0_stage49_iter0;
wire    ap_block_pp0_stage49_subdone;
wire    ap_block_state51_pp0_stage50_iter0;
wire    ap_block_pp0_stage50_subdone;
wire    ap_block_pp0_stage51_subdone;
wire    ap_block_state53_pp0_stage52_iter0;
wire    ap_block_pp0_stage52_subdone;
wire    ap_block_state54_pp0_stage53_iter0;
wire    ap_block_pp0_stage53_subdone;
wire    ap_block_state55_pp0_stage54_iter0;
wire    ap_block_pp0_stage54_subdone;
wire    ap_block_pp0_stage55_subdone;
wire    ap_block_state57_pp0_stage56_iter0;
wire    ap_block_pp0_stage56_subdone;
wire    ap_block_state58_pp0_stage57_iter0;
wire    ap_block_pp0_stage57_subdone;
wire    ap_block_state59_pp0_stage58_iter0;
wire    ap_block_pp0_stage58_subdone;
wire    ap_block_pp0_stage59_subdone;
wire    ap_block_state61_pp0_stage60_iter0;
wire    ap_block_pp0_stage60_subdone;
wire    ap_block_state62_pp0_stage61_iter0;
wire    ap_block_pp0_stage61_subdone;
wire    ap_block_state63_pp0_stage62_iter0;
wire    ap_block_pp0_stage62_subdone;
wire    ap_block_pp0_stage63_subdone;
wire    ap_block_state65_pp0_stage64_iter0;
wire    ap_block_pp0_stage64_subdone;
wire    ap_block_state66_pp0_stage65_iter0;
wire    ap_block_pp0_stage65_subdone;
wire    ap_block_state67_pp0_stage66_iter0;
wire    ap_block_pp0_stage66_subdone;
wire    ap_block_pp0_stage67_subdone;
wire    ap_block_state69_pp0_stage68_iter0;
wire    ap_block_pp0_stage68_subdone;
wire    ap_block_state70_pp0_stage69_iter0;
wire    ap_block_pp0_stage69_subdone;
wire    ap_block_state71_pp0_stage70_iter0;
wire    ap_block_pp0_stage70_subdone;
wire    ap_block_pp0_stage71_subdone;
wire    ap_block_state73_pp0_stage72_iter0;
wire    ap_block_pp0_stage72_subdone;
wire    ap_block_state74_pp0_stage73_iter0;
wire    ap_block_pp0_stage73_subdone;
wire    ap_block_state75_pp0_stage74_iter0;
wire    ap_block_pp0_stage74_subdone;
wire    ap_block_pp0_stage75_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [47:0] mul2_fu_564_p10;
wire   [45:0] mul_fu_593_p10;
wire   [21:0] tmp_11_i_i_fu_2065_p10;
wire   [16:0] tmp_16_10_fu_1629_p00;
wire   [16:0] tmp_16_11_fu_1678_p00;
wire   [16:0] tmp_16_12_fu_1731_p00;
wire   [16:0] tmp_16_13_fu_1780_p00;
wire   [16:0] tmp_16_14_fu_1833_p00;
wire   [16:0] tmp_16_15_fu_1882_p00;
wire   [16:0] tmp_16_16_fu_1935_p00;
wire   [16:0] tmp_16_17_fu_1984_p00;
wire   [16:0] tmp_16_1_fu_1119_p00;
wire   [16:0] tmp_16_2_fu_1168_p00;
wire   [16:0] tmp_16_3_fu_1221_p00;
wire   [16:0] tmp_16_4_fu_1270_p00;
wire   [16:0] tmp_16_5_fu_1323_p00;
wire   [16:0] tmp_16_6_fu_1372_p00;
wire   [16:0] tmp_16_7_fu_1425_p00;
wire   [16:0] tmp_16_8_fu_1474_p00;
wire   [16:0] tmp_16_9_fu_1527_p00;
wire   [16:0] tmp_16_s_fu_1576_p00;
wire   [15:0] tmp_1_fu_1101_p00;
wire   [15:0] tmp_21_10_fu_1664_p00;
wire   [15:0] tmp_21_11_fu_1713_p00;
wire   [15:0] tmp_21_12_fu_1766_p00;
wire   [15:0] tmp_21_13_fu_1815_p00;
wire   [15:0] tmp_21_14_fu_1868_p00;
wire   [15:0] tmp_21_15_fu_1917_p00;
wire   [15:0] tmp_21_16_fu_1970_p00;
wire   [15:0] tmp_21_17_fu_2019_p00;
wire   [15:0] tmp_21_1_fu_1154_p00;
wire   [15:0] tmp_21_2_fu_1203_p00;
wire   [15:0] tmp_21_3_fu_1256_p00;
wire   [15:0] tmp_21_4_fu_1305_p00;
wire   [15:0] tmp_21_5_fu_1358_p00;
wire   [15:0] tmp_21_6_fu_1407_p00;
wire   [15:0] tmp_21_7_fu_1460_p00;
wire   [15:0] tmp_21_8_fu_1509_p00;
wire   [15:0] tmp_21_9_fu_1562_p00;
wire   [15:0] tmp_21_s_fu_1611_p00;
wire   [14:0] tmp_30_i_fu_695_p10;
wire   [16:0] tmp_4_fu_768_p00;
reg    ap_condition_941;
reg    ap_condition_1122;
reg    ap_condition_2125;
reg    ap_condition_4271;
reg    ap_condition_4274;
reg    ap_condition_4277;

// power-on initialization
initial begin
#0 src_V_data_V_0_sel_rd = 1'b0;
#0 src_V_data_V_0_sel_wr = 1'b0;
#0 src_V_data_V_0_state = 2'd0;
#0 src_V_keep_V_0_sel_rd = 1'b0;
#0 src_V_keep_V_0_sel_wr = 1'b0;
#0 src_V_keep_V_0_state = 2'd0;
#0 src_V_strb_V_0_sel_rd = 1'b0;
#0 src_V_strb_V_0_sel_wr = 1'b0;
#0 src_V_strb_V_0_state = 2'd0;
#0 src_V_user_V_0_sel_rd = 1'b0;
#0 src_V_user_V_0_sel_wr = 1'b0;
#0 src_V_user_V_0_state = 2'd0;
#0 src_V_last_V_0_sel_rd = 1'b0;
#0 src_V_last_V_0_sel_wr = 1'b0;
#0 src_V_last_V_0_state = 2'd0;
#0 src_V_id_V_0_sel_rd = 1'b0;
#0 src_V_id_V_0_sel_wr = 1'b0;
#0 src_V_id_V_0_state = 2'd0;
#0 src_V_dest_V_0_sel_rd = 1'b0;
#0 src_V_dest_V_0_sel_wr = 1'b0;
#0 src_V_dest_V_0_state = 2'd0;
#0 dst_V_data_V_1_sel_rd = 1'b0;
#0 dst_V_data_V_1_sel_wr = 1'b0;
#0 dst_V_data_V_1_state = 2'd0;
#0 dst_V_keep_V_1_sel_rd = 1'b0;
#0 dst_V_keep_V_1_sel_wr = 1'b0;
#0 dst_V_keep_V_1_state = 2'd0;
#0 dst_V_strb_V_1_sel_rd = 1'b0;
#0 dst_V_strb_V_1_sel_wr = 1'b0;
#0 dst_V_strb_V_1_state = 2'd0;
#0 dst_V_user_V_1_sel_rd = 1'b0;
#0 dst_V_user_V_1_sel_wr = 1'b0;
#0 dst_V_user_V_1_state = 2'd0;
#0 dst_V_last_V_1_sel_rd = 1'b0;
#0 dst_V_last_V_1_sel_wr = 1'b0;
#0 dst_V_last_V_1_state = 2'd0;
#0 dst_V_id_V_1_sel_rd = 1'b0;
#0 dst_V_id_V_1_sel_wr = 1'b0;
#0 dst_V_id_V_1_state = 2'd0;
#0 dst_V_dest_V_1_sel_rd = 1'b0;
#0 dst_V_dest_V_1_sel_wr = 1'b0;
#0 dst_V_dest_V_1_state = 2'd0;
#0 guard_variable_for_s = 1'd0;
#0 pOut_data_V = 32'd0;
#0 pOut_keep_V = 4'd0;
#0 pOut_strb_V = 4'd0;
#0 pOut_user_V = 1'd0;
#0 pOut_last_V = 1'd0;
#0 pOut_id_V = 1'd0;
#0 pOut_dest_V = 1'd0;
#0 y = 16'd0;
#0 x = 16'd0;
#0 moved_x = 16'd640;
#0 moved_y = 16'd360;
#0 buf_which = 2'd0;
#0 ap_CS_fsm = 77'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_correlatiebeun_fu_388_ap_start_reg = 1'b0;
end

stream_buf_data #(
    .DataWidth( 1 ),
    .AddressRange( 10800 ),
    .AddressWidth( 14 ))
buf_data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(buf_data_address0),
    .ce0(buf_data_ce0),
    .we0(buf_data_we0),
    .d0(1'd0),
    .q0(buf_data_q0),
    .address1(grp_correlatiebeun_fu_388_buf_data_address1),
    .ce1(buf_data_ce1),
    .q1(buf_data_q1)
);

stream_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
stream_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .mask(mask)
);

correlatiebeun grp_correlatiebeun_fu_388(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_correlatiebeun_fu_388_ap_start),
    .ap_done(grp_correlatiebeun_fu_388_ap_done),
    .ap_idle(grp_correlatiebeun_fu_388_ap_idle),
    .ap_ready(grp_correlatiebeun_fu_388_ap_ready),
    .ap_ce(grp_correlatiebeun_fu_388_ap_ce),
    .a_offset(grp_correlatiebeun_fu_388_a_offset),
    .b_offset(grp_correlatiebeun_fu_388_b_offset),
    .start(grp_correlatiebeun_fu_388_start),
    .buf_data_address0(grp_correlatiebeun_fu_388_buf_data_address0),
    .buf_data_ce0(grp_correlatiebeun_fu_388_buf_data_ce0),
    .buf_data_q0(buf_data_q0),
    .buf_data_address1(grp_correlatiebeun_fu_388_buf_data_address1),
    .buf_data_ce1(grp_correlatiebeun_fu_388_buf_data_ce1),
    .buf_data_q1(buf_data_q1)
);

stream_mul_mul_7nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 7 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 22 ))
stream_mul_mul_7nbkb_U5(
    .din0(tmp_11_i_i_fu_2065_p0),
    .din1(tmp_11_i_i_fu_2065_p1),
    .dout(tmp_11_i_i_fu_2065_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage76) & (1'b0 == ap_block_pp0_stage76_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end else if (((1'b1 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_data_V_1_ack_out == 1'b1) & (dst_V_data_V_1_vld_out == 1'b1))) begin
            dst_V_data_V_1_sel_rd <= ~dst_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_data_V_1_ack_in == 1'b1) & (dst_V_data_V_1_vld_in == 1'b1))) begin
            dst_V_data_V_1_sel_wr <= ~dst_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_data_V_1_vld_in == 1'b0) & (dst_V_data_V_1_state == 2'd2)) | ((dst_V_data_V_1_vld_in == 1'b0) & (dst_V_data_V_1_ack_out == 1'b1) & (dst_V_data_V_1_state == 2'd3)))) begin
            dst_V_data_V_1_state <= 2'd2;
        end else if ((((dst_V_data_V_1_ack_out == 1'b0) & (dst_V_data_V_1_state == 2'd1)) | ((dst_V_data_V_1_ack_out == 1'b0) & (dst_V_data_V_1_vld_in == 1'b1) & (dst_V_data_V_1_state == 2'd3)))) begin
            dst_V_data_V_1_state <= 2'd1;
        end else if (((~((dst_V_data_V_1_vld_in == 1'b0) & (dst_V_data_V_1_ack_out == 1'b1)) & ~((dst_V_data_V_1_ack_out == 1'b0) & (dst_V_data_V_1_vld_in == 1'b1)) & (dst_V_data_V_1_state == 2'd3)) | ((dst_V_data_V_1_ack_out == 1'b1) & (dst_V_data_V_1_state == 2'd1)) | ((dst_V_data_V_1_vld_in == 1'b1) & (dst_V_data_V_1_state == 2'd2)))) begin
            dst_V_data_V_1_state <= 2'd3;
        end else begin
            dst_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_dest_V_1_ack_out == 1'b1) & (dst_V_dest_V_1_vld_out == 1'b1))) begin
            dst_V_dest_V_1_sel_rd <= ~dst_V_dest_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_dest_V_1_ack_in == 1'b1) & (dst_V_dest_V_1_vld_in == 1'b1))) begin
            dst_V_dest_V_1_sel_wr <= ~dst_V_dest_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_dest_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_dest_V_1_vld_in == 1'b0) & (dst_V_dest_V_1_state == 2'd2)) | ((dst_V_dest_V_1_vld_in == 1'b0) & (dst_V_dest_V_1_ack_out == 1'b1) & (dst_V_dest_V_1_state == 2'd3)))) begin
            dst_V_dest_V_1_state <= 2'd2;
        end else if ((((dst_V_dest_V_1_ack_out == 1'b0) & (dst_V_dest_V_1_state == 2'd1)) | ((dst_V_dest_V_1_ack_out == 1'b0) & (dst_V_dest_V_1_vld_in == 1'b1) & (dst_V_dest_V_1_state == 2'd3)))) begin
            dst_V_dest_V_1_state <= 2'd1;
        end else if (((~((dst_V_dest_V_1_vld_in == 1'b0) & (dst_V_dest_V_1_ack_out == 1'b1)) & ~((dst_V_dest_V_1_ack_out == 1'b0) & (dst_V_dest_V_1_vld_in == 1'b1)) & (dst_V_dest_V_1_state == 2'd3)) | ((dst_V_dest_V_1_ack_out == 1'b1) & (dst_V_dest_V_1_state == 2'd1)) | ((dst_V_dest_V_1_vld_in == 1'b1) & (dst_V_dest_V_1_state == 2'd2)))) begin
            dst_V_dest_V_1_state <= 2'd3;
        end else begin
            dst_V_dest_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_id_V_1_ack_out == 1'b1) & (dst_V_id_V_1_vld_out == 1'b1))) begin
            dst_V_id_V_1_sel_rd <= ~dst_V_id_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_id_V_1_ack_in == 1'b1) & (dst_V_id_V_1_vld_in == 1'b1))) begin
            dst_V_id_V_1_sel_wr <= ~dst_V_id_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_id_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_id_V_1_vld_in == 1'b0) & (dst_V_id_V_1_state == 2'd2)) | ((dst_V_id_V_1_vld_in == 1'b0) & (dst_V_id_V_1_ack_out == 1'b1) & (dst_V_id_V_1_state == 2'd3)))) begin
            dst_V_id_V_1_state <= 2'd2;
        end else if ((((dst_V_id_V_1_ack_out == 1'b0) & (dst_V_id_V_1_state == 2'd1)) | ((dst_V_id_V_1_ack_out == 1'b0) & (dst_V_id_V_1_vld_in == 1'b1) & (dst_V_id_V_1_state == 2'd3)))) begin
            dst_V_id_V_1_state <= 2'd1;
        end else if (((~((dst_V_id_V_1_vld_in == 1'b0) & (dst_V_id_V_1_ack_out == 1'b1)) & ~((dst_V_id_V_1_ack_out == 1'b0) & (dst_V_id_V_1_vld_in == 1'b1)) & (dst_V_id_V_1_state == 2'd3)) | ((dst_V_id_V_1_ack_out == 1'b1) & (dst_V_id_V_1_state == 2'd1)) | ((dst_V_id_V_1_vld_in == 1'b1) & (dst_V_id_V_1_state == 2'd2)))) begin
            dst_V_id_V_1_state <= 2'd3;
        end else begin
            dst_V_id_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_keep_V_1_ack_out == 1'b1) & (dst_V_keep_V_1_vld_out == 1'b1))) begin
            dst_V_keep_V_1_sel_rd <= ~dst_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_keep_V_1_ack_in == 1'b1) & (dst_V_keep_V_1_vld_in == 1'b1))) begin
            dst_V_keep_V_1_sel_wr <= ~dst_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_keep_V_1_vld_in == 1'b0) & (dst_V_keep_V_1_state == 2'd2)) | ((dst_V_keep_V_1_vld_in == 1'b0) & (dst_V_keep_V_1_ack_out == 1'b1) & (dst_V_keep_V_1_state == 2'd3)))) begin
            dst_V_keep_V_1_state <= 2'd2;
        end else if ((((dst_V_keep_V_1_ack_out == 1'b0) & (dst_V_keep_V_1_state == 2'd1)) | ((dst_V_keep_V_1_ack_out == 1'b0) & (dst_V_keep_V_1_vld_in == 1'b1) & (dst_V_keep_V_1_state == 2'd3)))) begin
            dst_V_keep_V_1_state <= 2'd1;
        end else if (((~((dst_V_keep_V_1_vld_in == 1'b0) & (dst_V_keep_V_1_ack_out == 1'b1)) & ~((dst_V_keep_V_1_ack_out == 1'b0) & (dst_V_keep_V_1_vld_in == 1'b1)) & (dst_V_keep_V_1_state == 2'd3)) | ((dst_V_keep_V_1_ack_out == 1'b1) & (dst_V_keep_V_1_state == 2'd1)) | ((dst_V_keep_V_1_vld_in == 1'b1) & (dst_V_keep_V_1_state == 2'd2)))) begin
            dst_V_keep_V_1_state <= 2'd3;
        end else begin
            dst_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_last_V_1_ack_out == 1'b1) & (dst_V_last_V_1_vld_out == 1'b1))) begin
            dst_V_last_V_1_sel_rd <= ~dst_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_last_V_1_ack_in == 1'b1) & (dst_V_last_V_1_vld_in == 1'b1))) begin
            dst_V_last_V_1_sel_wr <= ~dst_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_last_V_1_vld_in == 1'b0) & (dst_V_last_V_1_state == 2'd2)) | ((dst_V_last_V_1_vld_in == 1'b0) & (dst_V_last_V_1_ack_out == 1'b1) & (dst_V_last_V_1_state == 2'd3)))) begin
            dst_V_last_V_1_state <= 2'd2;
        end else if ((((dst_V_last_V_1_ack_out == 1'b0) & (dst_V_last_V_1_state == 2'd1)) | ((dst_V_last_V_1_ack_out == 1'b0) & (dst_V_last_V_1_vld_in == 1'b1) & (dst_V_last_V_1_state == 2'd3)))) begin
            dst_V_last_V_1_state <= 2'd1;
        end else if (((~((dst_V_last_V_1_vld_in == 1'b0) & (dst_V_last_V_1_ack_out == 1'b1)) & ~((dst_V_last_V_1_ack_out == 1'b0) & (dst_V_last_V_1_vld_in == 1'b1)) & (dst_V_last_V_1_state == 2'd3)) | ((dst_V_last_V_1_ack_out == 1'b1) & (dst_V_last_V_1_state == 2'd1)) | ((dst_V_last_V_1_vld_in == 1'b1) & (dst_V_last_V_1_state == 2'd2)))) begin
            dst_V_last_V_1_state <= 2'd3;
        end else begin
            dst_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_strb_V_1_ack_out == 1'b1) & (dst_V_strb_V_1_vld_out == 1'b1))) begin
            dst_V_strb_V_1_sel_rd <= ~dst_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_strb_V_1_ack_in == 1'b1) & (dst_V_strb_V_1_vld_in == 1'b1))) begin
            dst_V_strb_V_1_sel_wr <= ~dst_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_strb_V_1_vld_in == 1'b0) & (dst_V_strb_V_1_state == 2'd2)) | ((dst_V_strb_V_1_vld_in == 1'b0) & (dst_V_strb_V_1_ack_out == 1'b1) & (dst_V_strb_V_1_state == 2'd3)))) begin
            dst_V_strb_V_1_state <= 2'd2;
        end else if ((((dst_V_strb_V_1_ack_out == 1'b0) & (dst_V_strb_V_1_state == 2'd1)) | ((dst_V_strb_V_1_ack_out == 1'b0) & (dst_V_strb_V_1_vld_in == 1'b1) & (dst_V_strb_V_1_state == 2'd3)))) begin
            dst_V_strb_V_1_state <= 2'd1;
        end else if (((~((dst_V_strb_V_1_vld_in == 1'b0) & (dst_V_strb_V_1_ack_out == 1'b1)) & ~((dst_V_strb_V_1_ack_out == 1'b0) & (dst_V_strb_V_1_vld_in == 1'b1)) & (dst_V_strb_V_1_state == 2'd3)) | ((dst_V_strb_V_1_ack_out == 1'b1) & (dst_V_strb_V_1_state == 2'd1)) | ((dst_V_strb_V_1_vld_in == 1'b1) & (dst_V_strb_V_1_state == 2'd2)))) begin
            dst_V_strb_V_1_state <= 2'd3;
        end else begin
            dst_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((dst_V_user_V_1_ack_out == 1'b1) & (dst_V_user_V_1_vld_out == 1'b1))) begin
            dst_V_user_V_1_sel_rd <= ~dst_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((dst_V_user_V_1_ack_in == 1'b1) & (dst_V_user_V_1_vld_in == 1'b1))) begin
            dst_V_user_V_1_sel_wr <= ~dst_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        dst_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((dst_V_user_V_1_vld_in == 1'b0) & (dst_V_user_V_1_state == 2'd2)) | ((dst_V_user_V_1_vld_in == 1'b0) & (dst_V_user_V_1_ack_out == 1'b1) & (dst_V_user_V_1_state == 2'd3)))) begin
            dst_V_user_V_1_state <= 2'd2;
        end else if ((((dst_V_user_V_1_ack_out == 1'b0) & (dst_V_user_V_1_state == 2'd1)) | ((dst_V_user_V_1_ack_out == 1'b0) & (dst_V_user_V_1_vld_in == 1'b1) & (dst_V_user_V_1_state == 2'd3)))) begin
            dst_V_user_V_1_state <= 2'd1;
        end else if (((~((dst_V_user_V_1_vld_in == 1'b0) & (dst_V_user_V_1_ack_out == 1'b1)) & ~((dst_V_user_V_1_ack_out == 1'b0) & (dst_V_user_V_1_vld_in == 1'b1)) & (dst_V_user_V_1_state == 2'd3)) | ((dst_V_user_V_1_ack_out == 1'b1) & (dst_V_user_V_1_state == 2'd1)) | ((dst_V_user_V_1_vld_in == 1'b1) & (dst_V_user_V_1_state == 2'd2)))) begin
            dst_V_user_V_1_state <= 2'd3;
        end else begin
            dst_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_correlatiebeun_fu_388_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage74) & (1'b0 == ap_block_pp0_stage74_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage70) & (1'b0 == ap_block_pp0_stage70_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage66) & (1'b0 == ap_block_pp0_stage66_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage62) & (1'b0 == ap_block_pp0_stage62_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage58) & (1'b0 == ap_block_pp0_stage58_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage54) & (1'b0 == ap_block_pp0_stage54_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage50) & (1'b0 == ap_block_pp0_stage50_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage46) & (1'b0 == ap_block_pp0_stage46_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage42) & (1'b0 == ap_block_pp0_stage42_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage38) & (1'b0 == ap_block_pp0_stage38_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage34) & (1'b0 == ap_block_pp0_stage34_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage30) & (1'b0 == ap_block_pp0_stage30_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
            grp_correlatiebeun_fu_388_ap_start_reg <= 1'b1;
        end else if ((grp_correlatiebeun_fu_388_ap_ready == 1'b1)) begin
            grp_correlatiebeun_fu_388_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_data_V_0_ack_out == 1'b1) & (src_V_data_V_0_vld_out == 1'b1))) begin
            src_V_data_V_0_sel_rd <= ~src_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_data_V_0_ack_in == 1'b1) & (src_V_data_V_0_vld_in == 1'b1))) begin
            src_V_data_V_0_sel_wr <= ~src_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_data_V_0_vld_in == 1'b0) & (src_V_data_V_0_state == 2'd2)) | ((src_V_data_V_0_vld_in == 1'b0) & (src_V_data_V_0_ack_out == 1'b1) & (src_V_data_V_0_state == 2'd3)))) begin
            src_V_data_V_0_state <= 2'd2;
        end else if ((((src_V_data_V_0_ack_out == 1'b0) & (src_V_data_V_0_state == 2'd1)) | ((src_V_data_V_0_ack_out == 1'b0) & (src_V_data_V_0_vld_in == 1'b1) & (src_V_data_V_0_state == 2'd3)))) begin
            src_V_data_V_0_state <= 2'd1;
        end else if (((~((src_V_data_V_0_vld_in == 1'b0) & (src_V_data_V_0_ack_out == 1'b1)) & ~((src_V_data_V_0_ack_out == 1'b0) & (src_V_data_V_0_vld_in == 1'b1)) & (src_V_data_V_0_state == 2'd3)) | ((src_V_data_V_0_ack_out == 1'b1) & (src_V_data_V_0_state == 2'd1)) | ((src_V_data_V_0_vld_in == 1'b1) & (src_V_data_V_0_state == 2'd2)))) begin
            src_V_data_V_0_state <= 2'd3;
        end else begin
            src_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_dest_V_0_ack_out == 1'b1) & (src_V_dest_V_0_vld_out == 1'b1))) begin
            src_V_dest_V_0_sel_rd <= ~src_V_dest_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_dest_V_0_ack_in == 1'b1) & (src_V_dest_V_0_vld_in == 1'b1))) begin
            src_V_dest_V_0_sel_wr <= ~src_V_dest_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_dest_V_0_vld_in == 1'b0) & (src_V_dest_V_0_state == 2'd2)) | ((src_V_dest_V_0_vld_in == 1'b0) & (src_V_dest_V_0_ack_out == 1'b1) & (src_V_dest_V_0_state == 2'd3)))) begin
            src_V_dest_V_0_state <= 2'd2;
        end else if ((((src_V_dest_V_0_ack_out == 1'b0) & (src_V_dest_V_0_state == 2'd1)) | ((src_V_dest_V_0_ack_out == 1'b0) & (src_V_dest_V_0_vld_in == 1'b1) & (src_V_dest_V_0_state == 2'd3)))) begin
            src_V_dest_V_0_state <= 2'd1;
        end else if (((~((src_V_dest_V_0_vld_in == 1'b0) & (src_V_dest_V_0_ack_out == 1'b1)) & ~((src_V_dest_V_0_ack_out == 1'b0) & (src_V_dest_V_0_vld_in == 1'b1)) & (src_V_dest_V_0_state == 2'd3)) | ((src_V_dest_V_0_ack_out == 1'b1) & (src_V_dest_V_0_state == 2'd1)) | ((src_V_dest_V_0_vld_in == 1'b1) & (src_V_dest_V_0_state == 2'd2)))) begin
            src_V_dest_V_0_state <= 2'd3;
        end else begin
            src_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_id_V_0_ack_out == 1'b1) & (src_V_id_V_0_vld_out == 1'b1))) begin
            src_V_id_V_0_sel_rd <= ~src_V_id_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_id_V_0_ack_in == 1'b1) & (src_V_id_V_0_vld_in == 1'b1))) begin
            src_V_id_V_0_sel_wr <= ~src_V_id_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_id_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_id_V_0_vld_in == 1'b0) & (src_V_id_V_0_state == 2'd2)) | ((src_V_id_V_0_vld_in == 1'b0) & (src_V_id_V_0_ack_out == 1'b1) & (src_V_id_V_0_state == 2'd3)))) begin
            src_V_id_V_0_state <= 2'd2;
        end else if ((((src_V_id_V_0_ack_out == 1'b0) & (src_V_id_V_0_state == 2'd1)) | ((src_V_id_V_0_ack_out == 1'b0) & (src_V_id_V_0_vld_in == 1'b1) & (src_V_id_V_0_state == 2'd3)))) begin
            src_V_id_V_0_state <= 2'd1;
        end else if (((~((src_V_id_V_0_vld_in == 1'b0) & (src_V_id_V_0_ack_out == 1'b1)) & ~((src_V_id_V_0_ack_out == 1'b0) & (src_V_id_V_0_vld_in == 1'b1)) & (src_V_id_V_0_state == 2'd3)) | ((src_V_id_V_0_ack_out == 1'b1) & (src_V_id_V_0_state == 2'd1)) | ((src_V_id_V_0_vld_in == 1'b1) & (src_V_id_V_0_state == 2'd2)))) begin
            src_V_id_V_0_state <= 2'd3;
        end else begin
            src_V_id_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_keep_V_0_ack_out == 1'b1) & (src_V_keep_V_0_vld_out == 1'b1))) begin
            src_V_keep_V_0_sel_rd <= ~src_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_keep_V_0_ack_in == 1'b1) & (src_V_keep_V_0_vld_in == 1'b1))) begin
            src_V_keep_V_0_sel_wr <= ~src_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_keep_V_0_vld_in == 1'b0) & (src_V_keep_V_0_state == 2'd2)) | ((src_V_keep_V_0_vld_in == 1'b0) & (src_V_keep_V_0_ack_out == 1'b1) & (src_V_keep_V_0_state == 2'd3)))) begin
            src_V_keep_V_0_state <= 2'd2;
        end else if ((((src_V_keep_V_0_ack_out == 1'b0) & (src_V_keep_V_0_state == 2'd1)) | ((src_V_keep_V_0_ack_out == 1'b0) & (src_V_keep_V_0_vld_in == 1'b1) & (src_V_keep_V_0_state == 2'd3)))) begin
            src_V_keep_V_0_state <= 2'd1;
        end else if (((~((src_V_keep_V_0_vld_in == 1'b0) & (src_V_keep_V_0_ack_out == 1'b1)) & ~((src_V_keep_V_0_ack_out == 1'b0) & (src_V_keep_V_0_vld_in == 1'b1)) & (src_V_keep_V_0_state == 2'd3)) | ((src_V_keep_V_0_ack_out == 1'b1) & (src_V_keep_V_0_state == 2'd1)) | ((src_V_keep_V_0_vld_in == 1'b1) & (src_V_keep_V_0_state == 2'd2)))) begin
            src_V_keep_V_0_state <= 2'd3;
        end else begin
            src_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_last_V_0_ack_out == 1'b1) & (src_V_last_V_0_vld_out == 1'b1))) begin
            src_V_last_V_0_sel_rd <= ~src_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_last_V_0_ack_in == 1'b1) & (src_V_last_V_0_vld_in == 1'b1))) begin
            src_V_last_V_0_sel_wr <= ~src_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_last_V_0_vld_in == 1'b0) & (src_V_last_V_0_state == 2'd2)) | ((src_V_last_V_0_vld_in == 1'b0) & (src_V_last_V_0_ack_out == 1'b1) & (src_V_last_V_0_state == 2'd3)))) begin
            src_V_last_V_0_state <= 2'd2;
        end else if ((((src_V_last_V_0_ack_out == 1'b0) & (src_V_last_V_0_state == 2'd1)) | ((src_V_last_V_0_ack_out == 1'b0) & (src_V_last_V_0_vld_in == 1'b1) & (src_V_last_V_0_state == 2'd3)))) begin
            src_V_last_V_0_state <= 2'd1;
        end else if (((~((src_V_last_V_0_vld_in == 1'b0) & (src_V_last_V_0_ack_out == 1'b1)) & ~((src_V_last_V_0_ack_out == 1'b0) & (src_V_last_V_0_vld_in == 1'b1)) & (src_V_last_V_0_state == 2'd3)) | ((src_V_last_V_0_ack_out == 1'b1) & (src_V_last_V_0_state == 2'd1)) | ((src_V_last_V_0_vld_in == 1'b1) & (src_V_last_V_0_state == 2'd2)))) begin
            src_V_last_V_0_state <= 2'd3;
        end else begin
            src_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_strb_V_0_ack_out == 1'b1) & (src_V_strb_V_0_vld_out == 1'b1))) begin
            src_V_strb_V_0_sel_rd <= ~src_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_strb_V_0_ack_in == 1'b1) & (src_V_strb_V_0_vld_in == 1'b1))) begin
            src_V_strb_V_0_sel_wr <= ~src_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_strb_V_0_vld_in == 1'b0) & (src_V_strb_V_0_state == 2'd2)) | ((src_V_strb_V_0_vld_in == 1'b0) & (src_V_strb_V_0_ack_out == 1'b1) & (src_V_strb_V_0_state == 2'd3)))) begin
            src_V_strb_V_0_state <= 2'd2;
        end else if ((((src_V_strb_V_0_ack_out == 1'b0) & (src_V_strb_V_0_state == 2'd1)) | ((src_V_strb_V_0_ack_out == 1'b0) & (src_V_strb_V_0_vld_in == 1'b1) & (src_V_strb_V_0_state == 2'd3)))) begin
            src_V_strb_V_0_state <= 2'd1;
        end else if (((~((src_V_strb_V_0_vld_in == 1'b0) & (src_V_strb_V_0_ack_out == 1'b1)) & ~((src_V_strb_V_0_ack_out == 1'b0) & (src_V_strb_V_0_vld_in == 1'b1)) & (src_V_strb_V_0_state == 2'd3)) | ((src_V_strb_V_0_ack_out == 1'b1) & (src_V_strb_V_0_state == 2'd1)) | ((src_V_strb_V_0_vld_in == 1'b1) & (src_V_strb_V_0_state == 2'd2)))) begin
            src_V_strb_V_0_state <= 2'd3;
        end else begin
            src_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((src_V_user_V_0_ack_out == 1'b1) & (src_V_user_V_0_vld_out == 1'b1))) begin
            src_V_user_V_0_sel_rd <= ~src_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((src_V_user_V_0_ack_in == 1'b1) & (src_V_user_V_0_vld_in == 1'b1))) begin
            src_V_user_V_0_sel_wr <= ~src_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        src_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((src_V_user_V_0_vld_in == 1'b0) & (src_V_user_V_0_state == 2'd2)) | ((src_V_user_V_0_vld_in == 1'b0) & (src_V_user_V_0_ack_out == 1'b1) & (src_V_user_V_0_state == 2'd3)))) begin
            src_V_user_V_0_state <= 2'd2;
        end else if ((((src_V_user_V_0_ack_out == 1'b0) & (src_V_user_V_0_state == 2'd1)) | ((src_V_user_V_0_ack_out == 1'b0) & (src_V_user_V_0_vld_in == 1'b1) & (src_V_user_V_0_state == 2'd3)))) begin
            src_V_user_V_0_state <= 2'd1;
        end else if (((~((src_V_user_V_0_vld_in == 1'b0) & (src_V_user_V_0_ack_out == 1'b1)) & ~((src_V_user_V_0_ack_out == 1'b0) & (src_V_user_V_0_vld_in == 1'b1)) & (src_V_user_V_0_state == 2'd3)) | ((src_V_user_V_0_ack_out == 1'b1) & (src_V_user_V_0_state == 2'd1)) | ((src_V_user_V_0_vld_in == 1'b1) & (src_V_user_V_0_state == 2'd2)))) begin
            src_V_user_V_0_state <= 2'd3;
        end else begin
            src_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1122)) begin
        if ((tmp_12_i_fu_711_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_13_i_reg_366 <= moved_x;
        end else if ((tmp_12_i_fu_711_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_13_i_reg_366 <= 16'd640;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1122)) begin
        if ((tmp_16_i_fu_733_p2 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_17_i_reg_377 <= moved_y;
        end else if ((tmp_16_i_fu_733_p2 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_17_i_reg_377 <= 16'd360;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1122)) begin
        if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_data_V_reg_269 <= pOut_data_V;
        end else if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_data_V_reg_269 <= tmp_data_V_1_reg_2071;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1122)) begin
        if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_dest_V_reg_341 <= pOut_dest_V;
        end else if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_dest_V_reg_341 <= tmp_dest_V_1_reg_2113;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1122)) begin
        if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_id_V_reg_329 <= pOut_id_V;
        end else if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_id_V_reg_329 <= tmp_id_V_1_reg_2107;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1122)) begin
        if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_keep_V_reg_281 <= pOut_keep_V;
        end else if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_keep_V_reg_281 <= tmp_keep_V_1_reg_2079;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1122)) begin
        if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_last_V_reg_317 <= pOut_last_V;
        end else if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_last_V_reg_317 <= tmp_last_V_1_reg_2098;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1122)) begin
        if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_strb_V_reg_293 <= pOut_strb_V;
        end else if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_strb_V_reg_293 <= tmp_strb_V_1_reg_2085;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_1122)) begin
        if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_tmp_user_V_reg_305 <= pOut_user_V;
        end else if ((guard_variable_for_s_1_load_fu_636_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_tmp_user_V_reg_305 <= tmp_user_V_1_reg_2091;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_2125)) begin
        if ((tmp_user_V_1_fu_429_p1 == 1'd0)) begin
            ap_phi_reg_pp0_iter0_y_flag_reg_353 <= 1'd0;
        end else if ((tmp_user_V_1_fu_429_p1 == 1'd1)) begin
            ap_phi_reg_pp0_iter0_y_flag_reg_353 <= 1'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        if ((1'b1 == ap_condition_4274)) begin
            moved_x <= 16'd640;
        end else if ((1'b1 == ap_condition_4271)) begin
            moved_x <= tmp_7_fu_455_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == 1'b1)) begin
        if ((1'b1 == ap_condition_4277)) begin
            moved_y <= 16'd360;
        end else if ((1'b1 == ap_condition_4271)) begin
            moved_y <= tmp_s_fu_467_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_2125)) begin
        if ((tmp_user_V_1_fu_429_p1 == 1'd0)) begin
            x_assign_reg_258 <= x;
        end else if ((tmp_user_V_1_fu_429_p1 == 1'd1)) begin
            x_assign_reg_258 <= 16'd0;
        end else if ((1'b1 == 1'b1)) begin
            x_assign_reg_258 <= ap_phi_reg_pp0_iter0_x_assign_reg_258;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_2125)) begin
        if ((tmp_user_V_1_fu_429_p1 == 1'd0)) begin
            y_assign_reg_247 <= y;
        end else if ((tmp_user_V_1_fu_429_p1 == 1'd1)) begin
            y_assign_reg_247 <= 16'd0;
        end else if ((1'b1 == 1'b1)) begin
            y_assign_reg_247 <= ap_phi_reg_pp0_iter0_y_assign_reg_247;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_user_V_1_fu_429_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        buf_which <= tmp_4_i_fu_497_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        buf_which_load_1_reg_2138 <= buf_which;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_data_V_1_load_A == 1'b1)) begin
        dst_V_data_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_data_V_1_load_B == 1'b1)) begin
        dst_V_data_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_data_V_reg_269;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_dest_V_1_load_A == 1'b1)) begin
        dst_V_dest_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_dest_V_reg_341;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_dest_V_1_load_B == 1'b1)) begin
        dst_V_dest_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_dest_V_reg_341;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_id_V_1_load_A == 1'b1)) begin
        dst_V_id_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_id_V_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_id_V_1_load_B == 1'b1)) begin
        dst_V_id_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_id_V_reg_329;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_keep_V_1_load_A == 1'b1)) begin
        dst_V_keep_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_keep_V_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_keep_V_1_load_B == 1'b1)) begin
        dst_V_keep_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_keep_V_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_last_V_1_load_A == 1'b1)) begin
        dst_V_last_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_last_V_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_last_V_1_load_B == 1'b1)) begin
        dst_V_last_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_last_V_reg_317;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_strb_V_1_load_A == 1'b1)) begin
        dst_V_strb_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_strb_V_reg_293;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_strb_V_1_load_B == 1'b1)) begin
        dst_V_strb_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_strb_V_reg_293;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_user_V_1_load_A == 1'b1)) begin
        dst_V_user_V_1_payload_A <= ap_phi_reg_pp0_iter0_tmp_user_V_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if ((dst_V_user_V_1_load_B == 1'b1)) begin
        dst_V_user_V_1_payload_B <= ap_phi_reg_pp0_iter0_tmp_user_V_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (guard_variable_for_s_1_load_fu_636_p1 == 1'd0))) begin
        guard_variable_for_s <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        pOut_data_V <= pIn_data_V_1_fu_1008_p3;
        pOut_dest_V <= tmp_dest_V_1_reg_2113;
        pOut_id_V <= tmp_id_V_1_reg_2107;
        pOut_keep_V <= tmp_keep_V_1_reg_2079;
        pOut_last_V <= tmp_last_V_1_reg_2098;
        pOut_strb_V <= tmp_strb_V_1_reg_2085;
        pOut_user_V <= tmp_user_V_1_reg_2091;
        x <= x_new_fu_1075_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_data_V_0_load_A == 1'b1)) begin
        src_V_data_V_0_payload_A <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_data_V_0_load_B == 1'b1)) begin
        src_V_data_V_0_payload_B <= src_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_dest_V_0_load_A == 1'b1)) begin
        src_V_dest_V_0_payload_A <= src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_dest_V_0_load_B == 1'b1)) begin
        src_V_dest_V_0_payload_B <= src_TDEST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_id_V_0_load_A == 1'b1)) begin
        src_V_id_V_0_payload_A <= src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_id_V_0_load_B == 1'b1)) begin
        src_V_id_V_0_payload_B <= src_TID;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_keep_V_0_load_A == 1'b1)) begin
        src_V_keep_V_0_payload_A <= src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_keep_V_0_load_B == 1'b1)) begin
        src_V_keep_V_0_payload_B <= src_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_last_V_0_load_A == 1'b1)) begin
        src_V_last_V_0_payload_A <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_last_V_0_load_B == 1'b1)) begin
        src_V_last_V_0_payload_B <= src_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_strb_V_0_load_A == 1'b1)) begin
        src_V_strb_V_0_payload_A <= src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_strb_V_0_load_B == 1'b1)) begin
        src_V_strb_V_0_payload_B <= src_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_user_V_0_load_A == 1'b1)) begin
        src_V_user_V_0_payload_A <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((src_V_user_V_0_load_B == 1'b1)) begin
        src_V_user_V_0_payload_B <= src_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (tmp_15_reg_2124 == 1'd1))) begin
        sum_i_i_reg_2220 <= sum_i_i_fu_763_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_11_i_i_reg_2128 <= tmp_11_i_i_fu_2065_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_15_reg_2124 <= tmp_15_fu_555_p2;
        tmp_data_V_1_reg_2071 <= src_V_data_V_0_data_out;
        tmp_dest_V_1_reg_2113 <= src_V_dest_V_0_data_out;
        tmp_i2_i_reg_2119[22 : 4] <= tmp_i2_i_fu_543_p2[22 : 4];
        tmp_id_V_1_reg_2107 <= src_V_id_V_0_data_out;
        tmp_keep_V_1_reg_2079 <= src_V_keep_V_0_data_out;
        tmp_last_V_1_reg_2098 <= src_V_last_V_0_data_out;
        tmp_strb_V_1_reg_2085 <= src_V_strb_V_0_data_out;
        tmp_user_V_1_reg_2091 <= src_V_user_V_0_data_out;
        tmp_user_V_1_reg_2091_pp0_iter1_reg <= tmp_user_V_1_reg_2091;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27_11001))) begin
        tmp_16_10_reg_2424[16 : 4] <= tmp_16_10_fu_1629_p2[16 : 4];
        tmp_19_10_reg_2429 <= tmp_19_10_fu_1653_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage29) & (1'b0 == ap_block_pp0_stage29_11001))) begin
        tmp_16_11_reg_2439[16 : 4] <= tmp_16_11_fu_1678_p2[16 : 4];
        tmp_19_11_reg_2444 <= tmp_19_11_fu_1702_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31_11001))) begin
        tmp_16_12_reg_2459[16 : 4] <= tmp_16_12_fu_1731_p2[16 : 4];
        tmp_19_12_reg_2464 <= tmp_19_12_fu_1755_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage33) & (1'b0 == ap_block_pp0_stage33_11001))) begin
        tmp_16_13_reg_2474[16 : 4] <= tmp_16_13_fu_1780_p2[16 : 4];
        tmp_19_13_reg_2479 <= tmp_19_13_fu_1804_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35_11001))) begin
        tmp_16_14_reg_2494[16 : 4] <= tmp_16_14_fu_1833_p2[16 : 4];
        tmp_19_14_reg_2499 <= tmp_19_14_fu_1857_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage37) & (1'b0 == ap_block_pp0_stage37_11001))) begin
        tmp_16_15_reg_2509[16 : 4] <= tmp_16_15_fu_1882_p2[16 : 4];
        tmp_19_15_reg_2514 <= tmp_19_15_fu_1906_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage39) & (1'b0 == ap_block_pp0_stage39_11001))) begin
        tmp_16_16_reg_2529[16 : 4] <= tmp_16_16_fu_1935_p2[16 : 4];
        tmp_19_16_reg_2534 <= tmp_19_16_fu_1959_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage41) & (1'b0 == ap_block_pp0_stage41_11001))) begin
        tmp_16_17_reg_2544[16 : 4] <= tmp_16_17_fu_1984_p2[16 : 4];
        tmp_19_17_reg_2549 <= tmp_19_17_fu_2008_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001))) begin
        tmp_16_1_reg_2249[16 : 4] <= tmp_16_1_fu_1119_p2[16 : 4];
        tmp_19_1_reg_2254 <= tmp_19_1_fu_1143_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001))) begin
        tmp_16_2_reg_2264[16 : 4] <= tmp_16_2_fu_1168_p2[16 : 4];
        tmp_19_2_reg_2269 <= tmp_19_2_fu_1192_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001))) begin
        tmp_16_3_reg_2284[16 : 4] <= tmp_16_3_fu_1221_p2[16 : 4];
        tmp_19_3_reg_2289 <= tmp_19_3_fu_1245_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001))) begin
        tmp_16_4_reg_2299[16 : 4] <= tmp_16_4_fu_1270_p2[16 : 4];
        tmp_19_4_reg_2304 <= tmp_19_4_fu_1294_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001))) begin
        tmp_16_5_reg_2319[16 : 4] <= tmp_16_5_fu_1323_p2[16 : 4];
        tmp_19_5_reg_2324 <= tmp_19_5_fu_1347_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001))) begin
        tmp_16_6_reg_2334[16 : 4] <= tmp_16_6_fu_1372_p2[16 : 4];
        tmp_19_6_reg_2339 <= tmp_19_6_fu_1396_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001))) begin
        tmp_16_7_reg_2354[16 : 4] <= tmp_16_7_fu_1425_p2[16 : 4];
        tmp_19_7_reg_2359 <= tmp_19_7_fu_1449_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001))) begin
        tmp_16_8_reg_2369[16 : 4] <= tmp_16_8_fu_1474_p2[16 : 4];
        tmp_19_8_reg_2374 <= tmp_19_8_fu_1498_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001))) begin
        tmp_16_9_reg_2389[16 : 4] <= tmp_16_9_fu_1527_p2[16 : 4];
        tmp_19_9_reg_2394 <= tmp_19_9_fu_1551_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (tmp_15_reg_2124 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_16_reg_2151 <= {{mul_fu_593_p2[40:32]}};
        tmp_reg_2156 <= tmp_fu_630_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25_11001))) begin
        tmp_16_s_reg_2404[16 : 4] <= tmp_16_s_fu_1576_p2[16 : 4];
        tmp_19_s_reg_2409 <= tmp_19_s_fu_1600_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        tmp_1_reg_2239[15 : 4] <= tmp_1_fu_1101_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28_11001))) begin
        tmp_21_10_reg_2434[15 : 4] <= tmp_21_10_fu_1664_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage30) & (1'b0 == ap_block_pp0_stage30_11001))) begin
        tmp_21_11_reg_2449[15 : 4] <= tmp_21_11_fu_1713_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage32) & (1'b0 == ap_block_pp0_stage32_11001))) begin
        tmp_21_12_reg_2469[15 : 4] <= tmp_21_12_fu_1766_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage34) & (1'b0 == ap_block_pp0_stage34_11001))) begin
        tmp_21_13_reg_2484[15 : 4] <= tmp_21_13_fu_1815_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36_11001))) begin
        tmp_21_14_reg_2504[15 : 4] <= tmp_21_14_fu_1868_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage38) & (1'b0 == ap_block_pp0_stage38_11001))) begin
        tmp_21_15_reg_2519[15 : 4] <= tmp_21_15_fu_1917_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage40) & (1'b0 == ap_block_pp0_stage40_11001))) begin
        tmp_21_16_reg_2539[15 : 4] <= tmp_21_16_fu_1970_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage42) & (1'b0 == ap_block_pp0_stage42_11001))) begin
        tmp_21_17_reg_2554[15 : 4] <= tmp_21_17_fu_2019_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001))) begin
        tmp_21_1_reg_2259[15 : 4] <= tmp_21_1_fu_1154_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001))) begin
        tmp_21_2_reg_2274[15 : 4] <= tmp_21_2_fu_1203_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001))) begin
        tmp_21_3_reg_2294[15 : 4] <= tmp_21_3_fu_1256_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001))) begin
        tmp_21_4_reg_2309[15 : 4] <= tmp_21_4_fu_1305_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001))) begin
        tmp_21_5_reg_2329[15 : 4] <= tmp_21_5_fu_1358_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001))) begin
        tmp_21_6_reg_2344[15 : 4] <= tmp_21_6_fu_1407_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001))) begin
        tmp_21_7_reg_2364[15 : 4] <= tmp_21_7_fu_1460_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001))) begin
        tmp_21_8_reg_2379[15 : 4] <= tmp_21_8_fu_1509_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001))) begin
        tmp_21_9_reg_2399[15 : 4] <= tmp_21_9_fu_1562_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26_11001))) begin
        tmp_21_s_reg_2414[15 : 4] <= tmp_21_s_fu_1611_p2[15 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_30_i_reg_2199 <= tmp_30_i_fu_695_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        tmp_4_reg_2225[16 : 4] <= tmp_4_fu_768_p2[16 : 4];
        tmp_8_reg_2230 <= tmp_8_fu_792_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (tmp_15_reg_2124 == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_58_reg_2133 <= {{mul2_fu_564_p2[47:34]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_i1_reg_2145 <= tmp_i1_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (y_flag_1_fu_1063_p2 == 1'd1))) begin
        y <= y_new_1_fu_1068_p3;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_941)) begin
        if ((tmp_user_V_1_fu_429_p1 == 1'd0)) begin
            ap_phi_mux_x_assign_phi_fu_261_p4 = x;
        end else if ((tmp_user_V_1_fu_429_p1 == 1'd1)) begin
            ap_phi_mux_x_assign_phi_fu_261_p4 = 16'd0;
        end else begin
            ap_phi_mux_x_assign_phi_fu_261_p4 = ap_phi_reg_pp0_iter0_x_assign_reg_258;
        end
    end else begin
        ap_phi_mux_x_assign_phi_fu_261_p4 = ap_phi_reg_pp0_iter0_x_assign_reg_258;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_941)) begin
        if ((tmp_user_V_1_fu_429_p1 == 1'd0)) begin
            ap_phi_mux_y_assign_phi_fu_250_p4 = y;
        end else if ((tmp_user_V_1_fu_429_p1 == 1'd1)) begin
            ap_phi_mux_y_assign_phi_fu_250_p4 = 16'd0;
        end else begin
            ap_phi_mux_y_assign_phi_fu_250_p4 = ap_phi_reg_pp0_iter0_y_assign_reg_247;
        end
    end else begin
        ap_phi_mux_y_assign_phi_fu_250_p4 = ap_phi_reg_pp0_iter0_y_assign_reg_247;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1))) begin
        buf_data_address0 = sum_i_i_cast_fu_1094_p1;
    end else if ((((1'b0 == ap_block_pp0_stage73) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage73)) | ((1'b0 == ap_block_pp0_stage72) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage72)) | ((1'b0 == ap_block_pp0_stage69) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage69)) | ((1'b0 == ap_block_pp0_stage68) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage68)) | ((1'b0 == ap_block_pp0_stage65) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage65)) | ((1'b0 == ap_block_pp0_stage64) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage64)) | ((1'b0 == ap_block_pp0_stage61) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage61)) | ((1'b0 == ap_block_pp0_stage60) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage60)) | ((1'b0 == ap_block_pp0_stage57) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage57)) | ((1'b0 == ap_block_pp0_stage56) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage56)) | ((1'b0 == ap_block_pp0_stage53) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage53)) | ((1'b0 == ap_block_pp0_stage52) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage52)) | ((1'b0 == ap_block_pp0_stage49) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage49)) | ((1'b0 == ap_block_pp0_stage48) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage48)) | ((1'b0 == ap_block_pp0_stage45) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage45)) | ((1'b0 == ap_block_pp0_stage44) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage44)) | ((1'b0 == ap_block_pp0_stage76) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage76)) | ((1'b0 == ap_block_pp0_stage41) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage41)) | ((1'b0 == ap_block_pp0_stage40) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage40)) | ((1'b0 == ap_block_pp0_stage37) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37)) | ((1'b0 == ap_block_pp0_stage36) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36)) | ((1'b0 == ap_block_pp0_stage33) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage33)) | ((1'b0 == ap_block_pp0_stage32) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage29) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b0 == ap_block_pp0_stage28) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage25) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage24) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24)) | ((1'b0 == ap_block_pp0_stage21) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage20) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage17) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b0 == ap_block_pp0_stage16) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage13) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage9) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        buf_data_address0 = grp_correlatiebeun_fu_388_buf_data_address0;
    end else begin
        buf_data_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001))) begin
        buf_data_ce0 = 1'b1;
    end else if ((((1'b0 == ap_block_pp0_stage73) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage73)) | ((1'b0 == ap_block_pp0_stage72) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage72)) | ((1'b0 == ap_block_pp0_stage69) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage69)) | ((1'b0 == ap_block_pp0_stage68) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage68)) | ((1'b0 == ap_block_pp0_stage65) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage65)) | ((1'b0 == ap_block_pp0_stage64) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage64)) | ((1'b0 == ap_block_pp0_stage61) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage61)) | ((1'b0 == ap_block_pp0_stage60) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage60)) | ((1'b0 == ap_block_pp0_stage57) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage57)) | ((1'b0 == ap_block_pp0_stage56) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage56)) | ((1'b0 == ap_block_pp0_stage53) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage53)) | ((1'b0 == ap_block_pp0_stage52) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage52)) | ((1'b0 == ap_block_pp0_stage49) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage49)) | ((1'b0 == ap_block_pp0_stage48) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage48)) | ((1'b0 == ap_block_pp0_stage45) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage45)) | ((1'b0 == ap_block_pp0_stage44) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage44)) | ((1'b0 == ap_block_pp0_stage76) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage76)) | ((1'b0 == ap_block_pp0_stage41) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage41)) | ((1'b0 == ap_block_pp0_stage40) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage40)) | ((1'b0 == ap_block_pp0_stage37) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37)) | ((1'b0 == ap_block_pp0_stage36) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36)) | ((1'b0 == ap_block_pp0_stage33) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage33)) | ((1'b0 == ap_block_pp0_stage32) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage29) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b0 == ap_block_pp0_stage28) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage25) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage24) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24)) | ((1'b0 == ap_block_pp0_stage21) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage20) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage17) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b0 == ap_block_pp0_stage16) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage13) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage9) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        buf_data_ce0 = grp_correlatiebeun_fu_388_buf_data_ce0;
    end else begin
        buf_data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage73) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage73)) | ((1'b0 == ap_block_pp0_stage72) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage72)) | ((1'b0 == ap_block_pp0_stage69) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage69)) | ((1'b0 == ap_block_pp0_stage68) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage68)) | ((1'b0 == ap_block_pp0_stage65) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage65)) | ((1'b0 == ap_block_pp0_stage64) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage64)) | ((1'b0 == ap_block_pp0_stage61) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage61)) | ((1'b0 == ap_block_pp0_stage60) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage60)) | ((1'b0 == ap_block_pp0_stage57) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage57)) | ((1'b0 == ap_block_pp0_stage56) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage56)) | ((1'b0 == ap_block_pp0_stage53) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage53)) | ((1'b0 == ap_block_pp0_stage52) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage52)) | ((1'b0 == ap_block_pp0_stage49) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage49)) | ((1'b0 == ap_block_pp0_stage48) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage48)) | ((1'b0 == ap_block_pp0_stage45) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage45)) | ((1'b0 == ap_block_pp0_stage44) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage44)) | ((1'b0 == ap_block_pp0_stage76) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage76)) | ((1'b0 == ap_block_pp0_stage41) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage41)) | ((1'b0 == ap_block_pp0_stage40) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage40)) | ((1'b0 == ap_block_pp0_stage37) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage37)) | ((1'b0 == ap_block_pp0_stage36) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36)) | ((1'b0 == ap_block_pp0_stage33) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage33)) | ((1'b0 == ap_block_pp0_stage32) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32)) | ((1'b0 == ap_block_pp0_stage29) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage29)) | ((1'b0 == ap_block_pp0_stage28) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28)) | ((1'b0 == ap_block_pp0_stage25) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage25)) | ((1'b0 == ap_block_pp0_stage24) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24)) | ((1'b0 == ap_block_pp0_stage21) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage21)) | ((1'b0 == ap_block_pp0_stage20) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage17) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage17)) | ((1'b0 == ap_block_pp0_stage16) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage16)) | ((1'b0 == ap_block_pp0_stage13) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage9) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage8) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        buf_data_ce1 = grp_correlatiebeun_fu_388_buf_data_ce1;
    end else begin
        buf_data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (tmp_15_reg_2124 == 1'd1))) begin
        buf_data_we0 = 1'b1;
    end else begin
        buf_data_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1)))) begin
        dst_TDATA_blk_n = dst_V_data_V_1_state[1'd1];
    end else begin
        dst_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((dst_V_data_V_1_sel == 1'b1)) begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_B;
    end else begin
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        dst_V_data_V_1_vld_in = 1'b1;
    end else begin
        dst_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_dest_V_1_sel == 1'b1)) begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_B;
    end else begin
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        dst_V_dest_V_1_vld_in = 1'b1;
    end else begin
        dst_V_dest_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_id_V_1_sel == 1'b1)) begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_B;
    end else begin
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        dst_V_id_V_1_vld_in = 1'b1;
    end else begin
        dst_V_id_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_keep_V_1_sel == 1'b1)) begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_B;
    end else begin
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        dst_V_keep_V_1_vld_in = 1'b1;
    end else begin
        dst_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_last_V_1_sel == 1'b1)) begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_B;
    end else begin
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        dst_V_last_V_1_vld_in = 1'b1;
    end else begin
        dst_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_strb_V_1_sel == 1'b1)) begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_B;
    end else begin
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        dst_V_strb_V_1_vld_in = 1'b1;
    end else begin
        dst_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((dst_V_user_V_1_sel == 1'b1)) begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_B;
    end else begin
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        dst_V_user_V_1_vld_in = 1'b1;
    end else begin
        dst_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_17_fu_2061_p1;
    end else if (((1'b0 == ap_block_pp0_stage75) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage75))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_16_fu_2057_p1;
    end else if (((1'b0 == ap_block_pp0_stage71) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage71))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_15_fu_2053_p1;
    end else if (((1'b0 == ap_block_pp0_stage67) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage67))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_14_fu_2049_p1;
    end else if (((1'b0 == ap_block_pp0_stage63) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage63))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_13_fu_2045_p1;
    end else if (((1'b0 == ap_block_pp0_stage59) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage59))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_12_fu_2041_p1;
    end else if (((1'b0 == ap_block_pp0_stage55) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage55))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_11_fu_2037_p1;
    end else if (((1'b0 == ap_block_pp0_stage51) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage51))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_10_fu_2033_p1;
    end else if (((1'b0 == ap_block_pp0_stage47) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage47))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_s_fu_2029_p1;
    end else if (((1'b0 == ap_block_pp0_stage43) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage43))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_9_fu_2025_p1;
    end else if (((1'b0 == ap_block_pp0_stage39) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_8_fu_1923_p1;
    end else if (((1'b0 == ap_block_pp0_stage35) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage35))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_7_fu_1821_p1;
    end else if (((1'b0 == ap_block_pp0_stage31) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_6_fu_1719_p1;
    end else if (((1'b0 == ap_block_pp0_stage27) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_5_fu_1617_p1;
    end else if (((1'b0 == ap_block_pp0_stage23) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_4_fu_1515_p1;
    end else if (((1'b0 == ap_block_pp0_stage19) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_3_fu_1413_p1;
    end else if (((1'b0 == ap_block_pp0_stage15) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_2_fu_1311_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_17_1_fu_1209_p1;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_correlatiebeun_fu_388_a_offset = tmp_5_fu_1107_p1;
    end else begin
        grp_correlatiebeun_fu_388_a_offset = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage74) & (1'b0 == ap_block_pp0_stage74_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage73) & (1'b0 == ap_block_pp0_stage73_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage72) & (1'b0 == ap_block_pp0_stage72_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage70) & (1'b0 == ap_block_pp0_stage70_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage69) & (1'b0 == ap_block_pp0_stage69_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage68) & (1'b0 == ap_block_pp0_stage68_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage66) & (1'b0 == ap_block_pp0_stage66_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage65) & (1'b0 == ap_block_pp0_stage65_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage64) & (1'b0 == ap_block_pp0_stage64_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage62) & (1'b0 == ap_block_pp0_stage62_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage61) & (1'b0 == ap_block_pp0_stage61_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage60) & (1'b0 == ap_block_pp0_stage60_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage58) & (1'b0 == ap_block_pp0_stage58_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage57) & (1'b0 == ap_block_pp0_stage57_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage56) & (1'b0 == ap_block_pp0_stage56_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage54) & (1'b0 == ap_block_pp0_stage54_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage53) & (1'b0 == ap_block_pp0_stage53_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage52) & (1'b0 == ap_block_pp0_stage52_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage50) & (1'b0 == ap_block_pp0_stage50_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage49) & (1'b0 == ap_block_pp0_stage49_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage48) & (1'b0 == ap_block_pp0_stage48_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage46) & (1'b0 == ap_block_pp0_stage46_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage45) & (1'b0 == ap_block_pp0_stage45_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage44) & (1'b0 == ap_block_pp0_stage44_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage76) & (1'b0 == ap_block_pp0_stage76_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage75) & (1'b0 == ap_block_pp0_stage75_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage71) & (1'b0 == ap_block_pp0_stage71_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage67) & (1'b0 == ap_block_pp0_stage67_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage63) & (1'b0 == ap_block_pp0_stage63_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage59) & (1'b0 == ap_block_pp0_stage59_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage55) & (1'b0 == ap_block_pp0_stage55_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage51) & (1'b0 == ap_block_pp0_stage51_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage47) & (1'b0 == ap_block_pp0_stage47_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage43) & (1'b0 == ap_block_pp0_stage43_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage42) & (1'b0 == ap_block_pp0_stage42_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage41) & (1'b0 == ap_block_pp0_stage41_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage40) & (1'b0 == ap_block_pp0_stage40_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage39) & (1'b0 == ap_block_pp0_stage39_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage38) & (1'b0 == ap_block_pp0_stage38_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage37) & (1'b0 == ap_block_pp0_stage37_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage35) & (1'b0 == ap_block_pp0_stage35_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage34) & (1'b0 == ap_block_pp0_stage34_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage33) & (1'b0 == ap_block_pp0_stage33_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage32) & (1'b0 == ap_block_pp0_stage32_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage31) & (1'b0 == ap_block_pp0_stage31_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage30) & (1'b0 == ap_block_pp0_stage30_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage29) & (1'b0 == ap_block_pp0_stage29_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage27) & (1'b0 == ap_block_pp0_stage27_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage26) & (1'b0 == ap_block_pp0_stage26_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage25) & (1'b0 == ap_block_pp0_stage25_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage23) & (1'b0 == ap_block_pp0_stage23_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage22) & (1'b0 == ap_block_pp0_stage22_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage21) & (1'b0 == ap_block_pp0_stage21_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage20) & (1'b0 == ap_block_pp0_stage20_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        grp_correlatiebeun_fu_388_ap_ce = 1'b1;
    end else begin
        grp_correlatiebeun_fu_388_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_17_reg_2554;
    end else if (((1'b0 == ap_block_pp0_stage75) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage75))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_16_reg_2539;
    end else if (((1'b0 == ap_block_pp0_stage71) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage71))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_15_reg_2519;
    end else if (((1'b0 == ap_block_pp0_stage67) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage67))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_14_reg_2504;
    end else if (((1'b0 == ap_block_pp0_stage63) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage63))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_13_reg_2484;
    end else if (((1'b0 == ap_block_pp0_stage59) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage59))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_12_reg_2469;
    end else if (((1'b0 == ap_block_pp0_stage55) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage55))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_11_reg_2449;
    end else if (((1'b0 == ap_block_pp0_stage51) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage51))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_10_reg_2434;
    end else if (((1'b0 == ap_block_pp0_stage47) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage47))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_s_reg_2414;
    end else if (((1'b0 == ap_block_pp0_stage43) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage43))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_9_reg_2399;
    end else if (((1'b0 == ap_block_pp0_stage39) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_8_reg_2379;
    end else if (((1'b0 == ap_block_pp0_stage35) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage35))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_7_reg_2364;
    end else if (((1'b0 == ap_block_pp0_stage31) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_6_reg_2344;
    end else if (((1'b0 == ap_block_pp0_stage27) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_5_reg_2329;
    end else if (((1'b0 == ap_block_pp0_stage23) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_4_reg_2309;
    end else if (((1'b0 == ap_block_pp0_stage19) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_3_reg_2294;
    end else if (((1'b0 == ap_block_pp0_stage15) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_2_reg_2274;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_21_1_reg_2259;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_correlatiebeun_fu_388_b_offset = tmp_1_reg_2239;
    end else begin
        grp_correlatiebeun_fu_388_b_offset = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_correlatiebeun_fu_388_start = tmp_user_V_1_reg_2091_pp0_iter1_reg;
    end else if ((((1'b0 == ap_block_pp0_stage75) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage75)) | ((1'b0 == ap_block_pp0_stage71) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage71)) | ((1'b0 == ap_block_pp0_stage67) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage67)) | ((1'b0 == ap_block_pp0_stage63) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage63)) | ((1'b0 == ap_block_pp0_stage59) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage59)) | ((1'b0 == ap_block_pp0_stage55) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage55)) | ((1'b0 == ap_block_pp0_stage51) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage51)) | ((1'b0 == ap_block_pp0_stage47) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage47)) | ((1'b0 == ap_block_pp0_stage43) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage43)) | ((1'b0 == ap_block_pp0_stage39) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage39)) | ((1'b0 == ap_block_pp0_stage35) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage35)) | ((1'b0 == ap_block_pp0_stage31) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage31)) | ((1'b0 == ap_block_pp0_stage27) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage27)) | ((1'b0 == ap_block_pp0_stage23) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage19) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage19)) | ((1'b0 == ap_block_pp0_stage15) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage11) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)))) begin
        grp_correlatiebeun_fu_388_start = tmp_user_V_1_reg_2091;
    end else begin
        grp_correlatiebeun_fu_388_start = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        src_TDATA_blk_n = src_V_data_V_0_state[1'd0];
    end else begin
        src_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_data_V_0_ack_out = 1'b1;
    end else begin
        src_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_data_V_0_sel == 1'b1)) begin
        src_V_data_V_0_data_out = src_V_data_V_0_payload_B;
    end else begin
        src_V_data_V_0_data_out = src_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_dest_V_0_ack_out = 1'b1;
    end else begin
        src_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_dest_V_0_sel == 1'b1)) begin
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_B;
    end else begin
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_id_V_0_ack_out = 1'b1;
    end else begin
        src_V_id_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_id_V_0_sel == 1'b1)) begin
        src_V_id_V_0_data_out = src_V_id_V_0_payload_B;
    end else begin
        src_V_id_V_0_data_out = src_V_id_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_keep_V_0_ack_out = 1'b1;
    end else begin
        src_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_keep_V_0_sel == 1'b1)) begin
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_B;
    end else begin
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_last_V_0_ack_out = 1'b1;
    end else begin
        src_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_last_V_0_sel == 1'b1)) begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_B;
    end else begin
        src_V_last_V_0_data_out = src_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_strb_V_0_ack_out = 1'b1;
    end else begin
        src_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_strb_V_0_sel == 1'b1)) begin
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_B;
    end else begin
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        src_V_user_V_0_ack_out = 1'b1;
    end else begin
        src_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((src_V_user_V_0_sel == 1'b1)) begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_B;
    end else begin
        src_V_user_V_0_data_out = src_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((1'b0 == ap_block_pp0_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((1'b0 == ap_block_pp0_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_pp0_stage40 : begin
            if ((1'b0 == ap_block_pp0_stage40_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end
        end
        ap_ST_fsm_pp0_stage41 : begin
            if ((1'b0 == ap_block_pp0_stage41_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end
        end
        ap_ST_fsm_pp0_stage42 : begin
            if ((1'b0 == ap_block_pp0_stage42_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end
        end
        ap_ST_fsm_pp0_stage43 : begin
            if ((1'b0 == ap_block_pp0_stage43_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end
        end
        ap_ST_fsm_pp0_stage44 : begin
            if ((1'b0 == ap_block_pp0_stage44_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end
        end
        ap_ST_fsm_pp0_stage45 : begin
            if ((1'b0 == ap_block_pp0_stage45_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end
        end
        ap_ST_fsm_pp0_stage46 : begin
            if ((1'b0 == ap_block_pp0_stage46_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end
        end
        ap_ST_fsm_pp0_stage47 : begin
            if ((1'b0 == ap_block_pp0_stage47_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end
        end
        ap_ST_fsm_pp0_stage48 : begin
            if ((1'b0 == ap_block_pp0_stage48_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end
        end
        ap_ST_fsm_pp0_stage49 : begin
            if ((1'b0 == ap_block_pp0_stage49_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end
        end
        ap_ST_fsm_pp0_stage50 : begin
            if ((1'b0 == ap_block_pp0_stage50_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end
        end
        ap_ST_fsm_pp0_stage51 : begin
            if ((1'b0 == ap_block_pp0_stage51_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end
        end
        ap_ST_fsm_pp0_stage52 : begin
            if ((1'b0 == ap_block_pp0_stage52_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end
        end
        ap_ST_fsm_pp0_stage53 : begin
            if ((1'b0 == ap_block_pp0_stage53_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end
        end
        ap_ST_fsm_pp0_stage54 : begin
            if ((1'b0 == ap_block_pp0_stage54_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end
        end
        ap_ST_fsm_pp0_stage55 : begin
            if ((1'b0 == ap_block_pp0_stage55_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end
        end
        ap_ST_fsm_pp0_stage56 : begin
            if ((1'b0 == ap_block_pp0_stage56_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end
        end
        ap_ST_fsm_pp0_stage57 : begin
            if ((1'b0 == ap_block_pp0_stage57_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end
        end
        ap_ST_fsm_pp0_stage58 : begin
            if ((1'b0 == ap_block_pp0_stage58_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end
        end
        ap_ST_fsm_pp0_stage59 : begin
            if ((1'b0 == ap_block_pp0_stage59_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end
        end
        ap_ST_fsm_pp0_stage60 : begin
            if ((1'b0 == ap_block_pp0_stage60_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end
        end
        ap_ST_fsm_pp0_stage61 : begin
            if ((1'b0 == ap_block_pp0_stage61_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end
        end
        ap_ST_fsm_pp0_stage62 : begin
            if ((1'b0 == ap_block_pp0_stage62_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end
        end
        ap_ST_fsm_pp0_stage63 : begin
            if ((1'b0 == ap_block_pp0_stage63_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end
        end
        ap_ST_fsm_pp0_stage64 : begin
            if ((1'b0 == ap_block_pp0_stage64_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end
        end
        ap_ST_fsm_pp0_stage65 : begin
            if ((1'b0 == ap_block_pp0_stage65_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end
        end
        ap_ST_fsm_pp0_stage66 : begin
            if ((1'b0 == ap_block_pp0_stage66_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end
        end
        ap_ST_fsm_pp0_stage67 : begin
            if ((1'b0 == ap_block_pp0_stage67_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end
        end
        ap_ST_fsm_pp0_stage68 : begin
            if ((1'b0 == ap_block_pp0_stage68_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end
        end
        ap_ST_fsm_pp0_stage69 : begin
            if ((1'b0 == ap_block_pp0_stage69_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end
        end
        ap_ST_fsm_pp0_stage70 : begin
            if ((1'b0 == ap_block_pp0_stage70_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end
        end
        ap_ST_fsm_pp0_stage71 : begin
            if ((1'b0 == ap_block_pp0_stage71_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage72;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end
        end
        ap_ST_fsm_pp0_stage72 : begin
            if ((1'b0 == ap_block_pp0_stage72_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage73;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage72;
            end
        end
        ap_ST_fsm_pp0_stage73 : begin
            if ((1'b0 == ap_block_pp0_stage73_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage74;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage73;
            end
        end
        ap_ST_fsm_pp0_stage74 : begin
            if ((1'b0 == ap_block_pp0_stage74_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage75;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage74;
            end
        end
        ap_ST_fsm_pp0_stage75 : begin
            if ((1'b0 == ap_block_pp0_stage75_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage75;
            end
        end
        ap_ST_fsm_pp0_stage76 : begin
            if ((1'b0 == ap_block_pp0_stage76_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage76;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage25 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage28 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage29 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_pp0_stage32 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage33 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage34 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_pp0_stage35 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_pp0_stage36 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage37 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage38 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_pp0_stage39 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage40 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp0_stage41 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp0_stage42 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_pp0_stage43 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_pp0_stage44 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp0_stage45 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp0_stage46 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_pp0_stage47 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_pp0_stage48 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp0_stage49 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage50 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_pp0_stage51 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_pp0_stage52 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp0_stage53 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp0_stage54 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_pp0_stage55 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_pp0_stage56 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_pp0_stage57 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp0_stage58 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_pp0_stage59 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage60 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_pp0_stage61 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp0_stage62 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_pp0_stage63 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_pp0_stage64 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp0_stage65 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_pp0_stage66 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_pp0_stage67 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_pp0_stage68 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_pp0_stage69 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage70 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_pp0_stage71 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_pp0_stage72 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp0_stage73 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_pp0_stage74 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_pp0_stage75 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_pp0_stage76 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((src_V_data_V_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((src_V_data_V_0_vld_out == 1'b0) & (1'b1 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dst_V_dest_V_1_ack_in == 1'b0) | (dst_V_id_V_1_ack_in == 1'b0) | (dst_V_last_V_1_ack_in == 1'b0) | (dst_V_user_V_1_ack_in == 1'b0) | (dst_V_strb_V_1_ack_in == 1'b0) | (dst_V_keep_V_1_ack_in == 1'b0) | (dst_V_data_V_1_ack_in == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((dst_V_data_V_1_ack_in == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dst_V_dest_V_1_ack_in == 1'b0) | (dst_V_id_V_1_ack_in == 1'b0) | (dst_V_last_V_1_ack_in == 1'b0) | (dst_V_user_V_1_ack_in == 1'b0) | (dst_V_strb_V_1_ack_in == 1'b0) | (dst_V_keep_V_1_ack_in == 1'b0) | (dst_V_data_V_1_ack_in == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((dst_V_data_V_1_ack_in == 1'b0) & (1'b1 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dst_V_dest_V_1_ack_in == 1'b0) | (dst_V_id_V_1_ack_in == 1'b0) | (dst_V_last_V_1_ack_in == 1'b0) | (dst_V_user_V_1_ack_in == 1'b0) | (dst_V_strb_V_1_ack_in == 1'b0) | (dst_V_keep_V_1_ack_in == 1'b0) | (dst_V_data_V_1_ack_in == 1'b0))));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((dst_V_data_V_1_ack_in == 1'b0) & (1'b1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((dst_V_data_V_1_ack_in == 1'b0) & (1'b1 == 1'b1));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage70_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage70_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage72 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage72_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage72_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage73 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage73_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage73_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage74_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage74_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage75 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage75_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage75_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage76 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage76_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage76_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0_ignore_call212 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (src_V_data_V_0_vld_out == 1'b0);
end

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage40_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage41_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage42_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage43_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage44_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage44_iter0_ignore_call116 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage45_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage45_iter0_ignore_call116 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage46_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage46_iter0_ignore_call116 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage47_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage48_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage48_iter0_ignore_call128 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage49_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage49_iter0_ignore_call128 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage50_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage50_iter0_ignore_call128 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage51_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage52_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage52_iter0_ignore_call140 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage53_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage53_iter0_ignore_call140 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage54_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage54_iter0_ignore_call140 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage55_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage56_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage56_iter0_ignore_call152 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage57_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage57_iter0_ignore_call152 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage58_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage58_iter0_ignore_call152 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage59_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage60_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage60_iter0_ignore_call164 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage61_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage61_iter0_ignore_call164 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage62_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage62_iter0_ignore_call164 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage63_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage64_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage64_iter0_ignore_call176 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage65_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage65_iter0_ignore_call176 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage66_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage66_iter0_ignore_call176 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage67_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage68_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage68_iter0_ignore_call188 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage69_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage69_iter0_ignore_call188 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage70_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage70_iter0_ignore_call188 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage71_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage72_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage72_iter0_ignore_call200 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage73_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage73_iter0_ignore_call200 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage74_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage74_iter0_ignore_call200 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage75_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage76_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage76_iter0_ignore_call212 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage0_iter1_ignore_call212 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state83_pp0_stage5_iter1 = ((dst_V_dest_V_1_ack_in == 1'b0) | (dst_V_id_V_1_ack_in == 1'b0) | (dst_V_last_V_1_ack_in == 1'b0) | (dst_V_user_V_1_ack_in == 1'b0) | (dst_V_strb_V_1_ack_in == 1'b0) | (dst_V_keep_V_1_ack_in == 1'b0) | (dst_V_data_V_1_ack_in == 1'b0));
end

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_1122 = ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001));
end

always @ (*) begin
    ap_condition_2125 = ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_4271 = ((1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_user_V_1_fu_429_p1 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_4274 = ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (tmp_12_i_fu_711_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_4277 = ((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (tmp_16_i_fu_733_p2 == 1'd1));
end

always @ (*) begin
    ap_condition_941 = ((1'b0 == ap_block_pp0_stage1) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_reg_pp0_iter0_x_assign_reg_258 = 'bx;

assign ap_phi_reg_pp0_iter0_y_assign_reg_247 = 'bx;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign dst_TDATA = dst_V_data_V_1_data_out;

assign dst_TDEST = dst_V_dest_V_1_data_out;

assign dst_TID = dst_V_id_V_1_data_out;

assign dst_TKEEP = dst_V_keep_V_1_data_out;

assign dst_TLAST = dst_V_last_V_1_data_out;

assign dst_TSTRB = dst_V_strb_V_1_data_out;

assign dst_TUSER = dst_V_user_V_1_data_out;

assign dst_TVALID = dst_V_dest_V_1_state[1'd0];

assign dst_V_data_V_1_ack_in = dst_V_data_V_1_state[1'd1];

assign dst_V_data_V_1_ack_out = dst_TREADY;

assign dst_V_data_V_1_load_A = (~dst_V_data_V_1_sel_wr & dst_V_data_V_1_state_cmp_full);

assign dst_V_data_V_1_load_B = (dst_V_data_V_1_state_cmp_full & dst_V_data_V_1_sel_wr);

assign dst_V_data_V_1_sel = dst_V_data_V_1_sel_rd;

assign dst_V_data_V_1_state_cmp_full = ((dst_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_data_V_1_vld_out = dst_V_data_V_1_state[1'd0];

assign dst_V_dest_V_1_ack_in = dst_V_dest_V_1_state[1'd1];

assign dst_V_dest_V_1_ack_out = dst_TREADY;

assign dst_V_dest_V_1_load_A = (~dst_V_dest_V_1_sel_wr & dst_V_dest_V_1_state_cmp_full);

assign dst_V_dest_V_1_load_B = (dst_V_dest_V_1_state_cmp_full & dst_V_dest_V_1_sel_wr);

assign dst_V_dest_V_1_sel = dst_V_dest_V_1_sel_rd;

assign dst_V_dest_V_1_state_cmp_full = ((dst_V_dest_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_dest_V_1_vld_out = dst_V_dest_V_1_state[1'd0];

assign dst_V_id_V_1_ack_in = dst_V_id_V_1_state[1'd1];

assign dst_V_id_V_1_ack_out = dst_TREADY;

assign dst_V_id_V_1_load_A = (~dst_V_id_V_1_sel_wr & dst_V_id_V_1_state_cmp_full);

assign dst_V_id_V_1_load_B = (dst_V_id_V_1_state_cmp_full & dst_V_id_V_1_sel_wr);

assign dst_V_id_V_1_sel = dst_V_id_V_1_sel_rd;

assign dst_V_id_V_1_state_cmp_full = ((dst_V_id_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_id_V_1_vld_out = dst_V_id_V_1_state[1'd0];

assign dst_V_keep_V_1_ack_in = dst_V_keep_V_1_state[1'd1];

assign dst_V_keep_V_1_ack_out = dst_TREADY;

assign dst_V_keep_V_1_load_A = (~dst_V_keep_V_1_sel_wr & dst_V_keep_V_1_state_cmp_full);

assign dst_V_keep_V_1_load_B = (dst_V_keep_V_1_state_cmp_full & dst_V_keep_V_1_sel_wr);

assign dst_V_keep_V_1_sel = dst_V_keep_V_1_sel_rd;

assign dst_V_keep_V_1_state_cmp_full = ((dst_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_keep_V_1_vld_out = dst_V_keep_V_1_state[1'd0];

assign dst_V_last_V_1_ack_in = dst_V_last_V_1_state[1'd1];

assign dst_V_last_V_1_ack_out = dst_TREADY;

assign dst_V_last_V_1_load_A = (~dst_V_last_V_1_sel_wr & dst_V_last_V_1_state_cmp_full);

assign dst_V_last_V_1_load_B = (dst_V_last_V_1_state_cmp_full & dst_V_last_V_1_sel_wr);

assign dst_V_last_V_1_sel = dst_V_last_V_1_sel_rd;

assign dst_V_last_V_1_state_cmp_full = ((dst_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_last_V_1_vld_out = dst_V_last_V_1_state[1'd0];

assign dst_V_strb_V_1_ack_in = dst_V_strb_V_1_state[1'd1];

assign dst_V_strb_V_1_ack_out = dst_TREADY;

assign dst_V_strb_V_1_load_A = (~dst_V_strb_V_1_sel_wr & dst_V_strb_V_1_state_cmp_full);

assign dst_V_strb_V_1_load_B = (dst_V_strb_V_1_state_cmp_full & dst_V_strb_V_1_sel_wr);

assign dst_V_strb_V_1_sel = dst_V_strb_V_1_sel_rd;

assign dst_V_strb_V_1_state_cmp_full = ((dst_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_strb_V_1_vld_out = dst_V_strb_V_1_state[1'd0];

assign dst_V_user_V_1_ack_in = dst_V_user_V_1_state[1'd1];

assign dst_V_user_V_1_ack_out = dst_TREADY;

assign dst_V_user_V_1_load_A = (~dst_V_user_V_1_sel_wr & dst_V_user_V_1_state_cmp_full);

assign dst_V_user_V_1_load_B = (dst_V_user_V_1_state_cmp_full & dst_V_user_V_1_sel_wr);

assign dst_V_user_V_1_sel = dst_V_user_V_1_sel_rd;

assign dst_V_user_V_1_state_cmp_full = ((dst_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign dst_V_user_V_1_vld_out = dst_V_user_V_1_state[1'd0];

assign grp_correlatiebeun_fu_388_ap_start = grp_correlatiebeun_fu_388_ap_start_reg;

assign guard_variable_for_s_1_load_fu_636_p1 = guard_variable_for_s;

assign mul2_fu_564_p1 = mul2_fu_564_p10;

assign mul2_fu_564_p10 = tmp_i2_i_reg_2119;

assign mul2_fu_564_p2 = (48'd13421773 * mul2_fu_564_p1);

assign mul_fu_593_p1 = mul_fu_593_p10;

assign mul_fu_593_p10 = tmp_11_i_i_reg_2128;

assign mul_fu_593_p2 = (46'd5965233 * mul_fu_593_p1);

assign pIn_data_V_1_fu_1008_p3 = ((sel_tmp9_i_fu_1002_p2[0:0] === 1'b1) ? tmp_data_V_1_reg_2071 : sel_tmp6_i_fu_988_p3);

assign p_shl4_i_i_cast_fu_539_p1 = p_shl4_i_i_fu_531_p3;

assign p_shl4_i_i_fu_531_p3 = {{ap_phi_mux_x_assign_phi_fu_261_p4}, {4'd0}};

assign p_shl5_i_i_fu_751_p3 = {{tmp_16_reg_2151}, {6'd0}};

assign p_shl6_i_i_fu_622_p3 = {{tmp_17_fu_612_p4}, {4'd0}};

assign p_shl_i_i_cast_fu_527_p1 = p_shl_i_i_fu_519_p3;

assign p_shl_i_i_fu_519_p3 = {{ap_phi_mux_x_assign_phi_fu_261_p4}, {6'd0}};

assign rev1_fu_870_p2 = (ult1_fu_864_p2 ^ 1'd1);

assign rev2_fu_900_p2 = (ult2_fu_894_p2 ^ 1'd1);

assign rev_fu_826_p2 = (ult_fu_820_p2 ^ 1'd1);

assign sel_tmp2_demorgan_i_fu_946_p2 = (tmp9_fu_940_p2 | rev_fu_826_p2);

assign sel_tmp2_i_fu_952_p2 = (sel_tmp2_demorgan_i_fu_946_p2 ^ 1'd1);

assign sel_tmp5_i_fu_982_p2 = (tmp4_fu_976_p2 & tmp2_fu_964_p2);

assign sel_tmp6_i_fu_988_p3 = ((sel_tmp5_i_fu_982_p2[0:0] === 1'b1) ? tmp_37_i_fu_932_p3 : tmp_36_i_fu_918_p2);

assign sel_tmp8_i_fu_996_p2 = (tmp_27_i_fu_852_p2 ^ 1'd1);

assign sel_tmp9_i_fu_1002_p2 = (sel_tmp8_i_fu_996_p2 | sel_tmp2_demorgan_i_fu_946_p2);

assign src_TREADY = src_V_dest_V_0_state[1'd1];

assign src_V_data_V_0_ack_in = src_V_data_V_0_state[1'd1];

assign src_V_data_V_0_load_A = (src_V_data_V_0_state_cmp_full & ~src_V_data_V_0_sel_wr);

assign src_V_data_V_0_load_B = (src_V_data_V_0_state_cmp_full & src_V_data_V_0_sel_wr);

assign src_V_data_V_0_sel = src_V_data_V_0_sel_rd;

assign src_V_data_V_0_state_cmp_full = ((src_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_data_V_0_vld_in = src_TVALID;

assign src_V_data_V_0_vld_out = src_V_data_V_0_state[1'd0];

assign src_V_dest_V_0_ack_in = src_V_dest_V_0_state[1'd1];

assign src_V_dest_V_0_load_A = (src_V_dest_V_0_state_cmp_full & ~src_V_dest_V_0_sel_wr);

assign src_V_dest_V_0_load_B = (src_V_dest_V_0_state_cmp_full & src_V_dest_V_0_sel_wr);

assign src_V_dest_V_0_sel = src_V_dest_V_0_sel_rd;

assign src_V_dest_V_0_state_cmp_full = ((src_V_dest_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_dest_V_0_vld_in = src_TVALID;

assign src_V_dest_V_0_vld_out = src_V_dest_V_0_state[1'd0];

assign src_V_id_V_0_ack_in = src_V_id_V_0_state[1'd1];

assign src_V_id_V_0_load_A = (src_V_id_V_0_state_cmp_full & ~src_V_id_V_0_sel_wr);

assign src_V_id_V_0_load_B = (src_V_id_V_0_state_cmp_full & src_V_id_V_0_sel_wr);

assign src_V_id_V_0_sel = src_V_id_V_0_sel_rd;

assign src_V_id_V_0_state_cmp_full = ((src_V_id_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_id_V_0_vld_in = src_TVALID;

assign src_V_id_V_0_vld_out = src_V_id_V_0_state[1'd0];

assign src_V_keep_V_0_ack_in = src_V_keep_V_0_state[1'd1];

assign src_V_keep_V_0_load_A = (src_V_keep_V_0_state_cmp_full & ~src_V_keep_V_0_sel_wr);

assign src_V_keep_V_0_load_B = (src_V_keep_V_0_state_cmp_full & src_V_keep_V_0_sel_wr);

assign src_V_keep_V_0_sel = src_V_keep_V_0_sel_rd;

assign src_V_keep_V_0_state_cmp_full = ((src_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_keep_V_0_vld_in = src_TVALID;

assign src_V_keep_V_0_vld_out = src_V_keep_V_0_state[1'd0];

assign src_V_last_V_0_ack_in = src_V_last_V_0_state[1'd1];

assign src_V_last_V_0_load_A = (src_V_last_V_0_state_cmp_full & ~src_V_last_V_0_sel_wr);

assign src_V_last_V_0_load_B = (src_V_last_V_0_state_cmp_full & src_V_last_V_0_sel_wr);

assign src_V_last_V_0_sel = src_V_last_V_0_sel_rd;

assign src_V_last_V_0_state_cmp_full = ((src_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_last_V_0_vld_in = src_TVALID;

assign src_V_last_V_0_vld_out = src_V_last_V_0_state[1'd0];

assign src_V_strb_V_0_ack_in = src_V_strb_V_0_state[1'd1];

assign src_V_strb_V_0_load_A = (src_V_strb_V_0_state_cmp_full & ~src_V_strb_V_0_sel_wr);

assign src_V_strb_V_0_load_B = (src_V_strb_V_0_state_cmp_full & src_V_strb_V_0_sel_wr);

assign src_V_strb_V_0_sel = src_V_strb_V_0_sel_rd;

assign src_V_strb_V_0_state_cmp_full = ((src_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_strb_V_0_vld_in = src_TVALID;

assign src_V_strb_V_0_vld_out = src_V_strb_V_0_state[1'd0];

assign src_V_user_V_0_ack_in = src_V_user_V_0_state[1'd1];

assign src_V_user_V_0_load_A = (src_V_user_V_0_state_cmp_full & ~src_V_user_V_0_sel_wr);

assign src_V_user_V_0_load_B = (src_V_user_V_0_state_cmp_full & src_V_user_V_0_sel_wr);

assign src_V_user_V_0_sel = src_V_user_V_0_sel_rd;

assign src_V_user_V_0_state_cmp_full = ((src_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign src_V_user_V_0_vld_in = src_TVALID;

assign src_V_user_V_0_vld_out = src_V_user_V_0_state[1'd0];

assign sum_i_i_cast_fu_1094_p1 = sum_i_i_reg_2220;

assign sum_i_i_fu_763_p2 = (tmp_30_i_reg_2199 + tmp_26_i_i_fu_758_p2);

assign tmp1_fu_958_p2 = (tmp_31_i7_fu_882_p2 & sel_tmp2_i_fu_952_p2);

assign tmp2_fu_964_p2 = (tmp_27_i_fu_852_p2 & tmp1_fu_958_p2);

assign tmp3_fu_970_p2 = (tmp_35_i_fu_912_p2 & rev2_fu_900_p2);

assign tmp4_fu_976_p2 = (tmp3_fu_970_p2 & rev1_fu_870_p2);

assign tmp9_fu_940_p2 = (tmp_23_i_fu_832_p2 | tmp_18_i_fu_800_p2);

assign tmp_10_fu_491_p2 = (buf_which ^ 2'd2);

assign tmp_11_fu_511_p1 = ap_phi_mux_y_assign_phi_fu_250_p4[3:0];

assign tmp_11_i_i_fu_2065_p0 = 22'd45;

assign tmp_11_i_i_fu_2065_p1 = tmp_11_i_i_fu_2065_p10;

assign tmp_11_i_i_fu_2065_p10 = y_assign_reg_247;

assign tmp_12_fu_674_p2 = ((tmp_i1_reg_2145 != 2'd3) ? 1'b1 : 1'b0);

assign tmp_12_i_fu_711_p2 = ((tmp_i3_fu_705_p2 > 17'd1280) ? 1'b1 : 1'b0);

assign tmp_13_fu_679_p2 = (buf_which_load_1_reg_2138 ^ 2'd2);

assign tmp_14_fu_549_p2 = (tmp_57_fu_515_p1 | tmp_11_fu_511_p1);

assign tmp_14_i_cast_fu_723_p1 = moved_y;

assign tmp_15_10_cast1_fu_1621_p1 = buf_which;

assign tmp_15_11_cast1_fu_1670_p1 = buf_which;

assign tmp_15_12_cast1_fu_1723_p1 = buf_which;

assign tmp_15_13_cast1_fu_1772_p1 = buf_which;

assign tmp_15_14_cast1_fu_1825_p1 = buf_which;

assign tmp_15_15_cast1_fu_1874_p1 = buf_which;

assign tmp_15_16_cast1_fu_1927_p1 = buf_which;

assign tmp_15_17_cast1_fu_1976_p1 = buf_which;

assign tmp_15_1_cast1_fu_1111_p1 = buf_which;

assign tmp_15_2_cast1_fu_1160_p1 = buf_which;

assign tmp_15_3_cast1_fu_1213_p1 = buf_which;

assign tmp_15_4_cast1_fu_1262_p1 = buf_which;

assign tmp_15_5_cast1_fu_1315_p1 = buf_which;

assign tmp_15_6_cast1_fu_1364_p1 = buf_which;

assign tmp_15_7_cast1_fu_1417_p1 = buf_which;

assign tmp_15_8_cast1_fu_1466_p1 = buf_which;

assign tmp_15_9_cast1_fu_1519_p1 = buf_which;

assign tmp_15_cast1_fu_1568_p1 = buf_which;

assign tmp_15_fu_555_p2 = ((tmp_14_fu_549_p2 == 4'd0) ? 1'b1 : 1'b0);

assign tmp_15_i_fu_727_p2 = (tmp_14_i_cast_fu_723_p1 + 17'd64);

assign tmp_16_10_fu_1629_p0 = tmp_16_10_fu_1629_p00;

assign tmp_16_10_fu_1629_p00 = buf_which;

assign tmp_16_10_fu_1629_p2 = (tmp_16_10_fu_1629_p0 * $signed('hE10));

assign tmp_16_11_fu_1678_p0 = tmp_16_11_fu_1678_p00;

assign tmp_16_11_fu_1678_p00 = buf_which;

assign tmp_16_11_fu_1678_p2 = (tmp_16_11_fu_1678_p0 * $signed('hE10));

assign tmp_16_12_fu_1731_p0 = tmp_16_12_fu_1731_p00;

assign tmp_16_12_fu_1731_p00 = buf_which;

assign tmp_16_12_fu_1731_p2 = (tmp_16_12_fu_1731_p0 * $signed('hE10));

assign tmp_16_13_fu_1780_p0 = tmp_16_13_fu_1780_p00;

assign tmp_16_13_fu_1780_p00 = buf_which;

assign tmp_16_13_fu_1780_p2 = (tmp_16_13_fu_1780_p0 * $signed('hE10));

assign tmp_16_14_fu_1833_p0 = tmp_16_14_fu_1833_p00;

assign tmp_16_14_fu_1833_p00 = buf_which;

assign tmp_16_14_fu_1833_p2 = (tmp_16_14_fu_1833_p0 * $signed('hE10));

assign tmp_16_15_fu_1882_p0 = tmp_16_15_fu_1882_p00;

assign tmp_16_15_fu_1882_p00 = buf_which;

assign tmp_16_15_fu_1882_p2 = (tmp_16_15_fu_1882_p0 * $signed('hE10));

assign tmp_16_16_fu_1935_p0 = tmp_16_16_fu_1935_p00;

assign tmp_16_16_fu_1935_p00 = buf_which;

assign tmp_16_16_fu_1935_p2 = (tmp_16_16_fu_1935_p0 * $signed('hE10));

assign tmp_16_17_fu_1984_p0 = tmp_16_17_fu_1984_p00;

assign tmp_16_17_fu_1984_p00 = buf_which;

assign tmp_16_17_fu_1984_p2 = (tmp_16_17_fu_1984_p0 * $signed('hE10));

assign tmp_16_1_fu_1119_p0 = tmp_16_1_fu_1119_p00;

assign tmp_16_1_fu_1119_p00 = buf_which;

assign tmp_16_1_fu_1119_p2 = (tmp_16_1_fu_1119_p0 * $signed('hE10));

assign tmp_16_2_fu_1168_p0 = tmp_16_2_fu_1168_p00;

assign tmp_16_2_fu_1168_p00 = buf_which;

assign tmp_16_2_fu_1168_p2 = (tmp_16_2_fu_1168_p0 * $signed('hE10));

assign tmp_16_3_fu_1221_p0 = tmp_16_3_fu_1221_p00;

assign tmp_16_3_fu_1221_p00 = buf_which;

assign tmp_16_3_fu_1221_p2 = (tmp_16_3_fu_1221_p0 * $signed('hE10));

assign tmp_16_4_fu_1270_p0 = tmp_16_4_fu_1270_p00;

assign tmp_16_4_fu_1270_p00 = buf_which;

assign tmp_16_4_fu_1270_p2 = (tmp_16_4_fu_1270_p0 * $signed('hE10));

assign tmp_16_5_fu_1323_p0 = tmp_16_5_fu_1323_p00;

assign tmp_16_5_fu_1323_p00 = buf_which;

assign tmp_16_5_fu_1323_p2 = (tmp_16_5_fu_1323_p0 * $signed('hE10));

assign tmp_16_6_fu_1372_p0 = tmp_16_6_fu_1372_p00;

assign tmp_16_6_fu_1372_p00 = buf_which;

assign tmp_16_6_fu_1372_p2 = (tmp_16_6_fu_1372_p0 * $signed('hE10));

assign tmp_16_7_fu_1425_p0 = tmp_16_7_fu_1425_p00;

assign tmp_16_7_fu_1425_p00 = buf_which;

assign tmp_16_7_fu_1425_p2 = (tmp_16_7_fu_1425_p0 * $signed('hE10));

assign tmp_16_8_fu_1474_p0 = tmp_16_8_fu_1474_p00;

assign tmp_16_8_fu_1474_p00 = buf_which;

assign tmp_16_8_fu_1474_p2 = (tmp_16_8_fu_1474_p0 * $signed('hE10));

assign tmp_16_9_fu_1527_p0 = tmp_16_9_fu_1527_p00;

assign tmp_16_9_fu_1527_p00 = buf_which;

assign tmp_16_9_fu_1527_p2 = (tmp_16_9_fu_1527_p0 * $signed('hE10));

assign tmp_16_i_fu_733_p2 = ((tmp_15_i_fu_727_p2 > 17'd720) ? 1'b1 : 1'b0);

assign tmp_16_s_fu_1576_p0 = tmp_16_s_fu_1576_p00;

assign tmp_16_s_fu_1576_p00 = buf_which;

assign tmp_16_s_fu_1576_p2 = (tmp_16_s_fu_1576_p0 * $signed('hE10));

assign tmp_17_10_fu_2033_p1 = tmp_16_10_reg_2424;

assign tmp_17_11_fu_2037_p1 = tmp_16_11_reg_2439;

assign tmp_17_12_fu_2041_p1 = tmp_16_12_reg_2459;

assign tmp_17_13_fu_2045_p1 = tmp_16_13_reg_2474;

assign tmp_17_14_fu_2049_p1 = tmp_16_14_reg_2494;

assign tmp_17_15_fu_2053_p1 = tmp_16_15_reg_2509;

assign tmp_17_16_fu_2057_p1 = tmp_16_16_reg_2529;

assign tmp_17_17_fu_2061_p1 = tmp_16_17_reg_2544;

assign tmp_17_1_fu_1209_p1 = tmp_16_1_reg_2249;

assign tmp_17_2_fu_1311_p1 = tmp_16_2_reg_2264;

assign tmp_17_3_fu_1413_p1 = tmp_16_3_reg_2284;

assign tmp_17_4_fu_1515_p1 = tmp_16_4_reg_2299;

assign tmp_17_5_fu_1617_p1 = tmp_16_5_reg_2319;

assign tmp_17_6_fu_1719_p1 = tmp_16_6_reg_2334;

assign tmp_17_7_fu_1821_p1 = tmp_16_7_reg_2354;

assign tmp_17_8_fu_1923_p1 = tmp_16_8_reg_2369;

assign tmp_17_9_fu_2025_p1 = tmp_16_9_reg_2389;

assign tmp_17_fu_612_p4 = {{mul_fu_593_p2[42:32]}};

assign tmp_17_s_fu_2029_p1 = tmp_16_s_reg_2404;

assign tmp_18_10_fu_1635_p2 = (tmp_15_10_cast1_fu_1621_p1 + 3'd2);

assign tmp_18_11_fu_1684_p2 = (tmp_15_11_cast1_fu_1670_p1 + 3'd2);

assign tmp_18_12_fu_1737_p2 = (tmp_15_12_cast1_fu_1723_p1 + 3'd2);

assign tmp_18_13_fu_1786_p2 = (tmp_15_13_cast1_fu_1772_p1 + 3'd2);

assign tmp_18_14_fu_1839_p2 = (tmp_15_14_cast1_fu_1825_p1 + 3'd2);

assign tmp_18_15_fu_1888_p2 = (tmp_15_15_cast1_fu_1874_p1 + 3'd2);

assign tmp_18_16_fu_1941_p2 = (tmp_15_16_cast1_fu_1927_p1 + 3'd2);

assign tmp_18_17_fu_1990_p2 = (tmp_15_17_cast1_fu_1976_p1 + 3'd2);

assign tmp_18_1_fu_1125_p2 = (tmp_15_1_cast1_fu_1111_p1 + 3'd2);

assign tmp_18_2_fu_1174_p2 = (tmp_15_2_cast1_fu_1160_p1 + 3'd2);

assign tmp_18_3_fu_1227_p2 = (tmp_15_3_cast1_fu_1213_p1 + 3'd2);

assign tmp_18_4_fu_1276_p2 = (tmp_15_4_cast1_fu_1262_p1 + 3'd2);

assign tmp_18_5_fu_1329_p2 = (tmp_15_5_cast1_fu_1315_p1 + 3'd2);

assign tmp_18_6_fu_1378_p2 = (tmp_15_6_cast1_fu_1364_p1 + 3'd2);

assign tmp_18_7_fu_1431_p2 = (tmp_15_7_cast1_fu_1417_p1 + 3'd2);

assign tmp_18_8_fu_1480_p2 = (tmp_15_8_cast1_fu_1466_p1 + 3'd2);

assign tmp_18_9_fu_1533_p2 = (tmp_15_9_cast1_fu_1519_p1 + 3'd2);

assign tmp_18_fu_780_p2 = ((tmp_6_fu_774_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_18_i_fu_800_p2 = ((ap_phi_reg_pp0_iter0_tmp_13_i_reg_366 > x_assign_reg_258) ? 1'b1 : 1'b0);

assign tmp_18_s_fu_1582_p2 = (tmp_15_cast1_fu_1568_p1 + 3'd2);

assign tmp_19_10_fu_1653_p3 = ((tmp_40_fu_1641_p2[0:0] === 1'b1) ? tmp_18_10_fu_1635_p2 : tmp_41_fu_1647_p2);

assign tmp_19_11_fu_1702_p3 = ((tmp_42_fu_1690_p2[0:0] === 1'b1) ? tmp_18_11_fu_1684_p2 : tmp_43_fu_1696_p2);

assign tmp_19_12_fu_1755_p3 = ((tmp_44_fu_1743_p2[0:0] === 1'b1) ? tmp_18_12_fu_1737_p2 : tmp_45_fu_1749_p2);

assign tmp_19_13_fu_1804_p3 = ((tmp_46_fu_1792_p2[0:0] === 1'b1) ? tmp_18_13_fu_1786_p2 : tmp_47_fu_1798_p2);

assign tmp_19_14_fu_1857_p3 = ((tmp_48_fu_1845_p2[0:0] === 1'b1) ? tmp_18_14_fu_1839_p2 : tmp_49_fu_1851_p2);

assign tmp_19_15_fu_1906_p3 = ((tmp_50_fu_1894_p2[0:0] === 1'b1) ? tmp_18_15_fu_1888_p2 : tmp_51_fu_1900_p2);

assign tmp_19_16_fu_1959_p3 = ((tmp_52_fu_1947_p2[0:0] === 1'b1) ? tmp_18_16_fu_1941_p2 : tmp_53_fu_1953_p2);

assign tmp_19_17_fu_2008_p3 = ((tmp_54_fu_1996_p2[0:0] === 1'b1) ? tmp_18_17_fu_1990_p2 : tmp_55_fu_2002_p2);

assign tmp_19_1_fu_1143_p3 = ((tmp_20_fu_1131_p2[0:0] === 1'b1) ? tmp_18_1_fu_1125_p2 : tmp_21_fu_1137_p2);

assign tmp_19_2_fu_1192_p3 = ((tmp_22_fu_1180_p2[0:0] === 1'b1) ? tmp_18_2_fu_1174_p2 : tmp_23_fu_1186_p2);

assign tmp_19_3_fu_1245_p3 = ((tmp_24_fu_1233_p2[0:0] === 1'b1) ? tmp_18_3_fu_1227_p2 : tmp_25_fu_1239_p2);

assign tmp_19_4_fu_1294_p3 = ((tmp_26_fu_1282_p2[0:0] === 1'b1) ? tmp_18_4_fu_1276_p2 : tmp_27_fu_1288_p2);

assign tmp_19_5_fu_1347_p3 = ((tmp_28_fu_1335_p2[0:0] === 1'b1) ? tmp_18_5_fu_1329_p2 : tmp_29_fu_1341_p2);

assign tmp_19_6_fu_1396_p3 = ((tmp_30_fu_1384_p2[0:0] === 1'b1) ? tmp_18_6_fu_1378_p2 : tmp_31_fu_1390_p2);

assign tmp_19_7_fu_1449_p3 = ((tmp_32_fu_1437_p2[0:0] === 1'b1) ? tmp_18_7_fu_1431_p2 : tmp_33_fu_1443_p2);

assign tmp_19_8_fu_1498_p3 = ((tmp_34_fu_1486_p2[0:0] === 1'b1) ? tmp_18_8_fu_1480_p2 : tmp_35_fu_1492_p2);

assign tmp_19_9_fu_1551_p3 = ((tmp_36_fu_1539_p2[0:0] === 1'b1) ? tmp_18_9_fu_1533_p2 : tmp_37_fu_1545_p2);

assign tmp_19_fu_786_p2 = ($signed(tmp_i1_cast1_fu_745_p1) + $signed(3'd7));

assign tmp_19_i_cast_fu_806_p1 = x_assign_reg_258;

assign tmp_19_s_fu_1600_p3 = ((tmp_38_fu_1588_p2[0:0] === 1'b1) ? tmp_18_s_fu_1582_p2 : tmp_39_fu_1594_p2);

assign tmp_1_fu_1101_p0 = tmp_1_fu_1101_p00;

assign tmp_1_fu_1101_p00 = tmp_8_reg_2230;

assign tmp_1_fu_1101_p2 = (tmp_1_fu_1101_p0 * $signed('hE10));

assign tmp_20_fu_1131_p2 = ((tmp_18_1_fu_1125_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_20_i_cast_fu_810_p1 = ap_phi_reg_pp0_iter0_tmp_13_i_reg_366;

assign tmp_21_10_fu_1664_p0 = tmp_21_10_fu_1664_p00;

assign tmp_21_10_fu_1664_p00 = tmp_19_10_reg_2429;

assign tmp_21_10_fu_1664_p2 = (tmp_21_10_fu_1664_p0 * $signed('hE10));

assign tmp_21_11_fu_1713_p0 = tmp_21_11_fu_1713_p00;

assign tmp_21_11_fu_1713_p00 = tmp_19_11_reg_2444;

assign tmp_21_11_fu_1713_p2 = (tmp_21_11_fu_1713_p0 * $signed('hE10));

assign tmp_21_12_fu_1766_p0 = tmp_21_12_fu_1766_p00;

assign tmp_21_12_fu_1766_p00 = tmp_19_12_reg_2464;

assign tmp_21_12_fu_1766_p2 = (tmp_21_12_fu_1766_p0 * $signed('hE10));

assign tmp_21_13_fu_1815_p0 = tmp_21_13_fu_1815_p00;

assign tmp_21_13_fu_1815_p00 = tmp_19_13_reg_2479;

assign tmp_21_13_fu_1815_p2 = (tmp_21_13_fu_1815_p0 * $signed('hE10));

assign tmp_21_14_fu_1868_p0 = tmp_21_14_fu_1868_p00;

assign tmp_21_14_fu_1868_p00 = tmp_19_14_reg_2499;

assign tmp_21_14_fu_1868_p2 = (tmp_21_14_fu_1868_p0 * $signed('hE10));

assign tmp_21_15_fu_1917_p0 = tmp_21_15_fu_1917_p00;

assign tmp_21_15_fu_1917_p00 = tmp_19_15_reg_2514;

assign tmp_21_15_fu_1917_p2 = (tmp_21_15_fu_1917_p0 * $signed('hE10));

assign tmp_21_16_fu_1970_p0 = tmp_21_16_fu_1970_p00;

assign tmp_21_16_fu_1970_p00 = tmp_19_16_reg_2534;

assign tmp_21_16_fu_1970_p2 = (tmp_21_16_fu_1970_p0 * $signed('hE10));

assign tmp_21_17_fu_2019_p0 = tmp_21_17_fu_2019_p00;

assign tmp_21_17_fu_2019_p00 = tmp_19_17_reg_2549;

assign tmp_21_17_fu_2019_p2 = (tmp_21_17_fu_2019_p0 * $signed('hE10));

assign tmp_21_1_fu_1154_p0 = tmp_21_1_fu_1154_p00;

assign tmp_21_1_fu_1154_p00 = tmp_19_1_reg_2254;

assign tmp_21_1_fu_1154_p2 = (tmp_21_1_fu_1154_p0 * $signed('hE10));

assign tmp_21_2_fu_1203_p0 = tmp_21_2_fu_1203_p00;

assign tmp_21_2_fu_1203_p00 = tmp_19_2_reg_2269;

assign tmp_21_2_fu_1203_p2 = (tmp_21_2_fu_1203_p0 * $signed('hE10));

assign tmp_21_3_fu_1256_p0 = tmp_21_3_fu_1256_p00;

assign tmp_21_3_fu_1256_p00 = tmp_19_3_reg_2289;

assign tmp_21_3_fu_1256_p2 = (tmp_21_3_fu_1256_p0 * $signed('hE10));

assign tmp_21_4_fu_1305_p0 = tmp_21_4_fu_1305_p00;

assign tmp_21_4_fu_1305_p00 = tmp_19_4_reg_2304;

assign tmp_21_4_fu_1305_p2 = (tmp_21_4_fu_1305_p0 * $signed('hE10));

assign tmp_21_5_fu_1358_p0 = tmp_21_5_fu_1358_p00;

assign tmp_21_5_fu_1358_p00 = tmp_19_5_reg_2324;

assign tmp_21_5_fu_1358_p2 = (tmp_21_5_fu_1358_p0 * $signed('hE10));

assign tmp_21_6_fu_1407_p0 = tmp_21_6_fu_1407_p00;

assign tmp_21_6_fu_1407_p00 = tmp_19_6_reg_2339;

assign tmp_21_6_fu_1407_p2 = (tmp_21_6_fu_1407_p0 * $signed('hE10));

assign tmp_21_7_fu_1460_p0 = tmp_21_7_fu_1460_p00;

assign tmp_21_7_fu_1460_p00 = tmp_19_7_reg_2359;

assign tmp_21_7_fu_1460_p2 = (tmp_21_7_fu_1460_p0 * $signed('hE10));

assign tmp_21_8_fu_1509_p0 = tmp_21_8_fu_1509_p00;

assign tmp_21_8_fu_1509_p00 = tmp_19_8_reg_2374;

assign tmp_21_8_fu_1509_p2 = (tmp_21_8_fu_1509_p0 * $signed('hE10));

assign tmp_21_9_fu_1562_p0 = tmp_21_9_fu_1562_p00;

assign tmp_21_9_fu_1562_p00 = tmp_19_9_reg_2394;

assign tmp_21_9_fu_1562_p2 = (tmp_21_9_fu_1562_p0 * $signed('hE10));

assign tmp_21_fu_1137_p2 = ($signed(tmp_15_1_cast1_fu_1111_p1) + $signed(3'd7));

assign tmp_21_i_fu_814_p2 = (tmp_20_i_cast_fu_810_p1 + 17'd50);

assign tmp_21_s_fu_1611_p0 = tmp_21_s_fu_1611_p00;

assign tmp_21_s_fu_1611_p00 = tmp_19_s_reg_2409;

assign tmp_21_s_fu_1611_p2 = (tmp_21_s_fu_1611_p0 * $signed('hE10));

assign tmp_22_fu_1180_p2 = ((tmp_18_2_fu_1174_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_23_fu_1186_p2 = ($signed(tmp_15_2_cast1_fu_1160_p1) + $signed(3'd7));

assign tmp_23_i_fu_832_p2 = ((ap_phi_reg_pp0_iter0_tmp_17_i_reg_377 > y_assign_reg_247) ? 1'b1 : 1'b0);

assign tmp_23_i_i_cast_fu_599_p1 = tmp_58_reg_2133;

assign tmp_24_fu_1233_p2 = ((tmp_18_3_fu_1227_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_24_i_cast_fu_838_p1 = y_assign_reg_247;

assign tmp_25_fu_1239_p2 = ($signed(tmp_15_3_cast1_fu_1213_p1) + $signed(3'd7));

assign tmp_25_i_cast_fu_842_p1 = ap_phi_reg_pp0_iter0_tmp_17_i_reg_377;

assign tmp_26_fu_1282_p2 = ((tmp_18_4_fu_1276_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_26_i_fu_846_p2 = (tmp_25_i_cast_fu_842_p1 + 17'd50);

assign tmp_26_i_i_fu_758_p2 = (p_shl5_i_i_fu_751_p3 + tmp_reg_2156);

assign tmp_27_fu_1288_p2 = ($signed(tmp_15_4_cast1_fu_1262_p1) + $signed(3'd7));

assign tmp_27_i_fu_852_p2 = ((tmp_24_i_cast_fu_838_p1 < tmp_26_i_fu_846_p2) ? 1'b1 : 1'b0);

assign tmp_28_fu_1335_p2 = ((tmp_18_5_fu_1329_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_28_i4_fu_858_p2 = (tmp_20_i_cast_fu_810_p1 + 17'd10);

assign tmp_28_i_fu_684_p3 = ((tmp_12_fu_674_p2[0:0] === 1'b1) ? tmp_i1_reg_2145 : tmp_13_fu_679_p2);

assign tmp_29_fu_1341_p2 = ($signed(tmp_15_5_cast1_fu_1315_p1) + $signed(3'd7));

assign tmp_2_fu_1051_p2 = (y_assign_reg_247 + 16'd1);

assign tmp_30_fu_1384_p2 = ((tmp_18_6_fu_1378_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_30_i6_fu_876_p2 = (tmp_20_i_cast_fu_810_p1 + 17'd40);

assign tmp_30_i_fu_695_p1 = tmp_30_i_fu_695_p10;

assign tmp_30_i_fu_695_p10 = tmp_28_i_fu_684_p3;

assign tmp_30_i_fu_695_p2 = (15'd3600 * tmp_30_i_fu_695_p1);

assign tmp_31_fu_1390_p2 = ($signed(tmp_15_6_cast1_fu_1364_p1) + $signed(3'd7));

assign tmp_31_i7_fu_882_p2 = ((tmp_19_i_cast_fu_806_p1 < tmp_30_i6_fu_876_p2) ? 1'b1 : 1'b0);

assign tmp_32_fu_1437_p2 = ((tmp_18_7_fu_1431_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_32_i_fu_888_p2 = (tmp_25_i_cast_fu_842_p1 + 17'd10);

assign tmp_33_fu_1443_p2 = ($signed(tmp_15_7_cast1_fu_1417_p1) + $signed(3'd7));

assign tmp_34_fu_1486_p2 = ((tmp_18_8_fu_1480_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_34_i_fu_906_p2 = (tmp_25_i_cast_fu_842_p1 + 17'd40);

assign tmp_35_fu_1492_p2 = ($signed(tmp_15_8_cast1_fu_1466_p1) + $signed(3'd7));

assign tmp_35_i_fu_912_p2 = ((tmp_24_i_cast_fu_838_p1 < tmp_34_i_fu_906_p2) ? 1'b1 : 1'b0);

assign tmp_36_fu_1539_p2 = ((tmp_18_9_fu_1533_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_36_i_fu_918_p2 = (tmp_data_V_1_reg_2071 | 32'd16777215);

assign tmp_37_fu_1545_p2 = ($signed(tmp_15_9_cast1_fu_1519_p1) + $signed(3'd7));

assign tmp_37_i_fu_932_p3 = {{tmp_56_fu_923_p4}, {24'd0}};

assign tmp_38_fu_1588_p2 = ((tmp_18_s_fu_1582_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_39_fu_1594_p2 = ($signed(tmp_15_cast1_fu_1568_p1) + $signed(3'd7));

assign tmp_3_fu_1057_p2 = (x_assign_reg_258 + 16'd1);

assign tmp_40_fu_1641_p2 = ((tmp_18_10_fu_1635_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_41_fu_1647_p2 = ($signed(tmp_15_10_cast1_fu_1621_p1) + $signed(3'd7));

assign tmp_42_fu_1690_p2 = ((tmp_18_11_fu_1684_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_43_fu_1696_p2 = ($signed(tmp_15_11_cast1_fu_1670_p1) + $signed(3'd7));

assign tmp_44_fu_1743_p2 = ((tmp_18_12_fu_1737_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_45_fu_1749_p2 = ($signed(tmp_15_12_cast1_fu_1723_p1) + $signed(3'd7));

assign tmp_46_fu_1792_p2 = ((tmp_18_13_fu_1786_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_47_fu_1798_p2 = ($signed(tmp_15_13_cast1_fu_1772_p1) + $signed(3'd7));

assign tmp_48_fu_1845_p2 = ((tmp_18_14_fu_1839_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_49_fu_1851_p2 = ($signed(tmp_15_14_cast1_fu_1825_p1) + $signed(3'd7));

assign tmp_4_fu_768_p0 = tmp_4_fu_768_p00;

assign tmp_4_fu_768_p00 = buf_which_load_1_reg_2138;

assign tmp_4_fu_768_p2 = (tmp_4_fu_768_p0 * $signed('hE10));

assign tmp_4_i_fu_497_p3 = ((tmp_9_fu_485_p2[0:0] === 1'b1) ? tmp_i_fu_479_p2 : tmp_10_fu_491_p2);

assign tmp_50_fu_1894_p2 = ((tmp_18_15_fu_1888_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_51_fu_1900_p2 = ($signed(tmp_15_15_cast1_fu_1874_p1) + $signed(3'd7));

assign tmp_52_fu_1947_p2 = ((tmp_18_16_fu_1941_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_53_fu_1953_p2 = ($signed(tmp_15_16_cast1_fu_1927_p1) + $signed(3'd7));

assign tmp_54_fu_1996_p2 = ((tmp_18_17_fu_1990_p2 < 3'd3) ? 1'b1 : 1'b0);

assign tmp_55_fu_2002_p2 = ($signed(tmp_15_17_cast1_fu_1976_p1) + $signed(3'd7));

assign tmp_56_fu_923_p4 = {{tmp_data_V_1_reg_2071[31:24]}};

assign tmp_57_fu_515_p1 = ap_phi_mux_x_assign_phi_fu_261_p4[3:0];

assign tmp_5_fu_1107_p1 = tmp_4_reg_2225;

assign tmp_6_fu_774_p2 = (tmp_i1_cast1_fu_745_p1 + 3'd2);

assign tmp_7_fu_455_p2 = ($signed(moved_x) + $signed(16'd64896));

assign tmp_8_fu_792_p3 = ((tmp_18_fu_780_p2[0:0] === 1'b1) ? tmp_6_fu_774_p2 : tmp_19_fu_786_p2);

assign tmp_9_fu_485_p2 = ((tmp_i_fu_479_p2 != 2'd3) ? 1'b1 : 1'b0);

assign tmp_fu_630_p2 = (tmp_23_i_i_cast_fu_599_p1 + p_shl6_i_i_fu_622_p3);

assign tmp_i1_cast1_fu_745_p1 = buf_which_load_1_reg_2138;

assign tmp_i1_fu_584_p2 = (2'd1 + buf_which);

assign tmp_i2_cast_fu_701_p1 = moved_x;

assign tmp_i2_i_fu_543_p2 = (p_shl4_i_i_cast_fu_539_p1 + p_shl_i_i_cast_fu_527_p1);

assign tmp_i3_fu_705_p2 = (tmp_i2_cast_fu_701_p1 + 17'd64);

assign tmp_i_fu_479_p2 = (buf_which + 2'd1);

assign tmp_s_fu_467_p2 = ($signed(moved_y) + $signed(16'd65184));

assign tmp_user_V_1_fu_429_p1 = src_V_user_V_0_data_out;

assign ult1_fu_864_p2 = ((tmp_19_i_cast_fu_806_p1 < tmp_28_i4_fu_858_p2) ? 1'b1 : 1'b0);

assign ult2_fu_894_p2 = ((tmp_24_i_cast_fu_838_p1 < tmp_32_i_fu_888_p2) ? 1'b1 : 1'b0);

assign ult_fu_820_p2 = ((tmp_19_i_cast_fu_806_p1 < tmp_21_i_fu_814_p2) ? 1'b1 : 1'b0);

assign x_new_fu_1075_p3 = ((tmp_last_V_1_reg_2098[0:0] === 1'b1) ? 16'd0 : tmp_3_fu_1057_p2);

assign y_flag_1_fu_1063_p2 = (tmp_last_V_1_reg_2098 | ap_phi_reg_pp0_iter0_y_flag_reg_353);

assign y_new_1_fu_1068_p3 = ((tmp_last_V_1_reg_2098[0:0] === 1'b1) ? tmp_2_fu_1051_p2 : 16'd0);

always @ (posedge ap_clk) begin
    tmp_i2_i_reg_2119[3:0] <= 4'b0000;
    tmp_4_reg_2225[3:0] <= 4'b0000;
    tmp_1_reg_2239[3:0] <= 4'b0000;
    tmp_16_1_reg_2249[3:0] <= 4'b0000;
    tmp_21_1_reg_2259[3:0] <= 4'b0000;
    tmp_16_2_reg_2264[3:0] <= 4'b0000;
    tmp_21_2_reg_2274[3:0] <= 4'b0000;
    tmp_16_3_reg_2284[3:0] <= 4'b0000;
    tmp_21_3_reg_2294[3:0] <= 4'b0000;
    tmp_16_4_reg_2299[3:0] <= 4'b0000;
    tmp_21_4_reg_2309[3:0] <= 4'b0000;
    tmp_16_5_reg_2319[3:0] <= 4'b0000;
    tmp_21_5_reg_2329[3:0] <= 4'b0000;
    tmp_16_6_reg_2334[3:0] <= 4'b0000;
    tmp_21_6_reg_2344[3:0] <= 4'b0000;
    tmp_16_7_reg_2354[3:0] <= 4'b0000;
    tmp_21_7_reg_2364[3:0] <= 4'b0000;
    tmp_16_8_reg_2369[3:0] <= 4'b0000;
    tmp_21_8_reg_2379[3:0] <= 4'b0000;
    tmp_16_9_reg_2389[3:0] <= 4'b0000;
    tmp_21_9_reg_2399[3:0] <= 4'b0000;
    tmp_16_s_reg_2404[3:0] <= 4'b0000;
    tmp_21_s_reg_2414[3:0] <= 4'b0000;
    tmp_16_10_reg_2424[3:0] <= 4'b0000;
    tmp_21_10_reg_2434[3:0] <= 4'b0000;
    tmp_16_11_reg_2439[3:0] <= 4'b0000;
    tmp_21_11_reg_2449[3:0] <= 4'b0000;
    tmp_16_12_reg_2459[3:0] <= 4'b0000;
    tmp_21_12_reg_2469[3:0] <= 4'b0000;
    tmp_16_13_reg_2474[3:0] <= 4'b0000;
    tmp_21_13_reg_2484[3:0] <= 4'b0000;
    tmp_16_14_reg_2494[3:0] <= 4'b0000;
    tmp_21_14_reg_2504[3:0] <= 4'b0000;
    tmp_16_15_reg_2509[3:0] <= 4'b0000;
    tmp_21_15_reg_2519[3:0] <= 4'b0000;
    tmp_16_16_reg_2529[3:0] <= 4'b0000;
    tmp_21_16_reg_2539[3:0] <= 4'b0000;
    tmp_16_17_reg_2544[3:0] <= 4'b0000;
    tmp_21_17_reg_2554[3:0] <= 4'b0000;
end

endmodule //stream
