// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "stream.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic stream::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic stream::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> stream::ap_ST_fsm_pp0_stage0 = "1";
const bool stream::ap_const_boolean_1 = true;
const sc_lv<1> stream::ap_const_lv1_0 = "0";
const sc_lv<1> stream::ap_const_lv1_1 = "1";
const sc_lv<2> stream::ap_const_lv2_0 = "00";
const sc_lv<2> stream::ap_const_lv2_2 = "10";
const sc_lv<2> stream::ap_const_lv2_3 = "11";
const sc_lv<2> stream::ap_const_lv2_1 = "1";
const sc_lv<16> stream::ap_const_lv16_0 = "0000000000000000";
const sc_lv<32> stream::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool stream::ap_const_boolean_0 = false;
const int stream::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<16> stream::ap_const_lv16_2B3 = "1010110011";
const sc_lv<32> stream::ap_const_lv32_FF000000 = "11111111000000000000000000000000";
const sc_lv<32> stream::ap_const_lv32_FFFFFF = "111111111111111111111111";
const sc_lv<16> stream::ap_const_lv16_1 = "1";

stream::stream(sc_module_name name) : sc_module(name), mVcdFile(0) {
    stream_AXILiteS_s_axi_U = new stream_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("stream_AXILiteS_s_axi_U");
    stream_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    stream_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    stream_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    stream_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    stream_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    stream_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    stream_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    stream_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    stream_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    stream_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    stream_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    stream_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    stream_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    stream_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    stream_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    stream_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    stream_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    stream_AXILiteS_s_axi_U->ACLK(ap_clk);
    stream_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    stream_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    stream_AXILiteS_s_axi_U->mask(mask);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( src_V_data_V_0_vld_out );
    sensitive << ( dst_V_data_V_1_ack_in );
    sensitive << ( dst_V_keep_V_1_ack_in );
    sensitive << ( dst_V_strb_V_1_ack_in );
    sensitive << ( dst_V_user_V_1_ack_in );
    sensitive << ( dst_V_last_V_1_ack_in );
    sensitive << ( dst_V_id_V_1_ack_in );
    sensitive << ( dst_V_dest_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( src_V_data_V_0_vld_out );
    sensitive << ( dst_V_data_V_1_ack_in );
    sensitive << ( dst_V_keep_V_1_ack_in );
    sensitive << ( dst_V_strb_V_1_ack_in );
    sensitive << ( dst_V_user_V_1_ack_in );
    sensitive << ( dst_V_last_V_1_ack_in );
    sensitive << ( dst_V_id_V_1_ack_in );
    sensitive << ( dst_V_dest_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( src_V_data_V_0_vld_out );
    sensitive << ( dst_V_data_V_1_ack_in );
    sensitive << ( dst_V_keep_V_1_ack_in );
    sensitive << ( dst_V_strb_V_1_ack_in );
    sensitive << ( dst_V_user_V_1_ack_in );
    sensitive << ( dst_V_last_V_1_ack_in );
    sensitive << ( dst_V_id_V_1_ack_in );
    sensitive << ( dst_V_dest_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);
    sensitive << ( src_V_data_V_0_vld_out );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);
    sensitive << ( dst_V_data_V_1_ack_in );
    sensitive << ( dst_V_keep_V_1_ack_in );
    sensitive << ( dst_V_strb_V_1_ack_in );
    sensitive << ( dst_V_user_V_1_ack_in );
    sensitive << ( dst_V_last_V_1_ack_in );
    sensitive << ( dst_V_id_V_1_ack_in );
    sensitive << ( dst_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_condition_924);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_ap_reset_idle_pp0);

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_brmerge_fu_178_p2);
    sensitive << ( p_not1_fu_172_p2 );
    sensitive << ( invert_fu_162_p2 );

    SC_METHOD(thread_dst_TDATA);
    sensitive << ( dst_V_data_V_1_data_out );

    SC_METHOD(thread_dst_TDATA_blk_n);
    sensitive << ( dst_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter2 );

    SC_METHOD(thread_dst_TDEST);
    sensitive << ( dst_V_dest_V_1_data_out );

    SC_METHOD(thread_dst_TID);
    sensitive << ( dst_V_id_V_1_data_out );

    SC_METHOD(thread_dst_TKEEP);
    sensitive << ( dst_V_keep_V_1_data_out );

    SC_METHOD(thread_dst_TLAST);
    sensitive << ( dst_V_last_V_1_data_out );

    SC_METHOD(thread_dst_TSTRB);
    sensitive << ( dst_V_strb_V_1_data_out );

    SC_METHOD(thread_dst_TUSER);
    sensitive << ( dst_V_user_V_1_data_out );

    SC_METHOD(thread_dst_TVALID);
    sensitive << ( dst_V_dest_V_1_state );

    SC_METHOD(thread_dst_V_data_V_1_ack_in);
    sensitive << ( dst_V_data_V_1_state );

    SC_METHOD(thread_dst_V_data_V_1_ack_out);
    sensitive << ( dst_TREADY );

    SC_METHOD(thread_dst_V_data_V_1_data_out);
    sensitive << ( dst_V_data_V_1_payload_A );
    sensitive << ( dst_V_data_V_1_payload_B );
    sensitive << ( dst_V_data_V_1_sel );

    SC_METHOD(thread_dst_V_data_V_1_load_A);
    sensitive << ( dst_V_data_V_1_sel_wr );
    sensitive << ( dst_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_data_V_1_load_B);
    sensitive << ( dst_V_data_V_1_sel_wr );
    sensitive << ( dst_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_data_V_1_sel);
    sensitive << ( dst_V_data_V_1_sel_rd );

    SC_METHOD(thread_dst_V_data_V_1_state_cmp_full);
    sensitive << ( dst_V_data_V_1_state );

    SC_METHOD(thread_dst_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_V_data_V_1_vld_out);
    sensitive << ( dst_V_data_V_1_state );

    SC_METHOD(thread_dst_V_dest_V_1_ack_in);
    sensitive << ( dst_V_dest_V_1_state );

    SC_METHOD(thread_dst_V_dest_V_1_ack_out);
    sensitive << ( dst_TREADY );

    SC_METHOD(thread_dst_V_dest_V_1_data_out);
    sensitive << ( dst_V_dest_V_1_payload_A );
    sensitive << ( dst_V_dest_V_1_payload_B );
    sensitive << ( dst_V_dest_V_1_sel );

    SC_METHOD(thread_dst_V_dest_V_1_load_A);
    sensitive << ( dst_V_dest_V_1_sel_wr );
    sensitive << ( dst_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_dest_V_1_load_B);
    sensitive << ( dst_V_dest_V_1_sel_wr );
    sensitive << ( dst_V_dest_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_dest_V_1_sel);
    sensitive << ( dst_V_dest_V_1_sel_rd );

    SC_METHOD(thread_dst_V_dest_V_1_state_cmp_full);
    sensitive << ( dst_V_dest_V_1_state );

    SC_METHOD(thread_dst_V_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_V_dest_V_1_vld_out);
    sensitive << ( dst_V_dest_V_1_state );

    SC_METHOD(thread_dst_V_id_V_1_ack_in);
    sensitive << ( dst_V_id_V_1_state );

    SC_METHOD(thread_dst_V_id_V_1_ack_out);
    sensitive << ( dst_TREADY );

    SC_METHOD(thread_dst_V_id_V_1_data_out);
    sensitive << ( dst_V_id_V_1_payload_A );
    sensitive << ( dst_V_id_V_1_payload_B );
    sensitive << ( dst_V_id_V_1_sel );

    SC_METHOD(thread_dst_V_id_V_1_load_A);
    sensitive << ( dst_V_id_V_1_sel_wr );
    sensitive << ( dst_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_id_V_1_load_B);
    sensitive << ( dst_V_id_V_1_sel_wr );
    sensitive << ( dst_V_id_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_id_V_1_sel);
    sensitive << ( dst_V_id_V_1_sel_rd );

    SC_METHOD(thread_dst_V_id_V_1_state_cmp_full);
    sensitive << ( dst_V_id_V_1_state );

    SC_METHOD(thread_dst_V_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_V_id_V_1_vld_out);
    sensitive << ( dst_V_id_V_1_state );

    SC_METHOD(thread_dst_V_keep_V_1_ack_in);
    sensitive << ( dst_V_keep_V_1_state );

    SC_METHOD(thread_dst_V_keep_V_1_ack_out);
    sensitive << ( dst_TREADY );

    SC_METHOD(thread_dst_V_keep_V_1_data_out);
    sensitive << ( dst_V_keep_V_1_payload_A );
    sensitive << ( dst_V_keep_V_1_payload_B );
    sensitive << ( dst_V_keep_V_1_sel );

    SC_METHOD(thread_dst_V_keep_V_1_load_A);
    sensitive << ( dst_V_keep_V_1_sel_wr );
    sensitive << ( dst_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_keep_V_1_load_B);
    sensitive << ( dst_V_keep_V_1_sel_wr );
    sensitive << ( dst_V_keep_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_keep_V_1_sel);
    sensitive << ( dst_V_keep_V_1_sel_rd );

    SC_METHOD(thread_dst_V_keep_V_1_state_cmp_full);
    sensitive << ( dst_V_keep_V_1_state );

    SC_METHOD(thread_dst_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_V_keep_V_1_vld_out);
    sensitive << ( dst_V_keep_V_1_state );

    SC_METHOD(thread_dst_V_last_V_1_ack_in);
    sensitive << ( dst_V_last_V_1_state );

    SC_METHOD(thread_dst_V_last_V_1_ack_out);
    sensitive << ( dst_TREADY );

    SC_METHOD(thread_dst_V_last_V_1_data_out);
    sensitive << ( dst_V_last_V_1_payload_A );
    sensitive << ( dst_V_last_V_1_payload_B );
    sensitive << ( dst_V_last_V_1_sel );

    SC_METHOD(thread_dst_V_last_V_1_load_A);
    sensitive << ( dst_V_last_V_1_sel_wr );
    sensitive << ( dst_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_last_V_1_load_B);
    sensitive << ( dst_V_last_V_1_sel_wr );
    sensitive << ( dst_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_last_V_1_sel);
    sensitive << ( dst_V_last_V_1_sel_rd );

    SC_METHOD(thread_dst_V_last_V_1_state_cmp_full);
    sensitive << ( dst_V_last_V_1_state );

    SC_METHOD(thread_dst_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_V_last_V_1_vld_out);
    sensitive << ( dst_V_last_V_1_state );

    SC_METHOD(thread_dst_V_strb_V_1_ack_in);
    sensitive << ( dst_V_strb_V_1_state );

    SC_METHOD(thread_dst_V_strb_V_1_ack_out);
    sensitive << ( dst_TREADY );

    SC_METHOD(thread_dst_V_strb_V_1_data_out);
    sensitive << ( dst_V_strb_V_1_payload_A );
    sensitive << ( dst_V_strb_V_1_payload_B );
    sensitive << ( dst_V_strb_V_1_sel );

    SC_METHOD(thread_dst_V_strb_V_1_load_A);
    sensitive << ( dst_V_strb_V_1_sel_wr );
    sensitive << ( dst_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_strb_V_1_load_B);
    sensitive << ( dst_V_strb_V_1_sel_wr );
    sensitive << ( dst_V_strb_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_strb_V_1_sel);
    sensitive << ( dst_V_strb_V_1_sel_rd );

    SC_METHOD(thread_dst_V_strb_V_1_state_cmp_full);
    sensitive << ( dst_V_strb_V_1_state );

    SC_METHOD(thread_dst_V_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_V_strb_V_1_vld_out);
    sensitive << ( dst_V_strb_V_1_state );

    SC_METHOD(thread_dst_V_user_V_1_ack_in);
    sensitive << ( dst_V_user_V_1_state );

    SC_METHOD(thread_dst_V_user_V_1_ack_out);
    sensitive << ( dst_TREADY );

    SC_METHOD(thread_dst_V_user_V_1_data_out);
    sensitive << ( dst_V_user_V_1_payload_A );
    sensitive << ( dst_V_user_V_1_payload_B );
    sensitive << ( dst_V_user_V_1_sel );

    SC_METHOD(thread_dst_V_user_V_1_load_A);
    sensitive << ( dst_V_user_V_1_sel_wr );
    sensitive << ( dst_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_user_V_1_load_B);
    sensitive << ( dst_V_user_V_1_sel_wr );
    sensitive << ( dst_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_dst_V_user_V_1_sel);
    sensitive << ( dst_V_user_V_1_sel_rd );

    SC_METHOD(thread_dst_V_user_V_1_state_cmp_full);
    sensitive << ( dst_V_user_V_1_state );

    SC_METHOD(thread_dst_V_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dst_V_user_V_1_vld_out);
    sensitive << ( dst_V_user_V_1_state );

    SC_METHOD(thread_invert_fu_162_p2);
    sensitive << ( tmp_fu_159_p1 );

    SC_METHOD(thread_p_not1_fu_172_p2);
    sensitive << ( x );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_p_not_fu_184_p2);
    sensitive << ( src_V_data_V_0_data_out );

    SC_METHOD(thread_p_s_fu_190_p2);
    sensitive << ( p_not_fu_184_p2 );

    SC_METHOD(thread_src_TDATA_blk_n);
    sensitive << ( src_V_data_V_0_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );

    SC_METHOD(thread_src_TREADY);
    sensitive << ( src_V_dest_V_0_state );

    SC_METHOD(thread_src_V_data_V_0_ack_in);
    sensitive << ( src_V_data_V_0_state );

    SC_METHOD(thread_src_V_data_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_V_data_V_0_data_out);
    sensitive << ( src_V_data_V_0_payload_A );
    sensitive << ( src_V_data_V_0_payload_B );
    sensitive << ( src_V_data_V_0_sel );

    SC_METHOD(thread_src_V_data_V_0_load_A);
    sensitive << ( src_V_data_V_0_sel_wr );
    sensitive << ( src_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_data_V_0_load_B);
    sensitive << ( src_V_data_V_0_sel_wr );
    sensitive << ( src_V_data_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_data_V_0_sel);
    sensitive << ( src_V_data_V_0_sel_rd );

    SC_METHOD(thread_src_V_data_V_0_state_cmp_full);
    sensitive << ( src_V_data_V_0_state );

    SC_METHOD(thread_src_V_data_V_0_vld_in);
    sensitive << ( src_TVALID );

    SC_METHOD(thread_src_V_data_V_0_vld_out);
    sensitive << ( src_V_data_V_0_state );

    SC_METHOD(thread_src_V_dest_V_0_ack_in);
    sensitive << ( src_V_dest_V_0_state );

    SC_METHOD(thread_src_V_dest_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_V_dest_V_0_data_out);
    sensitive << ( src_V_dest_V_0_payload_A );
    sensitive << ( src_V_dest_V_0_payload_B );
    sensitive << ( src_V_dest_V_0_sel );

    SC_METHOD(thread_src_V_dest_V_0_load_A);
    sensitive << ( src_V_dest_V_0_sel_wr );
    sensitive << ( src_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_dest_V_0_load_B);
    sensitive << ( src_V_dest_V_0_sel_wr );
    sensitive << ( src_V_dest_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_dest_V_0_sel);
    sensitive << ( src_V_dest_V_0_sel_rd );

    SC_METHOD(thread_src_V_dest_V_0_state_cmp_full);
    sensitive << ( src_V_dest_V_0_state );

    SC_METHOD(thread_src_V_dest_V_0_vld_in);
    sensitive << ( src_TVALID );

    SC_METHOD(thread_src_V_dest_V_0_vld_out);
    sensitive << ( src_V_dest_V_0_state );

    SC_METHOD(thread_src_V_id_V_0_ack_in);
    sensitive << ( src_V_id_V_0_state );

    SC_METHOD(thread_src_V_id_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_V_id_V_0_data_out);
    sensitive << ( src_V_id_V_0_payload_A );
    sensitive << ( src_V_id_V_0_payload_B );
    sensitive << ( src_V_id_V_0_sel );

    SC_METHOD(thread_src_V_id_V_0_load_A);
    sensitive << ( src_V_id_V_0_sel_wr );
    sensitive << ( src_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_id_V_0_load_B);
    sensitive << ( src_V_id_V_0_sel_wr );
    sensitive << ( src_V_id_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_id_V_0_sel);
    sensitive << ( src_V_id_V_0_sel_rd );

    SC_METHOD(thread_src_V_id_V_0_state_cmp_full);
    sensitive << ( src_V_id_V_0_state );

    SC_METHOD(thread_src_V_id_V_0_vld_in);
    sensitive << ( src_TVALID );

    SC_METHOD(thread_src_V_id_V_0_vld_out);
    sensitive << ( src_V_id_V_0_state );

    SC_METHOD(thread_src_V_keep_V_0_ack_in);
    sensitive << ( src_V_keep_V_0_state );

    SC_METHOD(thread_src_V_keep_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_V_keep_V_0_data_out);
    sensitive << ( src_V_keep_V_0_payload_A );
    sensitive << ( src_V_keep_V_0_payload_B );
    sensitive << ( src_V_keep_V_0_sel );

    SC_METHOD(thread_src_V_keep_V_0_load_A);
    sensitive << ( src_V_keep_V_0_sel_wr );
    sensitive << ( src_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_keep_V_0_load_B);
    sensitive << ( src_V_keep_V_0_sel_wr );
    sensitive << ( src_V_keep_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_keep_V_0_sel);
    sensitive << ( src_V_keep_V_0_sel_rd );

    SC_METHOD(thread_src_V_keep_V_0_state_cmp_full);
    sensitive << ( src_V_keep_V_0_state );

    SC_METHOD(thread_src_V_keep_V_0_vld_in);
    sensitive << ( src_TVALID );

    SC_METHOD(thread_src_V_keep_V_0_vld_out);
    sensitive << ( src_V_keep_V_0_state );

    SC_METHOD(thread_src_V_last_V_0_ack_in);
    sensitive << ( src_V_last_V_0_state );

    SC_METHOD(thread_src_V_last_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_V_last_V_0_data_out);
    sensitive << ( src_V_last_V_0_payload_A );
    sensitive << ( src_V_last_V_0_payload_B );
    sensitive << ( src_V_last_V_0_sel );

    SC_METHOD(thread_src_V_last_V_0_load_A);
    sensitive << ( src_V_last_V_0_sel_wr );
    sensitive << ( src_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_last_V_0_load_B);
    sensitive << ( src_V_last_V_0_sel_wr );
    sensitive << ( src_V_last_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_last_V_0_sel);
    sensitive << ( src_V_last_V_0_sel_rd );

    SC_METHOD(thread_src_V_last_V_0_state_cmp_full);
    sensitive << ( src_V_last_V_0_state );

    SC_METHOD(thread_src_V_last_V_0_vld_in);
    sensitive << ( src_TVALID );

    SC_METHOD(thread_src_V_last_V_0_vld_out);
    sensitive << ( src_V_last_V_0_state );

    SC_METHOD(thread_src_V_strb_V_0_ack_in);
    sensitive << ( src_V_strb_V_0_state );

    SC_METHOD(thread_src_V_strb_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_V_strb_V_0_data_out);
    sensitive << ( src_V_strb_V_0_payload_A );
    sensitive << ( src_V_strb_V_0_payload_B );
    sensitive << ( src_V_strb_V_0_sel );

    SC_METHOD(thread_src_V_strb_V_0_load_A);
    sensitive << ( src_V_strb_V_0_sel_wr );
    sensitive << ( src_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_strb_V_0_load_B);
    sensitive << ( src_V_strb_V_0_sel_wr );
    sensitive << ( src_V_strb_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_strb_V_0_sel);
    sensitive << ( src_V_strb_V_0_sel_rd );

    SC_METHOD(thread_src_V_strb_V_0_state_cmp_full);
    sensitive << ( src_V_strb_V_0_state );

    SC_METHOD(thread_src_V_strb_V_0_vld_in);
    sensitive << ( src_TVALID );

    SC_METHOD(thread_src_V_strb_V_0_vld_out);
    sensitive << ( src_V_strb_V_0_state );

    SC_METHOD(thread_src_V_user_V_0_ack_in);
    sensitive << ( src_V_user_V_0_state );

    SC_METHOD(thread_src_V_user_V_0_ack_out);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_src_V_user_V_0_data_out);
    sensitive << ( src_V_user_V_0_payload_A );
    sensitive << ( src_V_user_V_0_payload_B );
    sensitive << ( src_V_user_V_0_sel );

    SC_METHOD(thread_src_V_user_V_0_load_A);
    sensitive << ( src_V_user_V_0_sel_wr );
    sensitive << ( src_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_user_V_0_load_B);
    sensitive << ( src_V_user_V_0_sel_wr );
    sensitive << ( src_V_user_V_0_state_cmp_full );

    SC_METHOD(thread_src_V_user_V_0_sel);
    sensitive << ( src_V_user_V_0_sel_rd );

    SC_METHOD(thread_src_V_user_V_0_state_cmp_full);
    sensitive << ( src_V_user_V_0_state );

    SC_METHOD(thread_src_V_user_V_0_vld_in);
    sensitive << ( src_TVALID );

    SC_METHOD(thread_src_V_user_V_0_vld_out);
    sensitive << ( src_V_user_V_0_state );

    SC_METHOD(thread_tmp_4_fu_227_p2);
    sensitive << ( y );

    SC_METHOD(thread_tmp_5_fu_205_p2);
    sensitive << ( x );

    SC_METHOD(thread_tmp_data_V_fu_196_p3);
    sensitive << ( src_V_data_V_0_data_out );
    sensitive << ( brmerge_fu_178_p2 );
    sensitive << ( p_s_fu_190_p2 );

    SC_METHOD(thread_tmp_fu_159_p1);
    sensitive << ( mask_read_reg_239 );

    SC_METHOD(thread_tmp_last_V_fu_144_p1);
    sensitive << ( src_V_last_V_0_data_out );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_reset_idle_pp0 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    src_V_data_V_0_sel_rd = SC_LOGIC_0;
    src_V_data_V_0_sel_wr = SC_LOGIC_0;
    src_V_data_V_0_state = "00";
    src_V_keep_V_0_sel_rd = SC_LOGIC_0;
    src_V_keep_V_0_sel_wr = SC_LOGIC_0;
    src_V_keep_V_0_state = "00";
    src_V_strb_V_0_sel_rd = SC_LOGIC_0;
    src_V_strb_V_0_sel_wr = SC_LOGIC_0;
    src_V_strb_V_0_state = "00";
    src_V_user_V_0_sel_rd = SC_LOGIC_0;
    src_V_user_V_0_sel_wr = SC_LOGIC_0;
    src_V_user_V_0_state = "00";
    src_V_last_V_0_sel_rd = SC_LOGIC_0;
    src_V_last_V_0_sel_wr = SC_LOGIC_0;
    src_V_last_V_0_state = "00";
    src_V_id_V_0_sel_rd = SC_LOGIC_0;
    src_V_id_V_0_sel_wr = SC_LOGIC_0;
    src_V_id_V_0_state = "00";
    src_V_dest_V_0_sel_rd = SC_LOGIC_0;
    src_V_dest_V_0_sel_wr = SC_LOGIC_0;
    src_V_dest_V_0_state = "00";
    dst_V_data_V_1_sel_rd = SC_LOGIC_0;
    dst_V_data_V_1_sel_wr = SC_LOGIC_0;
    dst_V_data_V_1_state = "00";
    dst_V_keep_V_1_sel_rd = SC_LOGIC_0;
    dst_V_keep_V_1_sel_wr = SC_LOGIC_0;
    dst_V_keep_V_1_state = "00";
    dst_V_strb_V_1_sel_rd = SC_LOGIC_0;
    dst_V_strb_V_1_sel_wr = SC_LOGIC_0;
    dst_V_strb_V_1_state = "00";
    dst_V_user_V_1_sel_rd = SC_LOGIC_0;
    dst_V_user_V_1_sel_wr = SC_LOGIC_0;
    dst_V_user_V_1_state = "00";
    dst_V_last_V_1_sel_rd = SC_LOGIC_0;
    dst_V_last_V_1_sel_wr = SC_LOGIC_0;
    dst_V_last_V_1_state = "00";
    dst_V_id_V_1_sel_rd = SC_LOGIC_0;
    dst_V_id_V_1_sel_wr = SC_LOGIC_0;
    dst_V_id_V_1_state = "00";
    dst_V_dest_V_1_sel_rd = SC_LOGIC_0;
    dst_V_dest_V_1_sel_wr = SC_LOGIC_0;
    dst_V_dest_V_1_state = "00";
    x = "0000000000000000";
    y = "0000000000000000";
    ap_CS_fsm = "1";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "stream_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, src_TDATA, "(port)src_TDATA");
    sc_trace(mVcdFile, src_TVALID, "(port)src_TVALID");
    sc_trace(mVcdFile, src_TREADY, "(port)src_TREADY");
    sc_trace(mVcdFile, src_TKEEP, "(port)src_TKEEP");
    sc_trace(mVcdFile, src_TSTRB, "(port)src_TSTRB");
    sc_trace(mVcdFile, src_TUSER, "(port)src_TUSER");
    sc_trace(mVcdFile, src_TLAST, "(port)src_TLAST");
    sc_trace(mVcdFile, src_TID, "(port)src_TID");
    sc_trace(mVcdFile, src_TDEST, "(port)src_TDEST");
    sc_trace(mVcdFile, dst_TDATA, "(port)dst_TDATA");
    sc_trace(mVcdFile, dst_TVALID, "(port)dst_TVALID");
    sc_trace(mVcdFile, dst_TREADY, "(port)dst_TREADY");
    sc_trace(mVcdFile, dst_TKEEP, "(port)dst_TKEEP");
    sc_trace(mVcdFile, dst_TSTRB, "(port)dst_TSTRB");
    sc_trace(mVcdFile, dst_TUSER, "(port)dst_TUSER");
    sc_trace(mVcdFile, dst_TLAST, "(port)dst_TLAST");
    sc_trace(mVcdFile, dst_TID, "(port)dst_TID");
    sc_trace(mVcdFile, dst_TDEST, "(port)dst_TDEST");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, src_V_data_V_0_data_out, "src_V_data_V_0_data_out");
    sc_trace(mVcdFile, src_V_data_V_0_vld_in, "src_V_data_V_0_vld_in");
    sc_trace(mVcdFile, src_V_data_V_0_vld_out, "src_V_data_V_0_vld_out");
    sc_trace(mVcdFile, src_V_data_V_0_ack_in, "src_V_data_V_0_ack_in");
    sc_trace(mVcdFile, src_V_data_V_0_ack_out, "src_V_data_V_0_ack_out");
    sc_trace(mVcdFile, src_V_data_V_0_payload_A, "src_V_data_V_0_payload_A");
    sc_trace(mVcdFile, src_V_data_V_0_payload_B, "src_V_data_V_0_payload_B");
    sc_trace(mVcdFile, src_V_data_V_0_sel_rd, "src_V_data_V_0_sel_rd");
    sc_trace(mVcdFile, src_V_data_V_0_sel_wr, "src_V_data_V_0_sel_wr");
    sc_trace(mVcdFile, src_V_data_V_0_sel, "src_V_data_V_0_sel");
    sc_trace(mVcdFile, src_V_data_V_0_load_A, "src_V_data_V_0_load_A");
    sc_trace(mVcdFile, src_V_data_V_0_load_B, "src_V_data_V_0_load_B");
    sc_trace(mVcdFile, src_V_data_V_0_state, "src_V_data_V_0_state");
    sc_trace(mVcdFile, src_V_data_V_0_state_cmp_full, "src_V_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, src_V_keep_V_0_data_out, "src_V_keep_V_0_data_out");
    sc_trace(mVcdFile, src_V_keep_V_0_vld_in, "src_V_keep_V_0_vld_in");
    sc_trace(mVcdFile, src_V_keep_V_0_vld_out, "src_V_keep_V_0_vld_out");
    sc_trace(mVcdFile, src_V_keep_V_0_ack_in, "src_V_keep_V_0_ack_in");
    sc_trace(mVcdFile, src_V_keep_V_0_ack_out, "src_V_keep_V_0_ack_out");
    sc_trace(mVcdFile, src_V_keep_V_0_payload_A, "src_V_keep_V_0_payload_A");
    sc_trace(mVcdFile, src_V_keep_V_0_payload_B, "src_V_keep_V_0_payload_B");
    sc_trace(mVcdFile, src_V_keep_V_0_sel_rd, "src_V_keep_V_0_sel_rd");
    sc_trace(mVcdFile, src_V_keep_V_0_sel_wr, "src_V_keep_V_0_sel_wr");
    sc_trace(mVcdFile, src_V_keep_V_0_sel, "src_V_keep_V_0_sel");
    sc_trace(mVcdFile, src_V_keep_V_0_load_A, "src_V_keep_V_0_load_A");
    sc_trace(mVcdFile, src_V_keep_V_0_load_B, "src_V_keep_V_0_load_B");
    sc_trace(mVcdFile, src_V_keep_V_0_state, "src_V_keep_V_0_state");
    sc_trace(mVcdFile, src_V_keep_V_0_state_cmp_full, "src_V_keep_V_0_state_cmp_full");
    sc_trace(mVcdFile, src_V_strb_V_0_data_out, "src_V_strb_V_0_data_out");
    sc_trace(mVcdFile, src_V_strb_V_0_vld_in, "src_V_strb_V_0_vld_in");
    sc_trace(mVcdFile, src_V_strb_V_0_vld_out, "src_V_strb_V_0_vld_out");
    sc_trace(mVcdFile, src_V_strb_V_0_ack_in, "src_V_strb_V_0_ack_in");
    sc_trace(mVcdFile, src_V_strb_V_0_ack_out, "src_V_strb_V_0_ack_out");
    sc_trace(mVcdFile, src_V_strb_V_0_payload_A, "src_V_strb_V_0_payload_A");
    sc_trace(mVcdFile, src_V_strb_V_0_payload_B, "src_V_strb_V_0_payload_B");
    sc_trace(mVcdFile, src_V_strb_V_0_sel_rd, "src_V_strb_V_0_sel_rd");
    sc_trace(mVcdFile, src_V_strb_V_0_sel_wr, "src_V_strb_V_0_sel_wr");
    sc_trace(mVcdFile, src_V_strb_V_0_sel, "src_V_strb_V_0_sel");
    sc_trace(mVcdFile, src_V_strb_V_0_load_A, "src_V_strb_V_0_load_A");
    sc_trace(mVcdFile, src_V_strb_V_0_load_B, "src_V_strb_V_0_load_B");
    sc_trace(mVcdFile, src_V_strb_V_0_state, "src_V_strb_V_0_state");
    sc_trace(mVcdFile, src_V_strb_V_0_state_cmp_full, "src_V_strb_V_0_state_cmp_full");
    sc_trace(mVcdFile, src_V_user_V_0_data_out, "src_V_user_V_0_data_out");
    sc_trace(mVcdFile, src_V_user_V_0_vld_in, "src_V_user_V_0_vld_in");
    sc_trace(mVcdFile, src_V_user_V_0_vld_out, "src_V_user_V_0_vld_out");
    sc_trace(mVcdFile, src_V_user_V_0_ack_in, "src_V_user_V_0_ack_in");
    sc_trace(mVcdFile, src_V_user_V_0_ack_out, "src_V_user_V_0_ack_out");
    sc_trace(mVcdFile, src_V_user_V_0_payload_A, "src_V_user_V_0_payload_A");
    sc_trace(mVcdFile, src_V_user_V_0_payload_B, "src_V_user_V_0_payload_B");
    sc_trace(mVcdFile, src_V_user_V_0_sel_rd, "src_V_user_V_0_sel_rd");
    sc_trace(mVcdFile, src_V_user_V_0_sel_wr, "src_V_user_V_0_sel_wr");
    sc_trace(mVcdFile, src_V_user_V_0_sel, "src_V_user_V_0_sel");
    sc_trace(mVcdFile, src_V_user_V_0_load_A, "src_V_user_V_0_load_A");
    sc_trace(mVcdFile, src_V_user_V_0_load_B, "src_V_user_V_0_load_B");
    sc_trace(mVcdFile, src_V_user_V_0_state, "src_V_user_V_0_state");
    sc_trace(mVcdFile, src_V_user_V_0_state_cmp_full, "src_V_user_V_0_state_cmp_full");
    sc_trace(mVcdFile, src_V_last_V_0_data_out, "src_V_last_V_0_data_out");
    sc_trace(mVcdFile, src_V_last_V_0_vld_in, "src_V_last_V_0_vld_in");
    sc_trace(mVcdFile, src_V_last_V_0_vld_out, "src_V_last_V_0_vld_out");
    sc_trace(mVcdFile, src_V_last_V_0_ack_in, "src_V_last_V_0_ack_in");
    sc_trace(mVcdFile, src_V_last_V_0_ack_out, "src_V_last_V_0_ack_out");
    sc_trace(mVcdFile, src_V_last_V_0_payload_A, "src_V_last_V_0_payload_A");
    sc_trace(mVcdFile, src_V_last_V_0_payload_B, "src_V_last_V_0_payload_B");
    sc_trace(mVcdFile, src_V_last_V_0_sel_rd, "src_V_last_V_0_sel_rd");
    sc_trace(mVcdFile, src_V_last_V_0_sel_wr, "src_V_last_V_0_sel_wr");
    sc_trace(mVcdFile, src_V_last_V_0_sel, "src_V_last_V_0_sel");
    sc_trace(mVcdFile, src_V_last_V_0_load_A, "src_V_last_V_0_load_A");
    sc_trace(mVcdFile, src_V_last_V_0_load_B, "src_V_last_V_0_load_B");
    sc_trace(mVcdFile, src_V_last_V_0_state, "src_V_last_V_0_state");
    sc_trace(mVcdFile, src_V_last_V_0_state_cmp_full, "src_V_last_V_0_state_cmp_full");
    sc_trace(mVcdFile, src_V_id_V_0_data_out, "src_V_id_V_0_data_out");
    sc_trace(mVcdFile, src_V_id_V_0_vld_in, "src_V_id_V_0_vld_in");
    sc_trace(mVcdFile, src_V_id_V_0_vld_out, "src_V_id_V_0_vld_out");
    sc_trace(mVcdFile, src_V_id_V_0_ack_in, "src_V_id_V_0_ack_in");
    sc_trace(mVcdFile, src_V_id_V_0_ack_out, "src_V_id_V_0_ack_out");
    sc_trace(mVcdFile, src_V_id_V_0_payload_A, "src_V_id_V_0_payload_A");
    sc_trace(mVcdFile, src_V_id_V_0_payload_B, "src_V_id_V_0_payload_B");
    sc_trace(mVcdFile, src_V_id_V_0_sel_rd, "src_V_id_V_0_sel_rd");
    sc_trace(mVcdFile, src_V_id_V_0_sel_wr, "src_V_id_V_0_sel_wr");
    sc_trace(mVcdFile, src_V_id_V_0_sel, "src_V_id_V_0_sel");
    sc_trace(mVcdFile, src_V_id_V_0_load_A, "src_V_id_V_0_load_A");
    sc_trace(mVcdFile, src_V_id_V_0_load_B, "src_V_id_V_0_load_B");
    sc_trace(mVcdFile, src_V_id_V_0_state, "src_V_id_V_0_state");
    sc_trace(mVcdFile, src_V_id_V_0_state_cmp_full, "src_V_id_V_0_state_cmp_full");
    sc_trace(mVcdFile, src_V_dest_V_0_data_out, "src_V_dest_V_0_data_out");
    sc_trace(mVcdFile, src_V_dest_V_0_vld_in, "src_V_dest_V_0_vld_in");
    sc_trace(mVcdFile, src_V_dest_V_0_vld_out, "src_V_dest_V_0_vld_out");
    sc_trace(mVcdFile, src_V_dest_V_0_ack_in, "src_V_dest_V_0_ack_in");
    sc_trace(mVcdFile, src_V_dest_V_0_ack_out, "src_V_dest_V_0_ack_out");
    sc_trace(mVcdFile, src_V_dest_V_0_payload_A, "src_V_dest_V_0_payload_A");
    sc_trace(mVcdFile, src_V_dest_V_0_payload_B, "src_V_dest_V_0_payload_B");
    sc_trace(mVcdFile, src_V_dest_V_0_sel_rd, "src_V_dest_V_0_sel_rd");
    sc_trace(mVcdFile, src_V_dest_V_0_sel_wr, "src_V_dest_V_0_sel_wr");
    sc_trace(mVcdFile, src_V_dest_V_0_sel, "src_V_dest_V_0_sel");
    sc_trace(mVcdFile, src_V_dest_V_0_load_A, "src_V_dest_V_0_load_A");
    sc_trace(mVcdFile, src_V_dest_V_0_load_B, "src_V_dest_V_0_load_B");
    sc_trace(mVcdFile, src_V_dest_V_0_state, "src_V_dest_V_0_state");
    sc_trace(mVcdFile, src_V_dest_V_0_state_cmp_full, "src_V_dest_V_0_state_cmp_full");
    sc_trace(mVcdFile, dst_V_data_V_1_data_out, "dst_V_data_V_1_data_out");
    sc_trace(mVcdFile, dst_V_data_V_1_vld_in, "dst_V_data_V_1_vld_in");
    sc_trace(mVcdFile, dst_V_data_V_1_vld_out, "dst_V_data_V_1_vld_out");
    sc_trace(mVcdFile, dst_V_data_V_1_ack_in, "dst_V_data_V_1_ack_in");
    sc_trace(mVcdFile, dst_V_data_V_1_ack_out, "dst_V_data_V_1_ack_out");
    sc_trace(mVcdFile, dst_V_data_V_1_payload_A, "dst_V_data_V_1_payload_A");
    sc_trace(mVcdFile, dst_V_data_V_1_payload_B, "dst_V_data_V_1_payload_B");
    sc_trace(mVcdFile, dst_V_data_V_1_sel_rd, "dst_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, dst_V_data_V_1_sel_wr, "dst_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, dst_V_data_V_1_sel, "dst_V_data_V_1_sel");
    sc_trace(mVcdFile, dst_V_data_V_1_load_A, "dst_V_data_V_1_load_A");
    sc_trace(mVcdFile, dst_V_data_V_1_load_B, "dst_V_data_V_1_load_B");
    sc_trace(mVcdFile, dst_V_data_V_1_state, "dst_V_data_V_1_state");
    sc_trace(mVcdFile, dst_V_data_V_1_state_cmp_full, "dst_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, dst_V_keep_V_1_data_out, "dst_V_keep_V_1_data_out");
    sc_trace(mVcdFile, dst_V_keep_V_1_vld_in, "dst_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, dst_V_keep_V_1_vld_out, "dst_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, dst_V_keep_V_1_ack_in, "dst_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, dst_V_keep_V_1_ack_out, "dst_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, dst_V_keep_V_1_payload_A, "dst_V_keep_V_1_payload_A");
    sc_trace(mVcdFile, dst_V_keep_V_1_payload_B, "dst_V_keep_V_1_payload_B");
    sc_trace(mVcdFile, dst_V_keep_V_1_sel_rd, "dst_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, dst_V_keep_V_1_sel_wr, "dst_V_keep_V_1_sel_wr");
    sc_trace(mVcdFile, dst_V_keep_V_1_sel, "dst_V_keep_V_1_sel");
    sc_trace(mVcdFile, dst_V_keep_V_1_load_A, "dst_V_keep_V_1_load_A");
    sc_trace(mVcdFile, dst_V_keep_V_1_load_B, "dst_V_keep_V_1_load_B");
    sc_trace(mVcdFile, dst_V_keep_V_1_state, "dst_V_keep_V_1_state");
    sc_trace(mVcdFile, dst_V_keep_V_1_state_cmp_full, "dst_V_keep_V_1_state_cmp_full");
    sc_trace(mVcdFile, dst_V_strb_V_1_data_out, "dst_V_strb_V_1_data_out");
    sc_trace(mVcdFile, dst_V_strb_V_1_vld_in, "dst_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, dst_V_strb_V_1_vld_out, "dst_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, dst_V_strb_V_1_ack_in, "dst_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, dst_V_strb_V_1_ack_out, "dst_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, dst_V_strb_V_1_payload_A, "dst_V_strb_V_1_payload_A");
    sc_trace(mVcdFile, dst_V_strb_V_1_payload_B, "dst_V_strb_V_1_payload_B");
    sc_trace(mVcdFile, dst_V_strb_V_1_sel_rd, "dst_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, dst_V_strb_V_1_sel_wr, "dst_V_strb_V_1_sel_wr");
    sc_trace(mVcdFile, dst_V_strb_V_1_sel, "dst_V_strb_V_1_sel");
    sc_trace(mVcdFile, dst_V_strb_V_1_load_A, "dst_V_strb_V_1_load_A");
    sc_trace(mVcdFile, dst_V_strb_V_1_load_B, "dst_V_strb_V_1_load_B");
    sc_trace(mVcdFile, dst_V_strb_V_1_state, "dst_V_strb_V_1_state");
    sc_trace(mVcdFile, dst_V_strb_V_1_state_cmp_full, "dst_V_strb_V_1_state_cmp_full");
    sc_trace(mVcdFile, dst_V_user_V_1_data_out, "dst_V_user_V_1_data_out");
    sc_trace(mVcdFile, dst_V_user_V_1_vld_in, "dst_V_user_V_1_vld_in");
    sc_trace(mVcdFile, dst_V_user_V_1_vld_out, "dst_V_user_V_1_vld_out");
    sc_trace(mVcdFile, dst_V_user_V_1_ack_in, "dst_V_user_V_1_ack_in");
    sc_trace(mVcdFile, dst_V_user_V_1_ack_out, "dst_V_user_V_1_ack_out");
    sc_trace(mVcdFile, dst_V_user_V_1_payload_A, "dst_V_user_V_1_payload_A");
    sc_trace(mVcdFile, dst_V_user_V_1_payload_B, "dst_V_user_V_1_payload_B");
    sc_trace(mVcdFile, dst_V_user_V_1_sel_rd, "dst_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, dst_V_user_V_1_sel_wr, "dst_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, dst_V_user_V_1_sel, "dst_V_user_V_1_sel");
    sc_trace(mVcdFile, dst_V_user_V_1_load_A, "dst_V_user_V_1_load_A");
    sc_trace(mVcdFile, dst_V_user_V_1_load_B, "dst_V_user_V_1_load_B");
    sc_trace(mVcdFile, dst_V_user_V_1_state, "dst_V_user_V_1_state");
    sc_trace(mVcdFile, dst_V_user_V_1_state_cmp_full, "dst_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, dst_V_last_V_1_data_out, "dst_V_last_V_1_data_out");
    sc_trace(mVcdFile, dst_V_last_V_1_vld_in, "dst_V_last_V_1_vld_in");
    sc_trace(mVcdFile, dst_V_last_V_1_vld_out, "dst_V_last_V_1_vld_out");
    sc_trace(mVcdFile, dst_V_last_V_1_ack_in, "dst_V_last_V_1_ack_in");
    sc_trace(mVcdFile, dst_V_last_V_1_ack_out, "dst_V_last_V_1_ack_out");
    sc_trace(mVcdFile, dst_V_last_V_1_payload_A, "dst_V_last_V_1_payload_A");
    sc_trace(mVcdFile, dst_V_last_V_1_payload_B, "dst_V_last_V_1_payload_B");
    sc_trace(mVcdFile, dst_V_last_V_1_sel_rd, "dst_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, dst_V_last_V_1_sel_wr, "dst_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, dst_V_last_V_1_sel, "dst_V_last_V_1_sel");
    sc_trace(mVcdFile, dst_V_last_V_1_load_A, "dst_V_last_V_1_load_A");
    sc_trace(mVcdFile, dst_V_last_V_1_load_B, "dst_V_last_V_1_load_B");
    sc_trace(mVcdFile, dst_V_last_V_1_state, "dst_V_last_V_1_state");
    sc_trace(mVcdFile, dst_V_last_V_1_state_cmp_full, "dst_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, dst_V_id_V_1_data_out, "dst_V_id_V_1_data_out");
    sc_trace(mVcdFile, dst_V_id_V_1_vld_in, "dst_V_id_V_1_vld_in");
    sc_trace(mVcdFile, dst_V_id_V_1_vld_out, "dst_V_id_V_1_vld_out");
    sc_trace(mVcdFile, dst_V_id_V_1_ack_in, "dst_V_id_V_1_ack_in");
    sc_trace(mVcdFile, dst_V_id_V_1_ack_out, "dst_V_id_V_1_ack_out");
    sc_trace(mVcdFile, dst_V_id_V_1_payload_A, "dst_V_id_V_1_payload_A");
    sc_trace(mVcdFile, dst_V_id_V_1_payload_B, "dst_V_id_V_1_payload_B");
    sc_trace(mVcdFile, dst_V_id_V_1_sel_rd, "dst_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, dst_V_id_V_1_sel_wr, "dst_V_id_V_1_sel_wr");
    sc_trace(mVcdFile, dst_V_id_V_1_sel, "dst_V_id_V_1_sel");
    sc_trace(mVcdFile, dst_V_id_V_1_load_A, "dst_V_id_V_1_load_A");
    sc_trace(mVcdFile, dst_V_id_V_1_load_B, "dst_V_id_V_1_load_B");
    sc_trace(mVcdFile, dst_V_id_V_1_state, "dst_V_id_V_1_state");
    sc_trace(mVcdFile, dst_V_id_V_1_state_cmp_full, "dst_V_id_V_1_state_cmp_full");
    sc_trace(mVcdFile, dst_V_dest_V_1_data_out, "dst_V_dest_V_1_data_out");
    sc_trace(mVcdFile, dst_V_dest_V_1_vld_in, "dst_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, dst_V_dest_V_1_vld_out, "dst_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, dst_V_dest_V_1_ack_in, "dst_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, dst_V_dest_V_1_ack_out, "dst_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, dst_V_dest_V_1_payload_A, "dst_V_dest_V_1_payload_A");
    sc_trace(mVcdFile, dst_V_dest_V_1_payload_B, "dst_V_dest_V_1_payload_B");
    sc_trace(mVcdFile, dst_V_dest_V_1_sel_rd, "dst_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, dst_V_dest_V_1_sel_wr, "dst_V_dest_V_1_sel_wr");
    sc_trace(mVcdFile, dst_V_dest_V_1_sel, "dst_V_dest_V_1_sel");
    sc_trace(mVcdFile, dst_V_dest_V_1_load_A, "dst_V_dest_V_1_load_A");
    sc_trace(mVcdFile, dst_V_dest_V_1_load_B, "dst_V_dest_V_1_load_B");
    sc_trace(mVcdFile, dst_V_dest_V_1_state, "dst_V_dest_V_1_state");
    sc_trace(mVcdFile, dst_V_dest_V_1_state_cmp_full, "dst_V_dest_V_1_state_cmp_full");
    sc_trace(mVcdFile, mask, "mask");
    sc_trace(mVcdFile, x, "x");
    sc_trace(mVcdFile, y, "y");
    sc_trace(mVcdFile, src_TDATA_blk_n, "src_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, dst_TDATA_blk_n, "dst_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, mask_read_reg_239, "mask_read_reg_239");
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, tmp_last_V_fu_144_p1, "tmp_last_V_fu_144_p1");
    sc_trace(mVcdFile, tmp_last_V_reg_259, "tmp_last_V_reg_259");
    sc_trace(mVcdFile, tmp_data_V_fu_196_p3, "tmp_data_V_fu_196_p3");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, tmp_5_fu_205_p2, "tmp_5_fu_205_p2");
    sc_trace(mVcdFile, tmp_4_fu_227_p2, "tmp_4_fu_227_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_fu_159_p1, "tmp_fu_159_p1");
    sc_trace(mVcdFile, p_not1_fu_172_p2, "p_not1_fu_172_p2");
    sc_trace(mVcdFile, invert_fu_162_p2, "invert_fu_162_p2");
    sc_trace(mVcdFile, p_not_fu_184_p2, "p_not_fu_184_p2");
    sc_trace(mVcdFile, brmerge_fu_178_p2, "brmerge_fu_178_p2");
    sc_trace(mVcdFile, p_s_fu_190_p2, "p_s_fu_190_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_reset_idle_pp0, "ap_reset_idle_pp0");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_924, "ap_condition_924");
#endif

    }
    mHdltvinHandle.open("stream.hdltvin.dat");
    mHdltvoutHandle.open("stream.hdltvout.dat");
}

stream::~stream() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete stream_AXILiteS_s_axi_U;
}

void stream::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void stream::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_pp0_stage0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_1;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_vld_out.read()))) {
            dst_V_data_V_1_sel_rd =  (sc_logic) (~dst_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_ack_in.read()))) {
            dst_V_data_V_1_sel_wr =  (sc_logic) (~dst_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_data_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_data_V_1_state.read())))) {
            dst_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_data_V_1_state.read())))) {
            dst_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_data_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_data_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_data_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_ack_out.read()))))) {
            dst_V_data_V_1_state = ap_const_lv2_3;
        } else {
            dst_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_vld_out.read()))) {
            dst_V_dest_V_1_sel_rd =  (sc_logic) (~dst_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_dest_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_ack_in.read()))) {
            dst_V_dest_V_1_sel_wr =  (sc_logic) (~dst_V_dest_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_dest_V_1_state.read())))) {
            dst_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_dest_V_1_state.read())))) {
            dst_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_ack_out.read()))))) {
            dst_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            dst_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_vld_out.read()))) {
            dst_V_id_V_1_sel_rd =  (sc_logic) (~dst_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_id_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_ack_in.read()))) {
            dst_V_id_V_1_sel_wr =  (sc_logic) (~dst_V_id_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_id_V_1_state.read())))) {
            dst_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_id_V_1_state.read())))) {
            dst_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_ack_out.read()))))) {
            dst_V_id_V_1_state = ap_const_lv2_3;
        } else {
            dst_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_vld_out.read()))) {
            dst_V_keep_V_1_sel_rd =  (sc_logic) (~dst_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_keep_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_ack_in.read()))) {
            dst_V_keep_V_1_sel_wr =  (sc_logic) (~dst_V_keep_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_keep_V_1_state.read())))) {
            dst_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_keep_V_1_state.read())))) {
            dst_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_ack_out.read()))))) {
            dst_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            dst_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_vld_out.read()))) {
            dst_V_last_V_1_sel_rd =  (sc_logic) (~dst_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_ack_in.read()))) {
            dst_V_last_V_1_sel_wr =  (sc_logic) (~dst_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_last_V_1_state.read())))) {
            dst_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_last_V_1_state.read())))) {
            dst_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_ack_out.read()))))) {
            dst_V_last_V_1_state = ap_const_lv2_3;
        } else {
            dst_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_vld_out.read()))) {
            dst_V_strb_V_1_sel_rd =  (sc_logic) (~dst_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_strb_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_ack_in.read()))) {
            dst_V_strb_V_1_sel_wr =  (sc_logic) (~dst_V_strb_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_strb_V_1_state.read())))) {
            dst_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_strb_V_1_state.read())))) {
            dst_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_ack_out.read()))))) {
            dst_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            dst_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_vld_out.read()))) {
            dst_V_user_V_1_sel_rd =  (sc_logic) (~dst_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_ack_in.read()))) {
            dst_V_user_V_1_sel_wr =  (sc_logic) (~dst_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        dst_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_user_V_1_state.read())))) {
            dst_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_user_V_1_state.read())))) {
            dst_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dst_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dst_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dst_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_ack_out.read()))))) {
            dst_V_user_V_1_state = ap_const_lv2_3;
        } else {
            dst_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_vld_out.read()))) {
            src_V_data_V_0_sel_rd =  (sc_logic) (~src_V_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_ack_in.read()))) {
            src_V_data_V_0_sel_wr =  (sc_logic) (~src_V_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(src_V_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(src_V_data_V_0_state.read(), ap_const_lv2_2)))) {
            src_V_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(src_V_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(src_V_data_V_0_state.read(), ap_const_lv2_1)))) {
            src_V_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(src_V_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(src_V_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(src_V_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_ack_out.read()))))) {
            src_V_data_V_0_state = ap_const_lv2_3;
        } else {
            src_V_data_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_dest_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_vld_out.read()))) {
            src_V_dest_V_0_sel_rd =  (sc_logic) (~src_V_dest_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_dest_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_ack_in.read()))) {
            src_V_dest_V_0_sel_wr =  (sc_logic) (~src_V_dest_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_dest_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, src_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, src_V_dest_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, src_V_dest_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, src_V_dest_V_0_state.read())))) {
            src_V_dest_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, src_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, src_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, src_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_dest_V_0_state.read())))) {
            src_V_dest_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, src_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_dest_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, src_V_dest_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_dest_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, src_V_dest_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_ack_out.read()))))) {
            src_V_dest_V_0_state = ap_const_lv2_3;
        } else {
            src_V_dest_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_id_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_vld_out.read()))) {
            src_V_id_V_0_sel_rd =  (sc_logic) (~src_V_id_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_id_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_ack_in.read()))) {
            src_V_id_V_0_sel_wr =  (sc_logic) (~src_V_id_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_id_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, src_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, src_V_id_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, src_V_id_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, src_V_id_V_0_state.read())))) {
            src_V_id_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, src_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, src_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, src_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_id_V_0_state.read())))) {
            src_V_id_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, src_V_id_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_id_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, src_V_id_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_id_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, src_V_id_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_ack_out.read()))))) {
            src_V_id_V_0_state = ap_const_lv2_3;
        } else {
            src_V_id_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_keep_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_vld_out.read()))) {
            src_V_keep_V_0_sel_rd =  (sc_logic) (~src_V_keep_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_keep_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_ack_in.read()))) {
            src_V_keep_V_0_sel_wr =  (sc_logic) (~src_V_keep_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_keep_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, src_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, src_V_keep_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, src_V_keep_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, src_V_keep_V_0_state.read())))) {
            src_V_keep_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, src_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, src_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, src_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_keep_V_0_state.read())))) {
            src_V_keep_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, src_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_keep_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, src_V_keep_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_keep_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, src_V_keep_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_ack_out.read()))))) {
            src_V_keep_V_0_state = ap_const_lv2_3;
        } else {
            src_V_keep_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_last_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_vld_out.read()))) {
            src_V_last_V_0_sel_rd =  (sc_logic) (~src_V_last_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_last_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_ack_in.read()))) {
            src_V_last_V_0_sel_wr =  (sc_logic) (~src_V_last_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_last_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, src_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, src_V_last_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, src_V_last_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, src_V_last_V_0_state.read())))) {
            src_V_last_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, src_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, src_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, src_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_last_V_0_state.read())))) {
            src_V_last_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, src_V_last_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_last_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, src_V_last_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_last_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, src_V_last_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_ack_out.read()))))) {
            src_V_last_V_0_state = ap_const_lv2_3;
        } else {
            src_V_last_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_strb_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_vld_out.read()))) {
            src_V_strb_V_0_sel_rd =  (sc_logic) (~src_V_strb_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_strb_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_ack_in.read()))) {
            src_V_strb_V_0_sel_wr =  (sc_logic) (~src_V_strb_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_strb_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, src_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, src_V_strb_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, src_V_strb_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, src_V_strb_V_0_state.read())))) {
            src_V_strb_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, src_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, src_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, src_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_strb_V_0_state.read())))) {
            src_V_strb_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, src_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_strb_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, src_V_strb_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_strb_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, src_V_strb_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_ack_out.read()))))) {
            src_V_strb_V_0_state = ap_const_lv2_3;
        } else {
            src_V_strb_V_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_user_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_vld_out.read()))) {
            src_V_user_V_0_sel_rd =  (sc_logic) (~src_V_user_V_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_user_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_ack_in.read()))) {
            src_V_user_V_0_sel_wr =  (sc_logic) (~src_V_user_V_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        src_V_user_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, src_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, src_V_user_V_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, src_V_user_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, src_V_user_V_0_state.read())))) {
            src_V_user_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, src_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, src_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, src_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_user_V_0_state.read())))) {
            src_V_user_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, src_V_user_V_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, src_V_user_V_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, src_V_user_V_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, src_V_user_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, src_V_user_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_ack_out.read()))))) {
            src_V_user_V_0_state = ap_const_lv2_3;
        } else {
            src_V_user_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_924.read(), ap_const_boolean_1)) {
        if (esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_fu_144_p1.read())) {
            x = ap_const_lv16_0;
        } else if (esl_seteq<1,1,1>(ap_const_lv1_0, tmp_last_V_fu_144_p1.read())) {
            x = tmp_5_fu_205_p2.read();
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_load_A.read())) {
        dst_V_data_V_1_payload_A = tmp_data_V_fu_196_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_load_B.read())) {
        dst_V_data_V_1_payload_B = tmp_data_V_fu_196_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_load_A.read())) {
        dst_V_dest_V_1_payload_A = src_V_dest_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_load_B.read())) {
        dst_V_dest_V_1_payload_B = src_V_dest_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_load_A.read())) {
        dst_V_id_V_1_payload_A = src_V_id_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_load_B.read())) {
        dst_V_id_V_1_payload_B = src_V_id_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_load_A.read())) {
        dst_V_keep_V_1_payload_A = src_V_keep_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_load_B.read())) {
        dst_V_keep_V_1_payload_B = src_V_keep_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_load_A.read())) {
        dst_V_last_V_1_payload_A = src_V_last_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_load_B.read())) {
        dst_V_last_V_1_payload_B = src_V_last_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_load_A.read())) {
        dst_V_strb_V_1_payload_A = src_V_strb_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_load_B.read())) {
        dst_V_strb_V_1_payload_B = src_V_strb_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_load_A.read())) {
        dst_V_user_V_1_payload_A = src_V_user_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_load_B.read())) {
        dst_V_user_V_1_payload_B = src_V_user_V_0_data_out.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        mask_read_reg_239 = mask.read();
        tmp_last_V_reg_259 = src_V_last_V_0_data_out.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_load_A.read())) {
        src_V_data_V_0_payload_A = src_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_load_B.read())) {
        src_V_data_V_0_payload_B = src_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_load_A.read())) {
        src_V_dest_V_0_payload_A = src_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_load_B.read())) {
        src_V_dest_V_0_payload_B = src_TDEST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_load_A.read())) {
        src_V_id_V_0_payload_A = src_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_load_B.read())) {
        src_V_id_V_0_payload_B = src_TID.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_load_A.read())) {
        src_V_keep_V_0_payload_A = src_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_load_B.read())) {
        src_V_keep_V_0_payload_B = src_TKEEP.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_load_A.read())) {
        src_V_last_V_0_payload_A = src_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_load_B.read())) {
        src_V_last_V_0_payload_B = src_TLAST.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_load_A.read())) {
        src_V_strb_V_0_payload_A = src_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_load_B.read())) {
        src_V_strb_V_0_payload_B = src_TSTRB.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_load_A.read())) {
        src_V_user_V_0_payload_A = src_TUSER.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_load_B.read())) {
        src_V_user_V_0_payload_B = src_TUSER.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_last_V_reg_259.read()))) {
        y = tmp_4_fu_227_p2.read();
    }
}

void stream::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[0];
}

void stream::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void stream::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_vld_out.read())));
}

void stream::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_ack_in.read()))));
}

void stream::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_vld_out.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_ack_in.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_ack_in.read()) || 
   esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_ack_in.read()))));
}

void stream::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void stream::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = esl_seteq<1,1,1>(ap_const_logic_0, src_V_data_V_0_vld_out.read());
}

void stream::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = (esl_seteq<1,1,1>(ap_const_logic_0, dst_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dst_V_dest_V_1_ack_in.read()));
}

void stream::thread_ap_condition_924() {
    ap_condition_924 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0));
}

void stream::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void stream::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void stream::thread_ap_reset_idle_pp0() {
    if (!esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
        ap_reset_idle_pp0 = ap_const_logic_1;
    } else {
        ap_reset_idle_pp0 = ap_const_logic_0;
    }
}

void stream::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void stream::thread_brmerge_fu_178_p2() {
    brmerge_fu_178_p2 = (p_not1_fu_172_p2.read() | invert_fu_162_p2.read());
}

void stream::thread_dst_TDATA() {
    dst_TDATA = dst_V_data_V_1_data_out.read();
}

void stream::thread_dst_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read())))) {
        dst_TDATA_blk_n = dst_V_data_V_1_state.read()[1];
    } else {
        dst_TDATA_blk_n = ap_const_logic_1;
    }
}

void stream::thread_dst_TDEST() {
    dst_TDEST = dst_V_dest_V_1_data_out.read();
}

void stream::thread_dst_TID() {
    dst_TID = dst_V_id_V_1_data_out.read();
}

void stream::thread_dst_TKEEP() {
    dst_TKEEP = dst_V_keep_V_1_data_out.read();
}

void stream::thread_dst_TLAST() {
    dst_TLAST = dst_V_last_V_1_data_out.read();
}

void stream::thread_dst_TSTRB() {
    dst_TSTRB = dst_V_strb_V_1_data_out.read();
}

void stream::thread_dst_TUSER() {
    dst_TUSER = dst_V_user_V_1_data_out.read();
}

void stream::thread_dst_TVALID() {
    dst_TVALID = dst_V_dest_V_1_state.read()[0];
}

void stream::thread_dst_V_data_V_1_ack_in() {
    dst_V_data_V_1_ack_in = dst_V_data_V_1_state.read()[1];
}

void stream::thread_dst_V_data_V_1_ack_out() {
    dst_V_data_V_1_ack_out = dst_TREADY.read();
}

void stream::thread_dst_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_data_V_1_sel.read())) {
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_B.read();
    } else {
        dst_V_data_V_1_data_out = dst_V_data_V_1_payload_A.read();
    }
}

void stream::thread_dst_V_data_V_1_load_A() {
    dst_V_data_V_1_load_A = (dst_V_data_V_1_state_cmp_full.read() & ~dst_V_data_V_1_sel_wr.read());
}

void stream::thread_dst_V_data_V_1_load_B() {
    dst_V_data_V_1_load_B = (dst_V_data_V_1_sel_wr.read() & dst_V_data_V_1_state_cmp_full.read());
}

void stream::thread_dst_V_data_V_1_sel() {
    dst_V_data_V_1_sel = dst_V_data_V_1_sel_rd.read();
}

void stream::thread_dst_V_data_V_1_state_cmp_full() {
    dst_V_data_V_1_state_cmp_full =  (sc_logic) ((!dst_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dst_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_dst_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        dst_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void stream::thread_dst_V_data_V_1_vld_out() {
    dst_V_data_V_1_vld_out = dst_V_data_V_1_state.read()[0];
}

void stream::thread_dst_V_dest_V_1_ack_in() {
    dst_V_dest_V_1_ack_in = dst_V_dest_V_1_state.read()[1];
}

void stream::thread_dst_V_dest_V_1_ack_out() {
    dst_V_dest_V_1_ack_out = dst_TREADY.read();
}

void stream::thread_dst_V_dest_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_dest_V_1_sel.read())) {
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_B.read();
    } else {
        dst_V_dest_V_1_data_out = dst_V_dest_V_1_payload_A.read();
    }
}

void stream::thread_dst_V_dest_V_1_load_A() {
    dst_V_dest_V_1_load_A = (dst_V_dest_V_1_state_cmp_full.read() & ~dst_V_dest_V_1_sel_wr.read());
}

void stream::thread_dst_V_dest_V_1_load_B() {
    dst_V_dest_V_1_load_B = (dst_V_dest_V_1_sel_wr.read() & dst_V_dest_V_1_state_cmp_full.read());
}

void stream::thread_dst_V_dest_V_1_sel() {
    dst_V_dest_V_1_sel = dst_V_dest_V_1_sel_rd.read();
}

void stream::thread_dst_V_dest_V_1_state_cmp_full() {
    dst_V_dest_V_1_state_cmp_full =  (sc_logic) ((!dst_V_dest_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dst_V_dest_V_1_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_dst_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        dst_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void stream::thread_dst_V_dest_V_1_vld_out() {
    dst_V_dest_V_1_vld_out = dst_V_dest_V_1_state.read()[0];
}

void stream::thread_dst_V_id_V_1_ack_in() {
    dst_V_id_V_1_ack_in = dst_V_id_V_1_state.read()[1];
}

void stream::thread_dst_V_id_V_1_ack_out() {
    dst_V_id_V_1_ack_out = dst_TREADY.read();
}

void stream::thread_dst_V_id_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_id_V_1_sel.read())) {
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_B.read();
    } else {
        dst_V_id_V_1_data_out = dst_V_id_V_1_payload_A.read();
    }
}

void stream::thread_dst_V_id_V_1_load_A() {
    dst_V_id_V_1_load_A = (dst_V_id_V_1_state_cmp_full.read() & ~dst_V_id_V_1_sel_wr.read());
}

void stream::thread_dst_V_id_V_1_load_B() {
    dst_V_id_V_1_load_B = (dst_V_id_V_1_sel_wr.read() & dst_V_id_V_1_state_cmp_full.read());
}

void stream::thread_dst_V_id_V_1_sel() {
    dst_V_id_V_1_sel = dst_V_id_V_1_sel_rd.read();
}

void stream::thread_dst_V_id_V_1_state_cmp_full() {
    dst_V_id_V_1_state_cmp_full =  (sc_logic) ((!dst_V_id_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dst_V_id_V_1_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_dst_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        dst_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void stream::thread_dst_V_id_V_1_vld_out() {
    dst_V_id_V_1_vld_out = dst_V_id_V_1_state.read()[0];
}

void stream::thread_dst_V_keep_V_1_ack_in() {
    dst_V_keep_V_1_ack_in = dst_V_keep_V_1_state.read()[1];
}

void stream::thread_dst_V_keep_V_1_ack_out() {
    dst_V_keep_V_1_ack_out = dst_TREADY.read();
}

void stream::thread_dst_V_keep_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_keep_V_1_sel.read())) {
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_B.read();
    } else {
        dst_V_keep_V_1_data_out = dst_V_keep_V_1_payload_A.read();
    }
}

void stream::thread_dst_V_keep_V_1_load_A() {
    dst_V_keep_V_1_load_A = (dst_V_keep_V_1_state_cmp_full.read() & ~dst_V_keep_V_1_sel_wr.read());
}

void stream::thread_dst_V_keep_V_1_load_B() {
    dst_V_keep_V_1_load_B = (dst_V_keep_V_1_sel_wr.read() & dst_V_keep_V_1_state_cmp_full.read());
}

void stream::thread_dst_V_keep_V_1_sel() {
    dst_V_keep_V_1_sel = dst_V_keep_V_1_sel_rd.read();
}

void stream::thread_dst_V_keep_V_1_state_cmp_full() {
    dst_V_keep_V_1_state_cmp_full =  (sc_logic) ((!dst_V_keep_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dst_V_keep_V_1_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_dst_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        dst_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void stream::thread_dst_V_keep_V_1_vld_out() {
    dst_V_keep_V_1_vld_out = dst_V_keep_V_1_state.read()[0];
}

void stream::thread_dst_V_last_V_1_ack_in() {
    dst_V_last_V_1_ack_in = dst_V_last_V_1_state.read()[1];
}

void stream::thread_dst_V_last_V_1_ack_out() {
    dst_V_last_V_1_ack_out = dst_TREADY.read();
}

void stream::thread_dst_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_last_V_1_sel.read())) {
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_B.read();
    } else {
        dst_V_last_V_1_data_out = dst_V_last_V_1_payload_A.read();
    }
}

void stream::thread_dst_V_last_V_1_load_A() {
    dst_V_last_V_1_load_A = (dst_V_last_V_1_state_cmp_full.read() & ~dst_V_last_V_1_sel_wr.read());
}

void stream::thread_dst_V_last_V_1_load_B() {
    dst_V_last_V_1_load_B = (dst_V_last_V_1_sel_wr.read() & dst_V_last_V_1_state_cmp_full.read());
}

void stream::thread_dst_V_last_V_1_sel() {
    dst_V_last_V_1_sel = dst_V_last_V_1_sel_rd.read();
}

void stream::thread_dst_V_last_V_1_state_cmp_full() {
    dst_V_last_V_1_state_cmp_full =  (sc_logic) ((!dst_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dst_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_dst_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        dst_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void stream::thread_dst_V_last_V_1_vld_out() {
    dst_V_last_V_1_vld_out = dst_V_last_V_1_state.read()[0];
}

void stream::thread_dst_V_strb_V_1_ack_in() {
    dst_V_strb_V_1_ack_in = dst_V_strb_V_1_state.read()[1];
}

void stream::thread_dst_V_strb_V_1_ack_out() {
    dst_V_strb_V_1_ack_out = dst_TREADY.read();
}

void stream::thread_dst_V_strb_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_strb_V_1_sel.read())) {
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_B.read();
    } else {
        dst_V_strb_V_1_data_out = dst_V_strb_V_1_payload_A.read();
    }
}

void stream::thread_dst_V_strb_V_1_load_A() {
    dst_V_strb_V_1_load_A = (dst_V_strb_V_1_state_cmp_full.read() & ~dst_V_strb_V_1_sel_wr.read());
}

void stream::thread_dst_V_strb_V_1_load_B() {
    dst_V_strb_V_1_load_B = (dst_V_strb_V_1_sel_wr.read() & dst_V_strb_V_1_state_cmp_full.read());
}

void stream::thread_dst_V_strb_V_1_sel() {
    dst_V_strb_V_1_sel = dst_V_strb_V_1_sel_rd.read();
}

void stream::thread_dst_V_strb_V_1_state_cmp_full() {
    dst_V_strb_V_1_state_cmp_full =  (sc_logic) ((!dst_V_strb_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dst_V_strb_V_1_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_dst_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        dst_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void stream::thread_dst_V_strb_V_1_vld_out() {
    dst_V_strb_V_1_vld_out = dst_V_strb_V_1_state.read()[0];
}

void stream::thread_dst_V_user_V_1_ack_in() {
    dst_V_user_V_1_ack_in = dst_V_user_V_1_state.read()[1];
}

void stream::thread_dst_V_user_V_1_ack_out() {
    dst_V_user_V_1_ack_out = dst_TREADY.read();
}

void stream::thread_dst_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dst_V_user_V_1_sel.read())) {
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_B.read();
    } else {
        dst_V_user_V_1_data_out = dst_V_user_V_1_payload_A.read();
    }
}

void stream::thread_dst_V_user_V_1_load_A() {
    dst_V_user_V_1_load_A = (dst_V_user_V_1_state_cmp_full.read() & ~dst_V_user_V_1_sel_wr.read());
}

void stream::thread_dst_V_user_V_1_load_B() {
    dst_V_user_V_1_load_B = (dst_V_user_V_1_sel_wr.read() & dst_V_user_V_1_state_cmp_full.read());
}

void stream::thread_dst_V_user_V_1_sel() {
    dst_V_user_V_1_sel = dst_V_user_V_1_sel_rd.read();
}

void stream::thread_dst_V_user_V_1_state_cmp_full() {
    dst_V_user_V_1_state_cmp_full =  (sc_logic) ((!dst_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dst_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_dst_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dst_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        dst_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void stream::thread_dst_V_user_V_1_vld_out() {
    dst_V_user_V_1_vld_out = dst_V_user_V_1_state.read()[0];
}

void stream::thread_invert_fu_162_p2() {
    invert_fu_162_p2 = (tmp_fu_159_p1.read() ^ ap_const_lv1_1);
}

void stream::thread_p_not1_fu_172_p2() {
    p_not1_fu_172_p2 = (!x.read().is_01() || !ap_const_lv16_2B3.is_01())? sc_lv<1>(): (sc_biguint<16>(x.read()) < sc_biguint<16>(ap_const_lv16_2B3));
}

void stream::thread_p_not_fu_184_p2() {
    p_not_fu_184_p2 = (src_V_data_V_0_data_out.read() | ap_const_lv32_FF000000);
}

void stream::thread_p_s_fu_190_p2() {
    p_s_fu_190_p2 = (p_not_fu_184_p2.read() ^ ap_const_lv32_FFFFFF);
}

void stream::thread_src_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0))) {
        src_TDATA_blk_n = src_V_data_V_0_state.read()[0];
    } else {
        src_TDATA_blk_n = ap_const_logic_1;
    }
}

void stream::thread_src_TREADY() {
    src_TREADY = src_V_dest_V_0_state.read()[1];
}

void stream::thread_src_V_data_V_0_ack_in() {
    src_V_data_V_0_ack_in = src_V_data_V_0_state.read()[1];
}

void stream::thread_src_V_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_V_data_V_0_ack_out = ap_const_logic_1;
    } else {
        src_V_data_V_0_ack_out = ap_const_logic_0;
    }
}

void stream::thread_src_V_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_data_V_0_sel.read())) {
        src_V_data_V_0_data_out = src_V_data_V_0_payload_B.read();
    } else {
        src_V_data_V_0_data_out = src_V_data_V_0_payload_A.read();
    }
}

void stream::thread_src_V_data_V_0_load_A() {
    src_V_data_V_0_load_A = (src_V_data_V_0_state_cmp_full.read() & ~src_V_data_V_0_sel_wr.read());
}

void stream::thread_src_V_data_V_0_load_B() {
    src_V_data_V_0_load_B = (src_V_data_V_0_sel_wr.read() & src_V_data_V_0_state_cmp_full.read());
}

void stream::thread_src_V_data_V_0_sel() {
    src_V_data_V_0_sel = src_V_data_V_0_sel_rd.read();
}

void stream::thread_src_V_data_V_0_state_cmp_full() {
    src_V_data_V_0_state_cmp_full =  (sc_logic) ((!src_V_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(src_V_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_src_V_data_V_0_vld_in() {
    src_V_data_V_0_vld_in = src_TVALID.read();
}

void stream::thread_src_V_data_V_0_vld_out() {
    src_V_data_V_0_vld_out = src_V_data_V_0_state.read()[0];
}

void stream::thread_src_V_dest_V_0_ack_in() {
    src_V_dest_V_0_ack_in = src_V_dest_V_0_state.read()[1];
}

void stream::thread_src_V_dest_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_V_dest_V_0_ack_out = ap_const_logic_1;
    } else {
        src_V_dest_V_0_ack_out = ap_const_logic_0;
    }
}

void stream::thread_src_V_dest_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_dest_V_0_sel.read())) {
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_B.read();
    } else {
        src_V_dest_V_0_data_out = src_V_dest_V_0_payload_A.read();
    }
}

void stream::thread_src_V_dest_V_0_load_A() {
    src_V_dest_V_0_load_A = (src_V_dest_V_0_state_cmp_full.read() & ~src_V_dest_V_0_sel_wr.read());
}

void stream::thread_src_V_dest_V_0_load_B() {
    src_V_dest_V_0_load_B = (src_V_dest_V_0_sel_wr.read() & src_V_dest_V_0_state_cmp_full.read());
}

void stream::thread_src_V_dest_V_0_sel() {
    src_V_dest_V_0_sel = src_V_dest_V_0_sel_rd.read();
}

void stream::thread_src_V_dest_V_0_state_cmp_full() {
    src_V_dest_V_0_state_cmp_full =  (sc_logic) ((!src_V_dest_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(src_V_dest_V_0_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_src_V_dest_V_0_vld_in() {
    src_V_dest_V_0_vld_in = src_TVALID.read();
}

void stream::thread_src_V_dest_V_0_vld_out() {
    src_V_dest_V_0_vld_out = src_V_dest_V_0_state.read()[0];
}

void stream::thread_src_V_id_V_0_ack_in() {
    src_V_id_V_0_ack_in = src_V_id_V_0_state.read()[1];
}

void stream::thread_src_V_id_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_V_id_V_0_ack_out = ap_const_logic_1;
    } else {
        src_V_id_V_0_ack_out = ap_const_logic_0;
    }
}

void stream::thread_src_V_id_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_id_V_0_sel.read())) {
        src_V_id_V_0_data_out = src_V_id_V_0_payload_B.read();
    } else {
        src_V_id_V_0_data_out = src_V_id_V_0_payload_A.read();
    }
}

void stream::thread_src_V_id_V_0_load_A() {
    src_V_id_V_0_load_A = (src_V_id_V_0_state_cmp_full.read() & ~src_V_id_V_0_sel_wr.read());
}

void stream::thread_src_V_id_V_0_load_B() {
    src_V_id_V_0_load_B = (src_V_id_V_0_sel_wr.read() & src_V_id_V_0_state_cmp_full.read());
}

void stream::thread_src_V_id_V_0_sel() {
    src_V_id_V_0_sel = src_V_id_V_0_sel_rd.read();
}

void stream::thread_src_V_id_V_0_state_cmp_full() {
    src_V_id_V_0_state_cmp_full =  (sc_logic) ((!src_V_id_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(src_V_id_V_0_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_src_V_id_V_0_vld_in() {
    src_V_id_V_0_vld_in = src_TVALID.read();
}

void stream::thread_src_V_id_V_0_vld_out() {
    src_V_id_V_0_vld_out = src_V_id_V_0_state.read()[0];
}

void stream::thread_src_V_keep_V_0_ack_in() {
    src_V_keep_V_0_ack_in = src_V_keep_V_0_state.read()[1];
}

void stream::thread_src_V_keep_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_V_keep_V_0_ack_out = ap_const_logic_1;
    } else {
        src_V_keep_V_0_ack_out = ap_const_logic_0;
    }
}

void stream::thread_src_V_keep_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_keep_V_0_sel.read())) {
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_B.read();
    } else {
        src_V_keep_V_0_data_out = src_V_keep_V_0_payload_A.read();
    }
}

void stream::thread_src_V_keep_V_0_load_A() {
    src_V_keep_V_0_load_A = (src_V_keep_V_0_state_cmp_full.read() & ~src_V_keep_V_0_sel_wr.read());
}

void stream::thread_src_V_keep_V_0_load_B() {
    src_V_keep_V_0_load_B = (src_V_keep_V_0_sel_wr.read() & src_V_keep_V_0_state_cmp_full.read());
}

void stream::thread_src_V_keep_V_0_sel() {
    src_V_keep_V_0_sel = src_V_keep_V_0_sel_rd.read();
}

void stream::thread_src_V_keep_V_0_state_cmp_full() {
    src_V_keep_V_0_state_cmp_full =  (sc_logic) ((!src_V_keep_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(src_V_keep_V_0_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_src_V_keep_V_0_vld_in() {
    src_V_keep_V_0_vld_in = src_TVALID.read();
}

void stream::thread_src_V_keep_V_0_vld_out() {
    src_V_keep_V_0_vld_out = src_V_keep_V_0_state.read()[0];
}

void stream::thread_src_V_last_V_0_ack_in() {
    src_V_last_V_0_ack_in = src_V_last_V_0_state.read()[1];
}

void stream::thread_src_V_last_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_V_last_V_0_ack_out = ap_const_logic_1;
    } else {
        src_V_last_V_0_ack_out = ap_const_logic_0;
    }
}

void stream::thread_src_V_last_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_last_V_0_sel.read())) {
        src_V_last_V_0_data_out = src_V_last_V_0_payload_B.read();
    } else {
        src_V_last_V_0_data_out = src_V_last_V_0_payload_A.read();
    }
}

void stream::thread_src_V_last_V_0_load_A() {
    src_V_last_V_0_load_A = (src_V_last_V_0_state_cmp_full.read() & ~src_V_last_V_0_sel_wr.read());
}

void stream::thread_src_V_last_V_0_load_B() {
    src_V_last_V_0_load_B = (src_V_last_V_0_sel_wr.read() & src_V_last_V_0_state_cmp_full.read());
}

void stream::thread_src_V_last_V_0_sel() {
    src_V_last_V_0_sel = src_V_last_V_0_sel_rd.read();
}

void stream::thread_src_V_last_V_0_state_cmp_full() {
    src_V_last_V_0_state_cmp_full =  (sc_logic) ((!src_V_last_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(src_V_last_V_0_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_src_V_last_V_0_vld_in() {
    src_V_last_V_0_vld_in = src_TVALID.read();
}

void stream::thread_src_V_last_V_0_vld_out() {
    src_V_last_V_0_vld_out = src_V_last_V_0_state.read()[0];
}

void stream::thread_src_V_strb_V_0_ack_in() {
    src_V_strb_V_0_ack_in = src_V_strb_V_0_state.read()[1];
}

void stream::thread_src_V_strb_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_V_strb_V_0_ack_out = ap_const_logic_1;
    } else {
        src_V_strb_V_0_ack_out = ap_const_logic_0;
    }
}

void stream::thread_src_V_strb_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_strb_V_0_sel.read())) {
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_B.read();
    } else {
        src_V_strb_V_0_data_out = src_V_strb_V_0_payload_A.read();
    }
}

void stream::thread_src_V_strb_V_0_load_A() {
    src_V_strb_V_0_load_A = (src_V_strb_V_0_state_cmp_full.read() & ~src_V_strb_V_0_sel_wr.read());
}

void stream::thread_src_V_strb_V_0_load_B() {
    src_V_strb_V_0_load_B = (src_V_strb_V_0_sel_wr.read() & src_V_strb_V_0_state_cmp_full.read());
}

void stream::thread_src_V_strb_V_0_sel() {
    src_V_strb_V_0_sel = src_V_strb_V_0_sel_rd.read();
}

void stream::thread_src_V_strb_V_0_state_cmp_full() {
    src_V_strb_V_0_state_cmp_full =  (sc_logic) ((!src_V_strb_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(src_V_strb_V_0_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_src_V_strb_V_0_vld_in() {
    src_V_strb_V_0_vld_in = src_TVALID.read();
}

void stream::thread_src_V_strb_V_0_vld_out() {
    src_V_strb_V_0_vld_out = src_V_strb_V_0_state.read()[0];
}

void stream::thread_src_V_user_V_0_ack_in() {
    src_V_user_V_0_ack_in = src_V_user_V_0_state.read()[1];
}

void stream::thread_src_V_user_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        src_V_user_V_0_ack_out = ap_const_logic_1;
    } else {
        src_V_user_V_0_ack_out = ap_const_logic_0;
    }
}

void stream::thread_src_V_user_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, src_V_user_V_0_sel.read())) {
        src_V_user_V_0_data_out = src_V_user_V_0_payload_B.read();
    } else {
        src_V_user_V_0_data_out = src_V_user_V_0_payload_A.read();
    }
}

void stream::thread_src_V_user_V_0_load_A() {
    src_V_user_V_0_load_A = (src_V_user_V_0_state_cmp_full.read() & ~src_V_user_V_0_sel_wr.read());
}

void stream::thread_src_V_user_V_0_load_B() {
    src_V_user_V_0_load_B = (src_V_user_V_0_sel_wr.read() & src_V_user_V_0_state_cmp_full.read());
}

void stream::thread_src_V_user_V_0_sel() {
    src_V_user_V_0_sel = src_V_user_V_0_sel_rd.read();
}

void stream::thread_src_V_user_V_0_state_cmp_full() {
    src_V_user_V_0_state_cmp_full =  (sc_logic) ((!src_V_user_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(src_V_user_V_0_state.read() != ap_const_lv2_1))[0];
}

void stream::thread_src_V_user_V_0_vld_in() {
    src_V_user_V_0_vld_in = src_TVALID.read();
}

void stream::thread_src_V_user_V_0_vld_out() {
    src_V_user_V_0_vld_out = src_V_user_V_0_state.read()[0];
}

void stream::thread_tmp_4_fu_227_p2() {
    tmp_4_fu_227_p2 = (!y.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(y.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void stream::thread_tmp_5_fu_205_p2() {
    tmp_5_fu_205_p2 = (!x.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_biguint<16>(x.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void stream::thread_tmp_data_V_fu_196_p3() {
    tmp_data_V_fu_196_p3 = (!brmerge_fu_178_p2.read()[0].is_01())? sc_lv<32>(): ((brmerge_fu_178_p2.read()[0].to_bool())? src_V_data_V_0_data_out.read(): p_s_fu_190_p2.read());
}

void stream::thread_tmp_fu_159_p1() {
    tmp_fu_159_p1 = mask_read_reg_239.read().range(1-1, 0);
}

void stream::thread_tmp_last_V_fu_144_p1() {
    tmp_last_V_fu_144_p1 = src_V_last_V_0_data_out.read();
}

void stream::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

void stream::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TDATA\" :  \"" << src_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TVALID\" :  \"" << src_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"src_TREADY\" :  \"" << src_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TKEEP\" :  \"" << src_TKEEP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TSTRB\" :  \"" << src_TSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TUSER\" :  \"" << src_TUSER.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TLAST\" :  \"" << src_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TID\" :  \"" << src_TID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"src_TDEST\" :  \"" << src_TDEST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_TDATA\" :  \"" << dst_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_TVALID\" :  \"" << dst_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"dst_TREADY\" :  \"" << dst_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_TKEEP\" :  \"" << dst_TKEEP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_TSTRB\" :  \"" << dst_TSTRB.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_TUSER\" :  \"" << dst_TUSER.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_TLAST\" :  \"" << dst_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_TID\" :  \"" << dst_TID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"dst_TDEST\" :  \"" << dst_TDEST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

