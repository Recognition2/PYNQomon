// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _stream_HH_
#define _stream_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "stream_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct stream : public sc_module {
    // Port declarations 37
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_in< sc_lv<32> > src_TDATA;
    sc_in< sc_logic > src_TVALID;
    sc_out< sc_logic > src_TREADY;
    sc_in< sc_lv<4> > src_TKEEP;
    sc_in< sc_lv<4> > src_TSTRB;
    sc_in< sc_lv<1> > src_TUSER;
    sc_in< sc_lv<1> > src_TLAST;
    sc_in< sc_lv<1> > src_TID;
    sc_in< sc_lv<1> > src_TDEST;
    sc_out< sc_lv<32> > dst_TDATA;
    sc_out< sc_logic > dst_TVALID;
    sc_in< sc_logic > dst_TREADY;
    sc_out< sc_lv<4> > dst_TKEEP;
    sc_out< sc_lv<4> > dst_TSTRB;
    sc_out< sc_lv<1> > dst_TUSER;
    sc_out< sc_lv<1> > dst_TLAST;
    sc_out< sc_lv<1> > dst_TID;
    sc_out< sc_lv<1> > dst_TDEST;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    stream(sc_module_name name);
    SC_HAS_PROCESS(stream);

    ~stream();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    stream_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* stream_AXILiteS_s_axi_U;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_lv<32> > src_V_data_V_0_data_out;
    sc_signal< sc_logic > src_V_data_V_0_vld_in;
    sc_signal< sc_logic > src_V_data_V_0_vld_out;
    sc_signal< sc_logic > src_V_data_V_0_ack_in;
    sc_signal< sc_logic > src_V_data_V_0_ack_out;
    sc_signal< sc_lv<32> > src_V_data_V_0_payload_A;
    sc_signal< sc_lv<32> > src_V_data_V_0_payload_B;
    sc_signal< sc_logic > src_V_data_V_0_sel_rd;
    sc_signal< sc_logic > src_V_data_V_0_sel_wr;
    sc_signal< sc_logic > src_V_data_V_0_sel;
    sc_signal< sc_logic > src_V_data_V_0_load_A;
    sc_signal< sc_logic > src_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > src_V_data_V_0_state;
    sc_signal< sc_logic > src_V_data_V_0_state_cmp_full;
    sc_signal< sc_lv<4> > src_V_keep_V_0_data_out;
    sc_signal< sc_logic > src_V_keep_V_0_vld_in;
    sc_signal< sc_logic > src_V_keep_V_0_vld_out;
    sc_signal< sc_logic > src_V_keep_V_0_ack_in;
    sc_signal< sc_logic > src_V_keep_V_0_ack_out;
    sc_signal< sc_lv<4> > src_V_keep_V_0_payload_A;
    sc_signal< sc_lv<4> > src_V_keep_V_0_payload_B;
    sc_signal< sc_logic > src_V_keep_V_0_sel_rd;
    sc_signal< sc_logic > src_V_keep_V_0_sel_wr;
    sc_signal< sc_logic > src_V_keep_V_0_sel;
    sc_signal< sc_logic > src_V_keep_V_0_load_A;
    sc_signal< sc_logic > src_V_keep_V_0_load_B;
    sc_signal< sc_lv<2> > src_V_keep_V_0_state;
    sc_signal< sc_logic > src_V_keep_V_0_state_cmp_full;
    sc_signal< sc_lv<4> > src_V_strb_V_0_data_out;
    sc_signal< sc_logic > src_V_strb_V_0_vld_in;
    sc_signal< sc_logic > src_V_strb_V_0_vld_out;
    sc_signal< sc_logic > src_V_strb_V_0_ack_in;
    sc_signal< sc_logic > src_V_strb_V_0_ack_out;
    sc_signal< sc_lv<4> > src_V_strb_V_0_payload_A;
    sc_signal< sc_lv<4> > src_V_strb_V_0_payload_B;
    sc_signal< sc_logic > src_V_strb_V_0_sel_rd;
    sc_signal< sc_logic > src_V_strb_V_0_sel_wr;
    sc_signal< sc_logic > src_V_strb_V_0_sel;
    sc_signal< sc_logic > src_V_strb_V_0_load_A;
    sc_signal< sc_logic > src_V_strb_V_0_load_B;
    sc_signal< sc_lv<2> > src_V_strb_V_0_state;
    sc_signal< sc_logic > src_V_strb_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > src_V_user_V_0_data_out;
    sc_signal< sc_logic > src_V_user_V_0_vld_in;
    sc_signal< sc_logic > src_V_user_V_0_vld_out;
    sc_signal< sc_logic > src_V_user_V_0_ack_in;
    sc_signal< sc_logic > src_V_user_V_0_ack_out;
    sc_signal< sc_lv<1> > src_V_user_V_0_payload_A;
    sc_signal< sc_lv<1> > src_V_user_V_0_payload_B;
    sc_signal< sc_logic > src_V_user_V_0_sel_rd;
    sc_signal< sc_logic > src_V_user_V_0_sel_wr;
    sc_signal< sc_logic > src_V_user_V_0_sel;
    sc_signal< sc_logic > src_V_user_V_0_load_A;
    sc_signal< sc_logic > src_V_user_V_0_load_B;
    sc_signal< sc_lv<2> > src_V_user_V_0_state;
    sc_signal< sc_logic > src_V_user_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > src_V_last_V_0_data_out;
    sc_signal< sc_logic > src_V_last_V_0_vld_in;
    sc_signal< sc_logic > src_V_last_V_0_vld_out;
    sc_signal< sc_logic > src_V_last_V_0_ack_in;
    sc_signal< sc_logic > src_V_last_V_0_ack_out;
    sc_signal< sc_lv<1> > src_V_last_V_0_payload_A;
    sc_signal< sc_lv<1> > src_V_last_V_0_payload_B;
    sc_signal< sc_logic > src_V_last_V_0_sel_rd;
    sc_signal< sc_logic > src_V_last_V_0_sel_wr;
    sc_signal< sc_logic > src_V_last_V_0_sel;
    sc_signal< sc_logic > src_V_last_V_0_load_A;
    sc_signal< sc_logic > src_V_last_V_0_load_B;
    sc_signal< sc_lv<2> > src_V_last_V_0_state;
    sc_signal< sc_logic > src_V_last_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > src_V_id_V_0_data_out;
    sc_signal< sc_logic > src_V_id_V_0_vld_in;
    sc_signal< sc_logic > src_V_id_V_0_vld_out;
    sc_signal< sc_logic > src_V_id_V_0_ack_in;
    sc_signal< sc_logic > src_V_id_V_0_ack_out;
    sc_signal< sc_lv<1> > src_V_id_V_0_payload_A;
    sc_signal< sc_lv<1> > src_V_id_V_0_payload_B;
    sc_signal< sc_logic > src_V_id_V_0_sel_rd;
    sc_signal< sc_logic > src_V_id_V_0_sel_wr;
    sc_signal< sc_logic > src_V_id_V_0_sel;
    sc_signal< sc_logic > src_V_id_V_0_load_A;
    sc_signal< sc_logic > src_V_id_V_0_load_B;
    sc_signal< sc_lv<2> > src_V_id_V_0_state;
    sc_signal< sc_logic > src_V_id_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > src_V_dest_V_0_data_out;
    sc_signal< sc_logic > src_V_dest_V_0_vld_in;
    sc_signal< sc_logic > src_V_dest_V_0_vld_out;
    sc_signal< sc_logic > src_V_dest_V_0_ack_in;
    sc_signal< sc_logic > src_V_dest_V_0_ack_out;
    sc_signal< sc_lv<1> > src_V_dest_V_0_payload_A;
    sc_signal< sc_lv<1> > src_V_dest_V_0_payload_B;
    sc_signal< sc_logic > src_V_dest_V_0_sel_rd;
    sc_signal< sc_logic > src_V_dest_V_0_sel_wr;
    sc_signal< sc_logic > src_V_dest_V_0_sel;
    sc_signal< sc_logic > src_V_dest_V_0_load_A;
    sc_signal< sc_logic > src_V_dest_V_0_load_B;
    sc_signal< sc_lv<2> > src_V_dest_V_0_state;
    sc_signal< sc_logic > src_V_dest_V_0_state_cmp_full;
    sc_signal< sc_lv<32> > dst_V_data_V_1_data_out;
    sc_signal< sc_logic > dst_V_data_V_1_vld_in;
    sc_signal< sc_logic > dst_V_data_V_1_vld_out;
    sc_signal< sc_logic > dst_V_data_V_1_ack_in;
    sc_signal< sc_logic > dst_V_data_V_1_ack_out;
    sc_signal< sc_lv<32> > dst_V_data_V_1_payload_A;
    sc_signal< sc_lv<32> > dst_V_data_V_1_payload_B;
    sc_signal< sc_logic > dst_V_data_V_1_sel_rd;
    sc_signal< sc_logic > dst_V_data_V_1_sel_wr;
    sc_signal< sc_logic > dst_V_data_V_1_sel;
    sc_signal< sc_logic > dst_V_data_V_1_load_A;
    sc_signal< sc_logic > dst_V_data_V_1_load_B;
    sc_signal< sc_lv<2> > dst_V_data_V_1_state;
    sc_signal< sc_logic > dst_V_data_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > dst_V_keep_V_1_data_out;
    sc_signal< sc_logic > dst_V_keep_V_1_vld_in;
    sc_signal< sc_logic > dst_V_keep_V_1_vld_out;
    sc_signal< sc_logic > dst_V_keep_V_1_ack_in;
    sc_signal< sc_logic > dst_V_keep_V_1_ack_out;
    sc_signal< sc_lv<4> > dst_V_keep_V_1_payload_A;
    sc_signal< sc_lv<4> > dst_V_keep_V_1_payload_B;
    sc_signal< sc_logic > dst_V_keep_V_1_sel_rd;
    sc_signal< sc_logic > dst_V_keep_V_1_sel_wr;
    sc_signal< sc_logic > dst_V_keep_V_1_sel;
    sc_signal< sc_logic > dst_V_keep_V_1_load_A;
    sc_signal< sc_logic > dst_V_keep_V_1_load_B;
    sc_signal< sc_lv<2> > dst_V_keep_V_1_state;
    sc_signal< sc_logic > dst_V_keep_V_1_state_cmp_full;
    sc_signal< sc_lv<4> > dst_V_strb_V_1_data_out;
    sc_signal< sc_logic > dst_V_strb_V_1_vld_in;
    sc_signal< sc_logic > dst_V_strb_V_1_vld_out;
    sc_signal< sc_logic > dst_V_strb_V_1_ack_in;
    sc_signal< sc_logic > dst_V_strb_V_1_ack_out;
    sc_signal< sc_lv<4> > dst_V_strb_V_1_payload_A;
    sc_signal< sc_lv<4> > dst_V_strb_V_1_payload_B;
    sc_signal< sc_logic > dst_V_strb_V_1_sel_rd;
    sc_signal< sc_logic > dst_V_strb_V_1_sel_wr;
    sc_signal< sc_logic > dst_V_strb_V_1_sel;
    sc_signal< sc_logic > dst_V_strb_V_1_load_A;
    sc_signal< sc_logic > dst_V_strb_V_1_load_B;
    sc_signal< sc_lv<2> > dst_V_strb_V_1_state;
    sc_signal< sc_logic > dst_V_strb_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > dst_V_user_V_1_data_out;
    sc_signal< sc_logic > dst_V_user_V_1_vld_in;
    sc_signal< sc_logic > dst_V_user_V_1_vld_out;
    sc_signal< sc_logic > dst_V_user_V_1_ack_in;
    sc_signal< sc_logic > dst_V_user_V_1_ack_out;
    sc_signal< sc_lv<1> > dst_V_user_V_1_payload_A;
    sc_signal< sc_lv<1> > dst_V_user_V_1_payload_B;
    sc_signal< sc_logic > dst_V_user_V_1_sel_rd;
    sc_signal< sc_logic > dst_V_user_V_1_sel_wr;
    sc_signal< sc_logic > dst_V_user_V_1_sel;
    sc_signal< sc_logic > dst_V_user_V_1_load_A;
    sc_signal< sc_logic > dst_V_user_V_1_load_B;
    sc_signal< sc_lv<2> > dst_V_user_V_1_state;
    sc_signal< sc_logic > dst_V_user_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > dst_V_last_V_1_data_out;
    sc_signal< sc_logic > dst_V_last_V_1_vld_in;
    sc_signal< sc_logic > dst_V_last_V_1_vld_out;
    sc_signal< sc_logic > dst_V_last_V_1_ack_in;
    sc_signal< sc_logic > dst_V_last_V_1_ack_out;
    sc_signal< sc_lv<1> > dst_V_last_V_1_payload_A;
    sc_signal< sc_lv<1> > dst_V_last_V_1_payload_B;
    sc_signal< sc_logic > dst_V_last_V_1_sel_rd;
    sc_signal< sc_logic > dst_V_last_V_1_sel_wr;
    sc_signal< sc_logic > dst_V_last_V_1_sel;
    sc_signal< sc_logic > dst_V_last_V_1_load_A;
    sc_signal< sc_logic > dst_V_last_V_1_load_B;
    sc_signal< sc_lv<2> > dst_V_last_V_1_state;
    sc_signal< sc_logic > dst_V_last_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > dst_V_id_V_1_data_out;
    sc_signal< sc_logic > dst_V_id_V_1_vld_in;
    sc_signal< sc_logic > dst_V_id_V_1_vld_out;
    sc_signal< sc_logic > dst_V_id_V_1_ack_in;
    sc_signal< sc_logic > dst_V_id_V_1_ack_out;
    sc_signal< sc_lv<1> > dst_V_id_V_1_payload_A;
    sc_signal< sc_lv<1> > dst_V_id_V_1_payload_B;
    sc_signal< sc_logic > dst_V_id_V_1_sel_rd;
    sc_signal< sc_logic > dst_V_id_V_1_sel_wr;
    sc_signal< sc_logic > dst_V_id_V_1_sel;
    sc_signal< sc_logic > dst_V_id_V_1_load_A;
    sc_signal< sc_logic > dst_V_id_V_1_load_B;
    sc_signal< sc_lv<2> > dst_V_id_V_1_state;
    sc_signal< sc_logic > dst_V_id_V_1_state_cmp_full;
    sc_signal< sc_lv<1> > dst_V_dest_V_1_data_out;
    sc_signal< sc_logic > dst_V_dest_V_1_vld_in;
    sc_signal< sc_logic > dst_V_dest_V_1_vld_out;
    sc_signal< sc_logic > dst_V_dest_V_1_ack_in;
    sc_signal< sc_logic > dst_V_dest_V_1_ack_out;
    sc_signal< sc_lv<1> > dst_V_dest_V_1_payload_A;
    sc_signal< sc_lv<1> > dst_V_dest_V_1_payload_B;
    sc_signal< sc_logic > dst_V_dest_V_1_sel_rd;
    sc_signal< sc_logic > dst_V_dest_V_1_sel_wr;
    sc_signal< sc_logic > dst_V_dest_V_1_sel;
    sc_signal< sc_logic > dst_V_dest_V_1_load_A;
    sc_signal< sc_logic > dst_V_dest_V_1_load_B;
    sc_signal< sc_lv<2> > dst_V_dest_V_1_state;
    sc_signal< sc_logic > dst_V_dest_V_1_state_cmp_full;
    sc_signal< sc_lv<32> > mask;
    sc_signal< sc_lv<16> > x;
    sc_signal< sc_lv<16> > y;
    sc_signal< sc_logic > src_TDATA_blk_n;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > dst_TDATA_blk_n;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<32> > mask_read_reg_239;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > tmp_last_V_fu_144_p1;
    sc_signal< sc_lv<1> > tmp_last_V_reg_259;
    sc_signal< sc_lv<32> > tmp_data_V_fu_196_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_lv<16> > tmp_5_fu_205_p2;
    sc_signal< sc_lv<16> > tmp_4_fu_227_p2;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<1> > tmp_fu_159_p1;
    sc_signal< sc_lv<1> > p_not1_fu_172_p2;
    sc_signal< sc_lv<1> > invert_fu_162_p2;
    sc_signal< sc_lv<32> > p_not_fu_184_p2;
    sc_signal< sc_lv<1> > brmerge_fu_178_p2;
    sc_signal< sc_lv<32> > p_s_fu_190_p2;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_924;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<16> ap_const_lv16_0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<16> ap_const_lv16_2B3;
    static const sc_lv<32> ap_const_lv32_FF000000;
    static const sc_lv<32> ap_const_lv32_FFFFFF;
    static const sc_lv<16> ap_const_lv16_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_condition_924();
    void thread_ap_enable_pp0();
    void thread_ap_idle_pp0();
    void thread_ap_reset_idle_pp0();
    void thread_ap_rst_n_inv();
    void thread_brmerge_fu_178_p2();
    void thread_dst_TDATA();
    void thread_dst_TDATA_blk_n();
    void thread_dst_TDEST();
    void thread_dst_TID();
    void thread_dst_TKEEP();
    void thread_dst_TLAST();
    void thread_dst_TSTRB();
    void thread_dst_TUSER();
    void thread_dst_TVALID();
    void thread_dst_V_data_V_1_ack_in();
    void thread_dst_V_data_V_1_ack_out();
    void thread_dst_V_data_V_1_data_out();
    void thread_dst_V_data_V_1_load_A();
    void thread_dst_V_data_V_1_load_B();
    void thread_dst_V_data_V_1_sel();
    void thread_dst_V_data_V_1_state_cmp_full();
    void thread_dst_V_data_V_1_vld_in();
    void thread_dst_V_data_V_1_vld_out();
    void thread_dst_V_dest_V_1_ack_in();
    void thread_dst_V_dest_V_1_ack_out();
    void thread_dst_V_dest_V_1_data_out();
    void thread_dst_V_dest_V_1_load_A();
    void thread_dst_V_dest_V_1_load_B();
    void thread_dst_V_dest_V_1_sel();
    void thread_dst_V_dest_V_1_state_cmp_full();
    void thread_dst_V_dest_V_1_vld_in();
    void thread_dst_V_dest_V_1_vld_out();
    void thread_dst_V_id_V_1_ack_in();
    void thread_dst_V_id_V_1_ack_out();
    void thread_dst_V_id_V_1_data_out();
    void thread_dst_V_id_V_1_load_A();
    void thread_dst_V_id_V_1_load_B();
    void thread_dst_V_id_V_1_sel();
    void thread_dst_V_id_V_1_state_cmp_full();
    void thread_dst_V_id_V_1_vld_in();
    void thread_dst_V_id_V_1_vld_out();
    void thread_dst_V_keep_V_1_ack_in();
    void thread_dst_V_keep_V_1_ack_out();
    void thread_dst_V_keep_V_1_data_out();
    void thread_dst_V_keep_V_1_load_A();
    void thread_dst_V_keep_V_1_load_B();
    void thread_dst_V_keep_V_1_sel();
    void thread_dst_V_keep_V_1_state_cmp_full();
    void thread_dst_V_keep_V_1_vld_in();
    void thread_dst_V_keep_V_1_vld_out();
    void thread_dst_V_last_V_1_ack_in();
    void thread_dst_V_last_V_1_ack_out();
    void thread_dst_V_last_V_1_data_out();
    void thread_dst_V_last_V_1_load_A();
    void thread_dst_V_last_V_1_load_B();
    void thread_dst_V_last_V_1_sel();
    void thread_dst_V_last_V_1_state_cmp_full();
    void thread_dst_V_last_V_1_vld_in();
    void thread_dst_V_last_V_1_vld_out();
    void thread_dst_V_strb_V_1_ack_in();
    void thread_dst_V_strb_V_1_ack_out();
    void thread_dst_V_strb_V_1_data_out();
    void thread_dst_V_strb_V_1_load_A();
    void thread_dst_V_strb_V_1_load_B();
    void thread_dst_V_strb_V_1_sel();
    void thread_dst_V_strb_V_1_state_cmp_full();
    void thread_dst_V_strb_V_1_vld_in();
    void thread_dst_V_strb_V_1_vld_out();
    void thread_dst_V_user_V_1_ack_in();
    void thread_dst_V_user_V_1_ack_out();
    void thread_dst_V_user_V_1_data_out();
    void thread_dst_V_user_V_1_load_A();
    void thread_dst_V_user_V_1_load_B();
    void thread_dst_V_user_V_1_sel();
    void thread_dst_V_user_V_1_state_cmp_full();
    void thread_dst_V_user_V_1_vld_in();
    void thread_dst_V_user_V_1_vld_out();
    void thread_invert_fu_162_p2();
    void thread_p_not1_fu_172_p2();
    void thread_p_not_fu_184_p2();
    void thread_p_s_fu_190_p2();
    void thread_src_TDATA_blk_n();
    void thread_src_TREADY();
    void thread_src_V_data_V_0_ack_in();
    void thread_src_V_data_V_0_ack_out();
    void thread_src_V_data_V_0_data_out();
    void thread_src_V_data_V_0_load_A();
    void thread_src_V_data_V_0_load_B();
    void thread_src_V_data_V_0_sel();
    void thread_src_V_data_V_0_state_cmp_full();
    void thread_src_V_data_V_0_vld_in();
    void thread_src_V_data_V_0_vld_out();
    void thread_src_V_dest_V_0_ack_in();
    void thread_src_V_dest_V_0_ack_out();
    void thread_src_V_dest_V_0_data_out();
    void thread_src_V_dest_V_0_load_A();
    void thread_src_V_dest_V_0_load_B();
    void thread_src_V_dest_V_0_sel();
    void thread_src_V_dest_V_0_state_cmp_full();
    void thread_src_V_dest_V_0_vld_in();
    void thread_src_V_dest_V_0_vld_out();
    void thread_src_V_id_V_0_ack_in();
    void thread_src_V_id_V_0_ack_out();
    void thread_src_V_id_V_0_data_out();
    void thread_src_V_id_V_0_load_A();
    void thread_src_V_id_V_0_load_B();
    void thread_src_V_id_V_0_sel();
    void thread_src_V_id_V_0_state_cmp_full();
    void thread_src_V_id_V_0_vld_in();
    void thread_src_V_id_V_0_vld_out();
    void thread_src_V_keep_V_0_ack_in();
    void thread_src_V_keep_V_0_ack_out();
    void thread_src_V_keep_V_0_data_out();
    void thread_src_V_keep_V_0_load_A();
    void thread_src_V_keep_V_0_load_B();
    void thread_src_V_keep_V_0_sel();
    void thread_src_V_keep_V_0_state_cmp_full();
    void thread_src_V_keep_V_0_vld_in();
    void thread_src_V_keep_V_0_vld_out();
    void thread_src_V_last_V_0_ack_in();
    void thread_src_V_last_V_0_ack_out();
    void thread_src_V_last_V_0_data_out();
    void thread_src_V_last_V_0_load_A();
    void thread_src_V_last_V_0_load_B();
    void thread_src_V_last_V_0_sel();
    void thread_src_V_last_V_0_state_cmp_full();
    void thread_src_V_last_V_0_vld_in();
    void thread_src_V_last_V_0_vld_out();
    void thread_src_V_strb_V_0_ack_in();
    void thread_src_V_strb_V_0_ack_out();
    void thread_src_V_strb_V_0_data_out();
    void thread_src_V_strb_V_0_load_A();
    void thread_src_V_strb_V_0_load_B();
    void thread_src_V_strb_V_0_sel();
    void thread_src_V_strb_V_0_state_cmp_full();
    void thread_src_V_strb_V_0_vld_in();
    void thread_src_V_strb_V_0_vld_out();
    void thread_src_V_user_V_0_ack_in();
    void thread_src_V_user_V_0_ack_out();
    void thread_src_V_user_V_0_data_out();
    void thread_src_V_user_V_0_load_A();
    void thread_src_V_user_V_0_load_B();
    void thread_src_V_user_V_0_sel();
    void thread_src_V_user_V_0_state_cmp_full();
    void thread_src_V_user_V_0_vld_in();
    void thread_src_V_user_V_0_vld_out();
    void thread_tmp_4_fu_227_p2();
    void thread_tmp_5_fu_205_p2();
    void thread_tmp_data_V_fu_196_p3();
    void thread_tmp_fu_159_p1();
    void thread_tmp_last_V_fu_144_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
